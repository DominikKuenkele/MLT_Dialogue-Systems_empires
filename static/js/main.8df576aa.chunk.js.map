{"version":3,"sources":["components/Unit.ts","components/Archer.tsx","components/Horseman.tsx","components/Spearman.tsx","components/Production.tsx","components/Status.tsx","Util.ts","machines/EmpireMachine.ts","machines/UnitMachine.ts","DialogueUtil.ts","machines/UserEmpireMachine.ts","machines/GameMachine.ts","machines/GameBoardMachine.ts","components/GameBoardReactContext.ts","components/HealthBar.tsx","components/Base.tsx","components/GamePiece.tsx","components/GameTile.tsx","components/GameBoard.tsx","machines/SpeechRecognitionMachine.ts","components/Game.tsx","index.tsx"],"names":["units","getUnitByString","name","Archer","Horseman","Spearman","Worker","Base","props","y","size","x","width","height","viewBox","className","empire","d","transform","Production","production","unit","ref","getSnapshot","context","type","image","targetTurn","Status","turn","empires","isInHexCoordArray","array","coord","some","neighbour","q","r","s","moveType","dummyRef","id","createEmpireMachine","initialContext","createMachine","moves","initial","states","settingUp","entry","on","REGISTERED","target","actions","sendParent","after","fetchMoves","send","to","gameBoard","MOVES","assign","_c","event","verifyMoves","always","cond","produce","checkIfMovesLeft","length","executeMove","POSSIBLE_MOVES","randomMove","attackMoves","filter","move","attack","Math","floor","random","location","final","onDone","waiting","TURN","defeated","victorious","controlUnits","pure","unitId","push","registerAtGameBoard","startProduction","producable","guards","movesLeft","spearmanContext","maxHealth","health","effective","ineffective","moveRange","attackRange","productionTime","movable","archerContext","horsemanContext","baseContext","createUnitMachine","MOVABLE","NOT_MOVABLE","idle","DAMAGE","inAction","damage","dead","unitType","unitEmpire","isDead","nluRequest","text","fetch","Request","process","method","body","then","data","json","machineAnswers","say","value","speechRecognitionMachine","sendToSRM","getPrompts","prompt","state","hist","nomatch","ENDSPEECH","number","REPROMPT","parseInt","formFillingPromptMachine","condition","parserId","init","RECOGNISED","recResult","TIMEOUT","binaryGrammar","abstractPromptMachine","createUserEmpireMachine","empireContext","srm","errorMessage","commandTranslator","proposedCommand","undefined","registerAtSRM","startUtterance","getCommand","utterances","parseCommand","invoke","src","utterance","_","onError","motionStateNode","execute","translated","OCC_ALLY","OCC_ENEMY","OUT_OF_RANGE","EXECUTED","OCC_NOT","fetchInformation","getUnitType","parseUtterance","find","element","entity","translateUnitType","executeProduction","PROD_IN_PROGRESS","request_turn","RES_TURN","request_moves","getSourceUnit","sourceUnit","toLowerCase","translateSourceUnit","request_unit_move_range","sayDistance","distance","skip","verification","includes","YES","NO","approve","checkIfCommandProposed","exit","resetProposedCommand","executeProposedCommand","storeProposedCommand","proposeCommand","toString","toUpperCase","resetCommandTranslator","translateTargetField","regexExec","exec","unit_type","commandProposed","validateSourceUnit","validateTargetField","console","log","validateUnitType","sourceUnitPrompt","targetPrompt","sourceError","targetError","getTarget","role","checkTargetField","getBaseLocation","rowIndex","colIndex","unitContext","getAllNeighbours","max_dist","hexCoord","hexCoordinate","neighbourCoords","max","min","getFreeNeighbour","freeFields","getUnitLocation","getUnit","targetNotOccupied","getDistance","location1","location2","hexCoord1","hexCoord2","abs","GameBoardReactContext","React","createContext","number_tiles_x","number_tiles_y","tile_size","HealthBar","useContext","start_x","end_x","css_classes","x1","y1","x2","y2","GamePiece","useActor","unitRef","GameTile","Object","entries","GameBoard","numberTilesX","numberTilesY","tileSize","hexagon_height","sqrt","getGameBoardDimensions","numberTileY","gameBoardWidth","gameBoardHeight","hexagons","GridGenerator","orientedRectangle","gameBoardRef","gameBoardState","spacing","map","hex","i","cancel","createSpeechRecognitionMachine","listeners","registration","REGISTER","respond","speechRecognition","setUp","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","headers","_context","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","voice","v","test","error","TTS_READY","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","ASRRESULT","SELECT","CLICK","RECSTOP","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","forwardToListeners","listener","forwardTo","sendUtteranceToListeners","registerListeners","_e","uuid","origin","createDefaultGameBoard","defaultGameBoard","row","gameBoardRow","col","Game","useMachine","devTools","recStart","asEffect","asr","start","recStop","abort","ttsStart","content","debug","onend","speechSend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","recLogResult","logIntent","nluData","intent","speechInterpret","speechMachineRef","userEmpire","aiEmpireQueue","aiEmpirePile","currentEmpire","machinesReady","START","createMachines","createGameBoard","createUserEmpire","createAIEmpires","handlingResponses","waitingForResponse","EMPIRE_READY","checkingIfReady","ready","processingUser","EMPIRE_DONE","processingAI","checkRemainingEmpires","empireTurn","processingTurn","SEND_LIVING_EMPIRES","emp","won","lost","userEmpireDead","oneEmpireLiving","empiresInQueue","notifyGameBoardCurrentEmpire","notifyGameBoardEndTurn","empire4","spawn","list","empire1","empire2","empire3","empireDone","temp","moveUserToCurrent","moveNextAIToCurrent","splice","resetAI","resetCurrentEmpire","notifyCurrentMachineToStart","livingEmpires","currentTurn","producer","newUnit1","newUnit2","newUnit5","newUnit6","newUnit3","newUnit7","newUnit8","START_GAME","waitingForTurn","START_TURN","REQ_LIVING_EMPIRES","END_TURN","handlingEvents","MOVE","ATTACK","PRODUCE","GET_MOVES","REQ_TURN","REQ_MOVES_FOR_UNIT","unitY","unitX","attackableFields","movableFields","cleanUpGameBoard","DEAD","checkProducer","prod","baseY","baseX","spawnY","spawnX","produceUnit","newUnit","makeUnitsMovable","unitSnap","getMoves","every","spawnEmpire","point","base","initialUnit","removeEmpire","el","fieldUnit","stop","removeDeadUnit","applyMove","applyAttackDamage","targetUnit","applyReceivedDamage","alreadyProducing","unitIsBase","unitExistsNot","targetNotOnMap","targetOccupiedByEnemy","targetOccupiedByAlly","outOfRange","unitRange","gameState","gameSend","productions","userProductions","onClick","output","App","inspect","url","iframe","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.8df576aa.chunk.js","sourcesContent":["import {empires} from \"../Util\";\n\nexport enum units {\n    Archer = \"archer\",\n    Horseman = \"horseman\",\n    Spearman = \"spearman\",\n    Worker = \"worker\",\n    Base = \"base\"\n}\n\n\nexport function getUnitByString(name: string): units | undefined {\n    switch(name) {\n        case 'archer':\n            return units.Archer\n        case 'horseman':\n            return units.Horseman\n        case 'spearman':\n            return units.Spearman\n        case 'worker':\n            return units.Worker\n        case 'base':\n            return units.Base\n        default:\n            return undefined\n    }\n}\n\n\nexport interface UnitProps {\n    size: number,\n    empire: empires\n}\n","import React from \"react\";\nimport {UnitProps} from \"./Unit\";\n\nexport function Archer(props: UnitProps) {\n    return (\n        <svg y={-props.size / 2} x={-props.size / 2} width={props.size}\n             height={props.size}\n             viewBox=\"0 0 450 450\" className={\"unit\"}>\n            <path\n                className={props.empire}\n                d=\"M354.295,84.173c26.361,8.117,55.507,1.468,75.511-18.533c3.905-3.905,3.905-10.237,0-14.142\n\tc-3.905-3.905-10.236-3.906-14.142,0c-17.878,17.877-45.771,21.204-67.831,8.09C308.19,36.02,260.991,26.046,214.936,31.508\n\tc-43.519,5.159-83.275,23.139-115.7,52.184L82.912,67.369c4.818-8.462,6.081-18.493,3.305-28.265\n\tC82.686,26.676,73.158,17.148,60.73,13.617L14.133,0.381C10.645-0.61,6.895,0.365,4.33,2.929c-2.564,2.564-3.539,6.315-2.548,9.803\n\tL15.018,59.33c3.531,12.428,13.059,21.956,25.487,25.487c3.432,0.975,6.896,1.452,10.313,1.452c6.311,0,12.456-1.638,17.946-4.762\n\tl16.199,16.199c-30.617,32.948-49.54,73.793-54.856,118.632c-5.46,46.055,4.512,93.253,28.08,132.898\n\tc13.114,22.06,9.787,49.953-8.09,67.831c-3.905,3.905-3.905,10.237,0,14.142c1.953,1.953,4.512,2.929,7.071,2.929\n\ts5.119-0.977,7.071-2.929c20.001-20.002,26.651-49.15,18.533-75.511l130.091-130.091l63.981,63.981l3.259,42.378\n\tc0.184,2.38,1.212,4.616,2.899,6.304l56.698,56.698c1.907,1.907,4.463,2.929,7.072,2.929c1.087,0,2.183-0.177,3.244-0.542\n\tc3.612-1.24,6.204-4.428,6.678-8.218l3.761-30.081l30.081-3.76c3.79-0.474,6.979-3.065,8.219-6.677\n\tc1.239-3.613,0.313-7.616-2.388-10.316l-56.698-56.698c-1.688-1.688-3.924-2.716-6.305-2.899l-42.379-3.26l-63.981-63.981\n\tL354.295,84.173z M339.386,366.367l-39.625-39.625l-1.187-15.426l42.395,42.394L339.386,366.367z M367.768,337.986l-12.657,1.582\n\tl-42.394-42.393l15.426,1.186L367.768,337.986z M334.95,75.234L212.863,197.32l-99.461-99.461\n\tC174.601,43.807,263.632,34.36,334.95,75.234z M45.97,65.578c-5.711-1.623-10.09-6.001-11.713-11.713l-8.335-29.344l29.344,8.335\n\tc5.711,1.623,10.09,6.001,11.713,11.713c1.709,6.018,0.089,12.251-4.334,16.674S51.988,67.287,45.97,65.578z M73.832,336.351\n\tc-41.534-72.473-31.108-163.234,25.282-224.495l99.607,99.607L73.832,336.351z\"/>\n        </svg>\n    );\n}\n\n","import React from \"react\";\nimport {UnitProps} from \"./Unit\";\n\nexport function Horseman(props: UnitProps) {\n    return (\n        <svg y={-props.size / 2} x={-props.size / 2} width={props.size}\n             height={props.size}\n             viewBox=\"1150 100 3050 2000\" className={\"unit\"} transform={\"scale(1 -1)\"}>\n            <path\n                className={props.empire}\n                d=\"m 4055.63,2116.85 -14.93,11.64 127.96,3.33 z m -98.15,-27.47 c -38.42,-8.78 -93.22,-21.71 -159.14,-36.51 -65.92,-14.76 -142.74,-32.45 -225.21,-50.57 -82.47,-18.16 -170.44,-37.54 -258.41,-56.92 -88.06,-18.94 -176.12,-37.88 -258.68,-55.64 -82.55,-17.77 -159.76,-33.65 -225.86,-47.62 -66.11,-13.93 -121.32,-24.96 -159.91,-32.95 -38.64,-7.79 -60.71,-12.24 -60.71,-12.24 0,0 21.93,5.13 60.3,14.11 38.42,8.77 93.23,21.69 159.14,36.5 65.93,14.77 142.74,32.42 225.22,50.57 82.47,18.17 170.43,37.55 258.4,56.92 88.06,18.95 176.12,37.89 258.68,55.65 82.55,17.8 159.76,33.65 225.86,47.63 66.1,13.94 121.32,24.95 159.91,32.95 38.64,7.78 60.72,12.23 60.72,12.23 0,0 -21.93,-5.13 -60.31,-14.11 z M 2457.42,1687.23 c -3.97,-1.84 -8.55,-3.64 -13.38,-6.01 -4.83,-2.35 -10.16,-4.68 -15.62,-7.54 -5.48,-2.81 -11.26,-5.77 -17.23,-8.84 -5.94,-3.14 -12.13,-6.27 -18.28,-9.73 -6.19,-3.39 -12.46,-6.85 -18.67,-10.45 -12.58,-6.87 -24.98,-14.09 -36.57,-20.91 -11.59,-6.82 -22.42,-13.2 -31.69,-18.66 -18.53,-11.01 -30.88,-18.35 -30.88,-18.35 0,0 2.85,2.18 7.97,5.84 5.15,3.62 12.44,8.9 21.43,14.86 9,5.92 19.45,12.95 30.96,19.98 11.52,7.02 23.84,14.45 36.37,21.55 6.27,3.53 12.63,6.89 18.9,10.2 6.23,3.38 12.51,6.44 18.52,9.5 5.98,3.14 12.02,5.67 17.63,8.27 5.61,2.61 11.09,4.71 16.05,6.84 4.94,2.19 9.71,3.65 13.82,5.16 4.11,1.53 7.76,2.68 10.81,3.52 6.06,1.71 9.52,2.69 9.52,2.69 0,0 -3.35,-1.31 -9.21,-3.6 -2.95,-1.06 -6.48,-2.48 -10.45,-4.32 z m -1.46,-153.03 c 8.26,-5.09 17.62,-10.86 29.05,-14.27 19.85,-5.91 71.83,-19.22 74.03,-19.79 2.04,-0.52 4.2,-0.15 5.95,1.02 0.24,0.16 15.56,10.29 34.53,18.52 1.85,-9.84 32.35,-9.37 44.48,-3.08 6.83,3.55 10.19,-3.65 11.82,-10.38 -10.9,-11.67 -20.37,-17.06 -20.37,-17.06 0,0 -26.37,-18.13 -38.73,-4.02 -8.85,10.11 -11.08,1.38 -10.94,-10.89 -0.35,1.08 -0.71,2.14 -1.16,3.16 -0.86,2.05 -1.7,4.04 -2.49,5.93 -0.92,1.79 -1.8,3.49 -2.6,5.05 -1.51,3.13 -3.25,5.49 -4.23,7.21 -1.05,1.69 -1.65,2.65 -1.65,2.65 0,0 0.09,-1.13 0.24,-3.12 0.08,-2 0.52,-4.74 0.41,-8.11 -0.01,-1.65 -0.02,-3.44 -0.03,-5.33 -0.15,-1.85 -0.32,-3.81 -0.49,-5.84 -0.12,-1.99 -0.62,-4.03 -0.92,-6.05 -0.27,-2.03 -0.98,-4.02 -1.43,-5.97 -0.43,-1.6 -1.02,-3.12 -1.55,-4.62 -9.6,0.56 -22.89,-0.55 -54.43,3.68 -15.77,2.12 -31.94,7.14 -46.39,12.83 8.26,-1.69 17.45,-3.24 26.7,-4.26 3.73,-0.32 7.41,-0.8 11.08,-0.98 3.67,-0.18 7.24,-0.51 10.74,-0.48 3.49,0 6.83,-0.17 10.02,0.04 3.19,0.18 6.18,0.16 8.94,0.47 2.75,0.29 5.27,0.55 7.5,0.78 2.22,0.26 4.14,0.68 5.72,0.93 3.14,0.56 4.94,0.87 4.94,0.87 0,0 -1.83,0.07 -5.02,0.19 -1.58,0.09 -3.5,0.08 -5.7,0.29 -2.19,0.24 -4.66,0.51 -7.35,0.81 -2.68,0.26 -5.56,0.9 -8.6,1.38 -3.04,0.44 -6.21,1.29 -9.47,2 -3.28,0.67 -6.61,1.73 -10,2.62 -3.38,0.9 -6.77,2.11 -10.16,3.16 -13.52,4.5 -26.55,10.26 -36.06,14.9 -4.75,2.33 -8.63,4.37 -11.28,5.84 -0.65,0.37 -1.23,0.7 -1.74,0.99 -3.67,6.42 -8.14,12.79 -13.83,18.88 0.77,4.65 1.78,11.19 2.86,19.21 5.41,-1.66 11.07,-5.13 17.61,-9.16 z m 231.63,-161.97 c 4.32,-0.88 8.75,-1.65 13.18,-2.85 3.48,-0.79 6.94,-1.87 10.39,-2.92 -0.41,-0.14 -0.82,-0.25 -1.23,-0.39 -3.96,-1.39 -7.84,-2.89 -11.62,-4.45 -8.11,3.89 -15.73,8.05 -22.87,12.3 3.9,-0.35 7.97,-1.08 12.15,-1.69 z m 530.63,472.81 c 2.65,5.16 5.55,10.19 8.56,14.75 2.96,4.58 6.04,8.67 8.87,12.02 2.84,3.36 5.4,6 7.33,7.73 1.91,1.74 3.06,2.67 3.06,2.67 0,0 -0.48,-1.42 -1.44,-3.8 -1.01,-2.33 -2.34,-5.73 -4.14,-9.61 -0.87,-1.97 -1.75,-4.13 -2.84,-6.31 -1.06,-2.21 -2.03,-4.61 -3.25,-6.97 -1.21,-2.37 -2.25,-4.93 -3.55,-7.4 -1.25,-2.49 -2.52,-5.03 -3.79,-7.57 -2.55,-5.07 -5.27,-10.06 -7.86,-14.74 -2.59,-4.68 -5.1,-9.02 -7.41,-12.68 -4.51,-7.36 -8.15,-12.08 -8.15,-12.08 0,0 0.57,5.95 2.97,14.35 1.16,4.21 2.73,9.04 4.73,14.1 1.95,5.07 4.3,10.37 6.91,15.54 z m 76.93,12.36 c 2.91,3.34 5.86,6.29 8.61,8.62 2.66,2.39 5.18,4.14 6.98,5.27 1.84,1.11 2.93,1.65 2.93,1.65 0,0 -0.51,-1.14 -1.49,-2.99 -0.96,-1.86 -2.32,-4.46 -4.02,-7.52 -1.7,-3.06 -3.73,-6.57 -6.04,-10.24 -1.19,-1.8 -2.29,-3.76 -3.58,-5.63 -1.28,-1.88 -2.59,-3.79 -3.89,-5.69 -2.66,-3.78 -5.46,-7.47 -8.2,-10.85 -2.72,-3.41 -5.4,-6.49 -7.82,-9.07 -2.39,-2.59 -4.54,-4.66 -6.07,-6.09 -0.76,-0.78 -1.3,-1.08 -1.78,-1.56 -0.42,-0.47 -0.64,-0.72 -0.64,-0.72 0,0 0.04,0.28 0.11,0.79 0.09,0.45 0.32,1.55 0.64,2.51 0.61,2.03 1.57,4.89 3,8.15 1.37,3.3 3.2,7 5.36,10.84 2.15,3.85 4.61,7.85 7.32,11.69 2.71,3.84 5.62,7.54 8.58,10.84 z M 1258.12,653.059 c 2.86,4.613 5.64,9.519 8.3,14.671 -0.5,-3.011 -0.72,-5.808 -0.63,-8.25 -0.72,-0.609 -1.47,-1.242 -2.17,-1.832 -1.95,-1.636 -3.76,-3.148 -5.5,-4.589 z m -6.64,23.519 c -0.84,-0.609 -1.62,-1.168 -2.42,-1.738 0.98,3.269 2.12,6.941 3.44,10.922 0.1,0.308 0.22,0.66 0.32,0.968 0.24,-1 0.46,-1.89 0.61,-2.589 0.35,-1.5 0.54,-2.301 0.54,-2.301 0,0 -0.04,0.82 -0.1,2.359 -0.03,1.25 -0.13,3.09 -0.14,5.231 3.11,1.84 6.35,3.82 9.72,5.949 -1.15,-4.297 -2.36,-8.527 -3.66,-12.668 -2.93,-2.199 -5.72,-4.27 -8.31,-6.133 z m 4.48,181.871 c 1.71,3.051 4.62,6.219 7.94,8.801 3.36,2.648 7.38,4.941 11.8,7.121 6.39,3.039 13.55,6.258 20.76,9.508 -3.87,-4.598 -7.67,-9.02 -11.12,-13.34 -1.6,-1.969 -3.13,-3.867 -4.64,-5.75 -5.54,-4.141 -11.08,-8.359 -16.56,-12.68 -3.8,-2.988 -7.56,-6 -11.29,-9.031 -0.64,4.281 0.02,9.992 3.11,15.371 z m 119.6,143.101 c 1.73,2.78 3.75,5.5 5.86,8.23 2.11,2.73 4.15,5.58 6.4,8.34 1.95,2.23 3.89,4.52 5.87,6.8 0.65,0.25 1.29,0.55 1.94,0.79 4.22,1.74 8.46,3.25 12.66,4.69 -0.15,-0.4 -0.32,-0.87 -0.47,-1.27 -0.62,-1.67 -1.21,-3.25 -1.79,-4.79 -0.99,-1.47 -1.93,-3 -2.88,-4.52 -1.62,-1.11 -3.21,-2.2 -4.89,-3.35 -2.82,-1.85 -5.56,-3.96 -8.31,-6.17 -2.75,-2.21 -5.62,-4.36 -8.41,-6.72 -3.86,-3.48 -7.81,-7.041 -11.67,-10.752 0.14,0.231 0.26,0.461 0.41,0.692 1.7,2.589 3.47,5.269 5.28,8.03 z m 668.61,672.75 c -3.91,-0.56 -7.21,-0.81 -9.5,-1.09 -2.3,-0.23 -3.63,-0.3 -3.63,-0.3 0,0 1.23,0.49 3.42,1.23 2.21,0.69 5.32,1.82 9.11,2.92 7.57,2.28 17.75,4.9 28.01,7.13 10.27,2.2 20.63,4.01 28.46,5.06 3.91,0.56 7.21,0.81 9.5,1.09 2.3,0.23 3.63,0.29 3.63,0.29 0,0 -1.24,-0.49 -3.43,-1.23 -2.2,-0.69 -5.31,-1.82 -9.1,-2.92 -7.57,-2.28 -17.75,-4.89 -28.02,-7.12 -10.27,-2.2 -20.62,-4.01 -28.45,-5.06 z m 203.2,391.85 c 1.29,7.7 2.49,14.9 3.74,21.3 1.14,5.74 3.6,11.39 7.1,16.78 0.07,0.01 0.1,0.02 0.18,0.03 0.89,0.13 2.37,0.29 4.31,0.48 3.87,0.33 9.49,0.74 16.3,0.73 6.81,0.1 14.78,-0.32 23.33,-1.09 4.24,-0.57 8.7,-0.89 13.13,-1.74 4.47,-0.7 9.01,-1.51 13.48,-2.6 4.53,-0.9 8.96,-2.18 13.33,-3.45 4.44,-1.13 8.6,-2.77 12.72,-4.19 4.16,-1.33 7.95,-3.15 11.65,-4.7 1.84,-0.8 3.63,-1.58 5.36,-2.34 1.67,-0.87 3.29,-1.71 4.84,-2.51 3.09,-1.65 6.02,-3.04 8.47,-4.5 2.43,-1.51 4.55,-2.83 6.29,-3.91 3.5,-2.18 5.5,-3.42 5.5,-3.42 0,0 -1.82,1.49 -5,4.11 -1.6,1.31 -3.55,2.91 -5.78,4.74 -2.26,1.79 -5,3.55 -7.9,5.63 -1.46,1.02 -2.98,2.09 -4.56,3.19 -1.65,0.99 -3.35,2.02 -5.1,3.08 -3.53,2.06 -7.18,4.44 -11.23,6.35 -4.01,2 -8.1,4.26 -12.48,6.02 -4.33,1.9 -8.75,3.83 -13.3,5.38 -4.51,1.74 -9.1,3.21 -13.66,4.55 -4.53,1.5 -9.12,2.46 -13.52,3.64 -8.86,2 -17.25,3.56 -24.53,4.41 -1.4,0.19 -2.71,0.34 -4.02,0.48 21.01,15.35 53.64,24.69 92.96,20.55 -5.88,-0.52 -11.96,-1.28 -17.98,-2.39 -3.38,-0.54 -6.72,-1.26 -9.99,-1.98 -3.28,-0.66 -6.48,-1.42 -9.55,-2.24 -3.07,-0.82 -6.06,-1.47 -8.83,-2.34 -2.78,-0.83 -5.41,-1.6 -7.83,-2.32 -4.84,-1.42 -8.8,-2.89 -11.59,-3.78 -2.78,-0.93 -4.37,-1.46 -4.37,-1.46 0,0 1.66,0.23 4.57,0.63 2.91,0.37 7.03,1.08 12.02,1.58 2.49,0.26 5.18,0.54 8.03,0.84 2.84,0.34 5.87,0.43 8.97,0.67 3.1,0.24 6.31,0.39 9.56,0.44 3.25,0.1 6.55,0.2 9.83,0.1 6.57,-0.01 13.1,-0.41 19.1,-1.05 6.01,-0.63 11.51,-1.56 16.03,-2.67 1.01,-0.23 1.95,-0.47 2.86,-0.71 14.88,-25.38 35.69,-68.27 39.01,-113.79 -2.04,-1.1 -4.19,-2.18 -6.5,-3.24 -4.98,-2.36 -10.53,-4.51 -16.2,-6.51 -5.69,-1.91 -11.52,-3.57 -17.09,-4.95 -5.58,-1.26 -10.86,-2.37 -15.45,-3.04 -3.69,-0.69 -6.88,-1.02 -9.41,-1.31 0.82,2.52 1.51,4.95 1.94,7.13 1.15,5.09 1.12,8.87 1.12,8.87 0,0 -2.97,-2.33 -6.23,-6.41 -3.4,-4.01 -7.04,-9.79 -9.99,-15.9 -2.93,-6.12 -5.17,-12.58 -6.19,-17.73 -1.15,-5.1 -1.13,-8.87 -1.13,-8.87 0,0 2.96,2.34 6.22,6.42 2.17,2.56 4.43,5.89 6.56,9.52 0.19,-2.02 0.57,-4.17 0.89,-6.58 0.48,-2.79 0.75,-5.92 1.54,-9.09 0.72,-3.19 1.38,-6.62 2.29,-10.11 1.02,-3.45 1.98,-7.09 3.16,-10.74 1.32,-3.57 2.5,-7.33 4.03,-10.94 1.56,-3.59 3,-7.3 4.81,-10.75 0.92,-1.93 1.96,-3.72 2.95,-5.58 -3.03,1.51 -6.45,3.17 -10.3,4.95 -6.81,3.16 -14.78,6.54 -23.35,9.95 -8.58,3.38 -17.75,6.75 -26.98,9.87 -4.63,1.5 -9.2,3.13 -13.78,4.5 -4.58,1.39 -9.03,2.84 -13.4,4.07 -8.7,2.54 -16.84,4.77 -23.84,6.54 -6.96,1.88 -12.85,3.15 -16.92,4.16 -4.08,0.97 -6.41,1.52 -6.41,1.52 0,0 2.11,-1.13 5.81,-3.11 3.68,-2.02 9,-4.72 15.22,-8.31 6.27,-3.47 13.48,-7.66 21.12,-12.26 3.83,-2.27 7.7,-4.77 11.67,-7.22 3.97,-2.42 7.89,-5.11 11.85,-7.66 1.57,-1.04 3.08,-2.1 4.63,-3.15 -31.02,16.15 -67.38,32.09 -100.34,38.93 22.65,29.47 30.45,75.84 36.25,110.5 z m 408.19,-715.1 c -3.05,-0.38 -6.02,-0.84 -8.75,-1.2 -4.14,-0.45 -7.89,-1.6 -11.18,-2.36 -0.16,-0.04 -0.29,-0.07 -0.44,-0.11 -5.83,9.71 -10.81,19.4 -15.08,28.76 9.71,-7.83 21.61,-16.56 35.45,-25.09 z m 669.7,376.58 c 0,0 0.47,-1.02 1.36,-2.95 0.94,-1.9 2.03,-4.78 4.04,-8.15 1.78,-3.48 4.41,-7.43 7.44,-11.89 1.66,-2.13 3.43,-4.4 5.29,-6.79 2.02,-2.29 3.98,-4.78 6.24,-7.24 8.96,-9.9 20.22,-20.95 31.49,-33.7 5.61,-6.4 11.4,-13.06 16.8,-20.21 2.8,-3.49 5.4,-7.19 8.07,-10.85 2.7,-3.64 5.3,-7.38 7.79,-11.18 5.09,-7.53 9.71,-15.43 14.37,-23.11 4.39,-7.73 8.44,-15.4 12.43,-22.9 7.84,-14.77 15.85,-28.2 23,-39.58 7.22,-11.34 13.51,-20.66 17.96,-27.16 4.46,-6.51 7.01,-10.24 7.01,-10.24 0,0 -3.19,3.19 -8.54,9.02 -5.33,5.84 -12.8,14.35 -21.06,25.15 -8.28,10.77 -17.34,23.86 -25.95,38.58 -4.26,7.27 -8.67,14.78 -13.14,22.42 -4.64,7.41 -9.2,15 -14.3,22.33 -2.41,3.74 -4.89,7.44 -7.49,11.03 -2.57,3.61 -5.06,7.27 -7.76,10.72 -5.27,6.99 -10.49,13.87 -15.82,20.33 -10.56,12.99 -21.05,24.78 -29.25,35.75 -2.06,2.72 -3.91,5.46 -5.7,8.01 -1.63,2.67 -3.17,5.21 -4.63,7.59 -2.65,4.93 -4.71,9.32 -6.03,13.1 -1.6,3.65 -2.13,6.78 -2.77,8.79 -0.55,2.04 -0.85,3.13 -0.85,3.13 z M 2454.12,556.898 c -0.61,2.461 -1.16,5.161 -1.59,8.032 -0.38,2.879 -0.86,5.929 -0.95,9.109 -0.24,3.172 -0.27,6.449 -0.16,9.789 0.01,3.352 0.49,6.711 0.72,10.102 0.47,3.359 1.1,6.691 1.65,9.98 0.76,3.25 1.64,6.41 2.43,9.481 0.98,3.007 2.03,5.89 3,8.621 0.94,2.738 2.24,5.179 3.26,7.476 1.96,4.66 4.36,8.16 5.76,10.723 1.5,2.527 2.41,3.93 2.41,3.93 0,0 -0.53,-1.61 -1.54,-4.352 -0.51,-1.359 -1.14,-3.008 -1.85,-4.91 -0.78,-1.859 -1.35,-4.09 -2.14,-6.43 -0.71,-2.379 -1.68,-4.879 -2.4,-7.621 -0.73,-2.719 -1.5,-5.598 -2.3,-8.578 -0.64,-3.012 -1.21,-6.129 -1.95,-9.262 -0.47,-3.187 -1.02,-6.41 -1.43,-9.648 -0.27,-3.262 -0.8,-6.5 -0.86,-9.711 -0.12,-3.219 -0.37,-6.379 -0.26,-9.449 -0.05,-6.141 0.45,-11.86 0.98,-16.77 0.58,-4.91 1.29,-8.992 1.93,-11.832 0.64,-2.828 1.1,-4.449 1.1,-4.449 0,0 -0.86,1.449 -2.01,4.16 -1.05,2.731 -2.65,6.672 -3.8,11.609 z m -104.98,83.032 c 0.62,-1.289 1.28,-2.571 1.96,-3.828 2.93,-5.043 6.32,-9.942 10.41,-14.231 2.02,-2.16 4.17,-4.23 6.43,-6.16 2.27,-1.93 4.62,-3.77 7.12,-5.41 2.41,-1.781 5.07,-3.153 7.66,-4.653 1.28,-0.789 2.68,-1.32 4.03,-1.957 l 4.08,-1.863 4.09,-1.859 3.63,3.222 12.33,10.911 12.3,11.168 c 4.1,3.742 8.11,7.621 12.21,11.429 l 5.4,5.211 c 0.88,-1.531 1.77,-3.031 2.65,-4.519 l -42.83,-45.582 45.2,31.07 c -5.1,-16.238 -6.9,-31 -6.99,-43.59 -4.11,-0.687 -8.23,-1.391 -12.31,-1.801 -4.7,-0.617 -9.34,-1.129 -13.85,-1.367 -4.51,-0.371 -8.87,-0.633 -13.02,-0.609 -4.15,-0.051 -8.09,-0.231 -11.71,0.039 -3.63,0.16 -6.97,0.308 -9.92,0.437 -2.94,0.332 -5.5,0.614 -7.62,0.852 -4.24,0.48 -6.66,0.762 -6.66,0.762 0,0 2.37,-0.582 6.51,-1.602 2.09,-0.5 4.61,-1.109 7.51,-1.82 2.95,-0.508 6.27,-1.078 9.89,-1.711 3.63,-0.731 7.6,-1.059 11.8,-1.539 4.21,-0.551 8.66,-0.86 13.28,-1.059 4.62,-0.34 9.4,-0.43 14.27,-0.41 3.99,-0.102 8.03,0.051 12.08,0.199 0.05,-0.738 0.11,-1.449 0.17,-2.18 -20.72,-3.96 -41.26,-6.07 -52.52,-5.082 -30.01,4.813 -32.88,15.442 -32.88,15.442 -6.27,19.058 -5.39,49.59 -4.7,62.09 z m -3.74,105.39 c -34.61,88.168 -20.6,239.789 -20.6,239.789 -19.78,42.851 -4.95,73.341 -4.95,73.341 0,0 -12.36,12.36 -73.33,63.44 -30.41,25.48 -45.45,44.4 -57.18,63.68 1.26,-1.63 2.5,-3.3 3.82,-4.81 8.31,-9.57 17.29,-17.94 25.83,-25.65 8.55,-7.68 16.74,-14.53 23.81,-20.34 14.17,-11.58 23.9,-18.89 23.9,-18.89 0,0 -8.75,8.47 -21.31,21.67 -6.27,6.61 -13.5,14.4 -20.92,22.96 -7.39,8.55 -15.14,17.89 -21.63,27.61 -1.64,2.42 -3.1,4.87 -4.44,7.29 -1.34,2.55 -2.08,4.31 -2.98,7.04 -2.13,6.68 -5.22,12.2 -8.25,17.51 -6.25,10.39 -12.95,19.16 -18.84,26.51 -5.33,6.57 -9.99,11.88 -13.57,15.85 1.38,0.34 2.73,0.69 4.27,1.02 4.57,1.09 9.78,2.16 15.46,3.3 22.74,4.47 53.49,8.45 84.38,10.29 30.88,1.97 61.87,2.09 84.81,1.15 1.09,-0.05 2.15,-0.1 3.21,-0.15 14.19,-71.18 49.88,-105.82 68.55,-134.44 9.87,-15.14 18.11,-36.88 23.43,-60.33 -3.11,0 -6.29,-0.05 -9.56,-0.2 -4.22,-0.13 -8.55,-0.58 -12.92,-0.86 -4.37,-0.53 -8.79,-0.95 -13.17,-1.6 -1.36,-0.22 -2.72,-0.43 -4.08,-0.64 l -123.32,153.95 97.72,-159.15 c -2.43,-0.6 -4.82,-1.2 -7.1,-1.77 -3.58,-1.04 -6.96,-2.03 -10.09,-2.94 -6.23,-1.74 -11.29,-3.71 -14.85,-4.88 -3.55,-1.22 -5.58,-1.92 -5.58,-1.92 0,0 2.14,0.17 5.89,0.47 3.75,0.24 9.04,0.88 15.45,0.99 3.19,0.11 6.64,0.22 10.29,0.34 3.63,-0.03 7.47,-0.07 11.44,-0.1 0.19,0 0.39,-0.02 0.59,-0.02 v -0.01 0.01 c 3.77,-0.09 7.65,-0.36 11.56,-0.54 4.11,-0.2 8.28,-0.73 12.42,-1.09 4.14,-0.44 8.24,-1.1 12.26,-1.63 1.64,-0.31 3.26,-0.59 4.87,-0.87 -2.02,-0.09 -4.05,-0.18 -6.09,-0.3 -20.34,-0.99 -40.36,-3.85 -40.36,-3.85 0,0 20.2,-0.85 40.09,-3.56 9.95,-1.28 19.83,-2.87 27.19,-4.24 0.99,-0.18 1.92,-0.36 2.82,-0.53 2.1,-24.4 0.49,-48.18 -6.45,-66.24 -0.48,-1.269 -0.95,-2.531 -1.41,-3.789 -11.41,-1.132 -25.92,-2.121 -40.54,-2 -3.97,0.11 -8,0.039 -11.91,0.289 -3.93,0.2 -7.82,0.329 -11.55,0.711 -3.74,0.321 -7.39,0.579 -10.8,1.071 -3.41,0.468 -6.7,0.738 -9.65,1.328 -5.97,0.969 -10.94,1.93 -14.37,2.801 -3.47,0.789 -5.45,1.238 -5.45,1.238 0,0 1.86,-0.82 5.11,-2.25 3.24,-1.52 7.97,-3.41 13.74,-5.527 2.86,-1.161 6.05,-2.051 9.4,-3.192 3.34,-1.16 6.93,-2.121 10.65,-3.18 3.7,-1.101 7.59,-1.98 11.53,-2.96 3.95,-1.02 8,-1.731 12.04,-2.622 10.95,-2.207 22,-3.789 31.87,-4.918 -3.99,-0.128 -8.12,-0.23 -12.3,-0.269 -20.07,-0.313 -40.23,1.258 -40.23,1.258 0,0 19.53,-5.231 39.61,-8.649 4.89,-0.859 9.78,-1.652 14.4,-2.34 -7.44,-34.289 -8.36,-74.859 -13,-151.992 -0.14,-2.238 -0.25,-4.398 -0.36,-6.578 l -70.04,75.801 70.23,-133.68 c 3.05,-42.801 12.89,-67.14 23.74,-86.742 -2.47,-0.937 -4.9,-1.969 -7.31,-3.039 -5.15,-2.512 -10.28,-5.129 -15.13,-8.141 -4.89,-2.968 -9.58,-6.211 -14.17,-9.578 -3.31,-2.461 -6.5,-5.043 -9.66,-7.699 -1.02,0.438 -2.03,0.879 -3.03,1.367 -2.31,1.133 -4.64,2.231 -6.87,3.52 -2.31,1.179 -4.47,2.59 -6.71,3.929 -1.14,0.633 -2.15,1.454 -3.26,2.153 -1.08,0.73 -2.2,1.418 -3.23,2.23 l -3.2,2.328 c -1.03,0.832 -2.06,1.661 -3.14,2.461 -2.09,1.66 -4.13,3.41 -6.12,5.239 -2.08,1.773 -3.98,3.722 -5.99,5.652 -0.01,0.019 -0.03,0.039 -0.05,0.059 5.32,3.359 25.01,21.75 -5.33,99.05 z M 1276.23,251.602 c 0.91,-5.832 1.62,-12.661 2.04,-20 0.14,-3.672 0.46,-7.473 0.4,-11.332 0.03,-3.848 0.01,-7.77 -0.07,-11.688 -0.14,-3.922 -0.42,-7.844 -0.66,-11.691 -0.16,-3.852 -0.77,-7.621 -1.14,-11.282 -0.34,-3.66 -1,-7.168 -1.55,-10.5 -0.5,-3.328 -1.16,-6.461 -1.84,-9.328 -1.21,-5.769 -2.61,-10.5 -3.67,-13.789 -1.05,-3.293 -1.74,-5.14 -1.74,-5.14 0,0 -0.13,1.988 -0.21,5.429 -0.03,3.43 -0.07,8.321 -0.02,14.149 0.1,5.8 0.22,12.57 0.35,19.82 0.19,7.23 0.39,14.93 0.6,22.641 0.29,7.699 0.59,15.41 0.87,22.629 0.28,7.242 0.63,14 0.99,19.82 0.68,11.64 1.54,19.519 1.54,19.519 0,0 2.43,-7.589 4.11,-19.257 z m 2.93,428.507 c 5.88,2.27 11.95,4.711 18.02,7.27 0.09,0.051 0.19,0.09 0.29,0.133 -9.91,-9.153 -19.68,-17.793 -28.2,-25.071 0.95,3.098 2.39,6.469 4.52,9.957 1.54,2.543 3.36,5.09 5.37,7.711 z m 459.64,493.451 c -8.46,-2.34 -17.21,-4.66 -25.94,-7.56 -8.84,-2.57 -17.52,-6.05 -26.3,-9.22 -8.62,-3.59 -17.37,-6.9 -25.62,-10.98 -8.4,-3.76 -16.41,-7.98 -24.23,-11.97 -3.82,-2.16 -7.57,-4.28 -11.25,-6.35 -3.71,-2.03 -7.3,-4.08 -10.68,-6.27 -6.83,-4.26 -13.34,-8.24 -19.09,-12.31 -2.92,-1.99 -5.71,-3.89 -8.37,-5.7 -2.58,-1.9 -5.03,-3.71 -7.33,-5.41 -4.63,-3.38 -8.7,-6.33 -11.89,-9.01 -6.53,-5.12 -10.26,-8.04 -10.26,-8.04 0,0 3.25,3.45 8.95,9.49 2.8,3.05 6.43,6.55 10.76,10.43 2.14,1.97 4.43,4.06 6.83,6.27 2.46,2.14 5.17,4.23 7.94,6.5 2.79,2.23 5.63,4.67 8.72,6.97 3.14,2.25 6.39,4.57 9.72,6.96 3.3,2.45 6.83,4.75 10.48,7.05 3.64,2.33 7.36,4.7 11.21,6.99 7.85,4.31 15.81,9.13 24.4,13.02 8.41,4.27 17.32,7.78 26.12,11.57 9.04,3.17 17.99,6.6 27.07,9.14 8.96,2.96 18.08,4.77 26.78,6.9 8.81,1.68 17.3,3.43 25.47,4.33 4.07,0.49 8.04,0.98 11.87,1.44 3.84,0.4 7.57,0.51 11.14,0.77 3.57,0.19 6.98,0.48 10.24,0.57 3.26,0 6.35,0 9.25,0 5.8,0.06 10.85,-0.07 15,-0.42 8.28,-0.6 13.02,-0.95 13.02,-0.95 0,0 -4.73,-0.37 -13,-1.01 -4.12,-0.19 -9.11,-0.76 -14.82,-1.4 -2.85,-0.31 -5.89,-0.64 -9.09,-0.98 -3.18,-0.47 -6.52,-0.95 -10.01,-1.46 -6.99,-0.9 -14.48,-2.35 -22.4,-3.84 -3.97,-0.66 -8,-1.59 -12.1,-2.6 -4.12,-0.96 -8.32,-1.93 -12.59,-2.92 z M 1463.12,965.309 c 3.55,6.972 6.58,14.05 9.59,20.89 1.35,3.481 2.68,6.903 3.97,10.25 1.36,3.332 2.62,6.621 3.64,9.891 2.18,6.5 4.28,12.65 5.82,18.46 0.82,2.89 1.61,5.66 2.36,8.3 0.64,2.66 1.25,5.19 1.82,7.57 1.17,4.76 2.21,8.92 2.8,12.4 1.43,6.94 2.25,10.91 2.25,10.91 0,0 -0.11,-4.06 -0.3,-11.16 -0.06,-3.57 -0.4,-7.87 -1.02,-12.79 -0.27,-2.48 -0.56,-5.1 -0.87,-7.88 -0.39,-2.76 -0.99,-5.62 -1.51,-8.64 -0.58,-3 -1.05,-6.17 -1.79,-9.39 -0.81,-3.21 -1.64,-6.52 -2.5,-9.93 -1.64,-6.85 -4.1,-13.862 -6.55,-21.139 -2.85,-7.121 -5.45,-14.66 -9.1,-21.871 -3.28,-7.399 -7.37,-14.52 -11.23,-21.758 -4.4,-6.934 -8.56,-14.012 -13.38,-20.5 -4.48,-6.731 -9.74,-12.723 -14.53,-18.723 -5.13,-5.719 -10.01,-11.32 -15.15,-16.121 -2.54,-2.43 -5.01,-4.797 -7.4,-7.078 -2.43,-2.238 -4.96,-4.211 -7.28,-6.191 -2.37,-1.95 -4.56,-3.887 -6.77,-5.59 -2.27,-1.637 -4.42,-3.199 -6.44,-4.66 -3.99,-2.981 -7.55,-5.399 -10.61,-7.2 -6.07,-3.668 -9.54,-5.757 -9.54,-5.757 0,0 3.05,2.668 8.39,7.339 2.76,2.239 5.87,5.207 9.42,8.559 1.78,1.672 3.67,3.441 5.66,5.309 1.93,1.953 3.94,4.011 6.05,6.152 4.3,4.187 8.6,9.07 13.18,14.168 2.35,2.5 4.58,5.223 6.81,8.051 2.27,2.781 4.59,5.621 6.95,8.511 4.46,6 9.13,12.118 13.43,18.668 4.57,6.352 8.5,13.27 12.67,20.032 3.81,6.968 7.9,13.8 11.16,20.918 z M 1731.9,1215.9 c 12.78,1.17 23.95,1.73 33.14,1.94 9.2,0.28 16.42,0.12 21.34,-0.03 4.92,-0.1 7.54,-0.16 7.54,-0.16 0,0 -2.62,-0.14 -7.53,-0.39 -2.46,-0.12 -5.48,-0.28 -9.04,-0.46 -3.55,-0.26 -7.63,-0.57 -12.21,-0.91 -9.13,-0.7 -20.19,-1.87 -32.79,-3.71 -12.57,-2 -26.72,-4.45 -41.87,-8.27 -15.16,-3.79 -31.35,-8.7 -48.08,-14.99 -16.7,-6.31 -33.93,-14.08 -51.26,-22.94 -4.32,-2.22 -8.68,-4.46 -13.06,-6.9 l -6.59,-3.61 -6.33,-3.7 c -8.41,-5.21 -16.67,-11.03 -24.76,-17.21 -16.06,-12.44 -31.8,-26.29 -44.89,-41.84 -13.19,-15.39 -21.09,-34.38 -27.9,-53.7 -3.44,-9.67 -6.58,-19.42 -10.33,-29.02 -1.83,-4.84 -3.79,-9.44 -5.99,-14.102 -2.1,-4.636 -4.21,-9.218 -6.66,-13.578 -9.31,-17.718 -20.43,-33.59 -31.98,-47.672 -11.54,-14.097 -23.44,-26.527 -34.97,-37.347 -22.99,-21.762 -43.87,-37.762 -58.3,-49.11 -7.25,-5.632 -13.05,-9.929 -16.98,-12.882 -3.94,-2.95 -6.04,-4.52 -6.04,-4.52 0,0 7.91,6.883 21.77,18.93 6.92,6.019 15.3,13.359 24.69,21.992 9.4,8.629 19.79,18.578 30.78,29.719 10.93,11.191 22.23,23.82 33.17,37.898 10.87,14.133 21.27,29.813 30.03,47.043 2.3,4.25 4.25,8.707 6.19,13.207 2,4.402 3.9,9.092 5.57,13.752 3.4,9.33 6.61,19.06 10,28.87 3.45,9.8 7.09,19.76 11.82,29.44 4.61,9.67 10.53,19.12 17.54,27.34 14.04,16.49 30.1,30.4 46.69,43.16 8.33,6.33 16.87,12.27 25.77,17.56 2.24,1.32 4.47,2.58 6.79,3.84 l 6.65,3.49 c 4.38,2.35 8.88,4.58 13.34,6.78 17.8,8.8 35.5,16.21 52.7,22.13 17.18,5.99 33.83,10.39 49.34,13.58 15.5,3.35 29.93,5.1 42.7,6.38 z m 393.57,452.65 c 17.93,-42.75 32.95,-58.13 40.6,-63.55 0.58,-14.07 4.44,-54.62 29.75,-64.81 3.79,-1.53 7.78,-2.29 11.98,-2.29 15.25,0 33.27,10.15 54.55,30.61 16.35,0.9 36.54,-10.27 50.39,-19.63 1.91,-8.21 4.28,-17.01 6.84,-26.49 l 80.21,-24.14 -112.79,11.96 c -3.47,0.29 -6.95,0.57 -10.43,0.85 -15.72,1.15 -31.43,2.23 -46.15,3.02 -14.72,0.91 -28.46,1.4 -40.23,2.01 -13.28,0.5 -24.06,0.9 -30.94,1.16 -6.61,9.05 -25.57,37.76 -39.63,86.49 -6.76,23.41 -9.08,43.49 -10.47,61.26 z m -39.27,128.52 c 1.01,0.64 2.07,1.31 3.21,2.02 5.41,3.35 12.33,7.3 19.83,11.05 -2.24,-12.54 -8.51,-57.08 4.09,-106.4 l -7.33,-1.6 c -1.6,11.73 -4.3,22.44 -9.87,32.61 -10.84,19.82 -11.27,45.28 -9.93,62.32 z m 226.59,102.12 c 2.62,-6.29 6.14,-14.82 9.98,-24.34 -0.81,0.15 -1.59,0.27 -2.42,0.44 -4.01,0.8 -8.23,1.73 -12.47,2.97 -4.29,1.16 -8.55,2.68 -12.81,4.39 -2.09,0.92 -4.12,1.85 -6.25,2.9 l -6.6,3.48 c -8.73,4.63 -17.48,9.69 -25.99,14 -8.49,4.36 -16.69,7.84 -23.77,10.52 -7.08,2.71 -13.07,4.62 -17.25,5.95 -4.2,1.28 -6.6,2.01 -6.6,2.01 0,0 2.26,-1.09 6.2,-3 3.92,-1.95 9.52,-4.74 16.01,-8.45 6.49,-3.69 13.85,-8.26 21.34,-13.72 7.53,-5.4 15.28,-11.65 23.43,-17.75 l 6.07,-4.51 c 2.13,-1.51 4.42,-3.03 6.65,-4.45 4.54,-2.71 9.12,-5.18 13.65,-7.2 4.52,-2.12 8.97,-3.84 13.21,-5.41 4.25,-1.56 8.31,-2.86 12.08,-4.01 1.63,-0.49 3.19,-0.93 4.7,-1.35 7.86,-20.29 15.21,-40.65 17.57,-51.44 1.93,-8.84 1.61,-19.58 0.35,-29.97 -0.2,1.88 -0.33,3.74 -0.62,5.65 -0.4,3.5 -1.22,7.01 -1.87,10.5 -0.69,3.5 -1.72,6.92 -2.55,10.3 -0.97,3.35 -2.11,6.59 -3.12,9.73 -1.1,3.11 -2.37,6.04 -3.46,8.84 -1.04,2.82 -2.45,5.32 -3.53,7.7 -1.18,2.34 -2.08,4.54 -3.2,6.36 -1.05,1.83 -1.97,3.44 -2.72,4.76 -1.5,2.62 -2.35,4.12 -2.35,4.12 0,0 0.57,-1.63 1.58,-4.48 0.5,-1.42 1.11,-3.15 1.81,-5.12 0.77,-1.94 1.26,-4.28 1.99,-6.74 0.63,-2.49 1.55,-5.1 2.05,-8 0.56,-2.89 1.27,-5.88 1.78,-9.01 0.4,-3.16 0.93,-6.39 1.27,-9.68 0.2,-3.32 0.59,-6.65 0.64,-10 0.01,-3.35 0.19,-6.67 -0.04,-9.95 -0.08,-3.27 -0.3,-6.47 -0.65,-9.55 -0.48,-5 -1.26,-9.63 -2.12,-13.74 l -66.15,-14.4 c -0.28,3.02 -0.12,6.49 0.74,10.44 1.15,1.62 2.65,3.84 4.36,6.75 3.52,6.01 7.91,14.87 10.94,26.29 3.05,11.34 4.51,25.36 2.33,39.81 -1.06,7.21 -2.98,14.47 -5.66,21.46 -2.69,7.03 -6.06,13.64 -10.03,20.09 l -2.81,4.36 -3.21,4.63 c -2.18,2.94 -4.37,5.81 -6.69,8.55 -4.63,5.49 -9.58,10.55 -14.69,15.05 -10.22,9.04 -21.04,15.8 -30.75,20.47 -8.39,4.06 -15.82,6.55 -21.65,8.15 3,9.22 1.05,20.05 1.05,20.05 37.52,-4 83.51,-24.68 120.25,-44.45 z m 75.01,33.42 c -0.01,0.02 -0.03,0.03 -0.04,0.05 l 6.44,55.81 c 4.31,-0.17 8.74,-0.24 13.26,-0.15 z m 10.69,-10.22 10.2,65.93 c 0.01,0 0.01,0 0.02,0 4.18,0.17 8.35,0.48 12.47,0.88 z m 29.31,56.65 c -2.62,-18.04 -7.87,-32.52 -14.49,-44.18 l 9.1,54.48 c 1.83,0.19 3.68,0.34 5.46,0.6 0.36,0.05 0.69,0.12 1.04,0.17 -0.24,-3.69 -0.58,-7.39 -1.11,-11.07 z m 193.65,-665.07 c -18.86,9.08 -40.63,8.87 -54.39,-12.27 -24.67,-37.89 -76.35,-35.65 -97.64,-32.89 -5.03,31.18 -14.1,98.88 -8.6,154.26 21.22,-5.37 51.65,-9.46 89.08,-4.55 4.46,-4.12 13.89,-11.52 28.34,-16.58 7.98,-25.1 21.33,-57.24 43.21,-87.97 z m 40.23,28.14 c -1.13,-0.76 -2.18,-1.48 -3.07,-2.1 -2.75,-1.95 -4.32,-3.06 -4.32,-3.06 0,0 1.84,0.55 5.06,1.53 2.38,0.71 5.54,1.6 9.28,2.51 1.88,-0.32 3.77,-0.64 5.7,-1.1 0.46,-0.1 0.94,-0.2 1.4,-0.3 6.32,-3.29 12.91,-6.47 19.8,-9.44 -11.35,-3.72 -21.97,-7.72 -30.24,-11.19 -2.82,-1.17 -5.35,-2.25 -7.59,-3.23 -7.68,9.14 -14.44,18.62 -20.38,28.17 2.99,0.04 6.24,0.21 9.83,-0.22 4.03,-0.39 8.33,-0.47 12.91,-1.32 0.53,-0.08 1.09,-0.16 1.62,-0.25 z m 199.41,-258.59 c 4.33,3.06 9.87,6.64 16.73,9.97 3.51,1.45 7.34,2.9 11.46,4.34 2.03,0.87 4.26,1.07 6.5,1.6 2.25,0.48 4.58,0.93 6.98,1.31 4.78,1.1 9.89,0.68 15.2,0.92 2.67,0.15 5.33,-0.23 8.05,-0.59 2.73,-0.33 5.49,-0.72 8.29,-1.2 2.82,-0.38 5.49,-1.4 8.27,-2.21 2.75,-0.86 5.59,-1.67 8.29,-2.83 2.68,-1.19 5.31,-2.56 7.98,-3.87 l 3.98,-2.09 3.73,-2.48 c 2.48,-1.69 4.96,-3.41 7.39,-5.21 2.36,-1.86 4.57,-3.91 6.85,-5.88 4.66,-3.89 8.59,-8.46 12.81,-12.73 4.02,-4.45 7.83,-9.06 11.73,-13.55 3.63,-4.7 7.65,-9.09 11.16,-13.81 l 5.53,-6.89 5.29,-6.99 c 3.7,-4.56 6.92,-9.36 10.49,-13.92 6.78,-9.332 13.37,-18.609 19.06,-27.98 5.78,-9.328 10.69,-18.719 14.62,-27.91 3.98,-9.168 7.03,-18.122 9.4,-26.508 4.67,-16.813 5.84,-31.602 5.72,-42.082 -0.13,-10.5 -1.65,-16.719 -1.65,-16.719 0,0 -4.28,4.719 -10.19,13.109 -5.9,8.41 -13.5,20.45 -20.99,35.239 -3.81,7.371 -7.6,15.453 -11.55,23.98 -3.89,8.563 -7.83,17.633 -11.84,27.063 -4.04,9.41 -8.35,19.109 -13.42,28.578 -2.6,4.679 -5.2,9.46 -8.27,13.89 l -4.57,6.71 -5.02,6.34 c -3.31,4.29 -7.18,8 -10.96,11.76 -3.91,3.58 -8.03,6.91 -12.25,9.89 -4.31,2.84 -8.48,5.79 -12.92,7.93 -2.18,1.15 -4.26,2.42 -6.41,3.46 -2.21,0.91 -4.34,1.89 -6.43,2.87 l -3.09,1.5 -3.15,1.16 c -2.05,0.83 -4.11,1.6 -6.06,2.52 -4.04,1.38 -7.99,2.73 -11.84,4.05 -7.76,2.28 -15.31,3.97 -22.62,4.98 -3.66,0.22 -7.25,1.06 -10.72,1.16 -3.48,0.06 -6.85,0.21 -10.11,0.43 -6.44,-0.02 -12.34,-0.22 -17.36,-0.25 -9.86,-0.77 -16.31,-0.64 -16.31,-0.64 0,0 3.93,4.57 12.22,11.58 z m -64.26,255.03 c -11.49,-9.04 -18.47,-13.64 -18.47,-13.64 0,0 1.53,1.41 4.41,4.06 2.85,2.67 6.92,6.7 12.12,11.78 5.17,5.12 11.33,11.44 18.3,18.76 6.94,7.35 14.64,15.76 22.81,25.1 4.1,4.67 8.33,9.54 12.53,14.75 2.15,2.56 4.32,5.16 6.54,7.81 2.14,2.7 4.32,5.44 6.52,8.22 4.48,5.51 8.87,11.32 13.26,17.33 4.49,5.93 8.89,12.11 13.31,18.45 8.92,12.59 17.35,26.12 25.64,39.99 8.23,13.87 15.78,28.44 23.48,43.29 7.85,14.72 15.92,29.38 23.96,43.72 8.04,14.35 16.51,28.17 24.79,41.51 8.33,13.31 16.77,25.94 25.25,37.62 4.2,5.87 8.33,11.55 12.61,16.84 4.13,5.39 8.41,10.4 12.56,15.17 8.18,9.61 16.5,17.77 24.19,24.6 3.84,3.42 7.77,6.28 11.25,9.03 3.64,2.58 7.22,4.64 10.3,6.64 6.56,3.44 11.81,5.91 15.7,6.75 3.76,1.07 5.77,1.65 5.77,1.65 0,0 -1.91,-0.84 -5.49,-2.4 -3.67,-1.27 -8.43,-4.54 -14.38,-8.48 -2.78,-2.29 -5.99,-4.63 -9.21,-7.51 -3.06,-3.1 -6.62,-6.1 -10.02,-9.78 -6.82,-7.34 -14.12,-15.96 -21.5,-25.86 -3.7,-4.95 -7.51,-10.12 -11.18,-15.7 -3.82,-5.45 -7.64,-11.19 -11.45,-17.18 -7.72,-11.89 -15.31,-24.83 -23.23,-38.15 -3.84,-6.74 -7.75,-13.59 -11.71,-20.53 -3.87,-6.99 -7.79,-14.07 -11.74,-21.2 -7.85,-14.33 -15.65,-28.91 -23.35,-43.63 -7.76,-14.61 -15.69,-29.54 -24.33,-43.76 -4.4,-7.03 -8.6,-14.13 -13.38,-20.71 -4.64,-6.66 -9.12,-13.32 -13.97,-19.55 -4.74,-6.3 -9.33,-12.55 -14.28,-18.31 -4.78,-5.88 -9.55,-11.55 -14.38,-16.91 -4.73,-5.45 -9.42,-10.66 -14.15,-15.53 -4.62,-4.95 -9.26,-9.58 -13.74,-13.99 -8.87,-8.9 -17.41,-16.63 -25.07,-23.36 -7.62,-6.76 -14.55,-12.34 -20.27,-16.89 z m -90.96,-24.7 c -2.16,-1.51 -4.38,-3.05 -6.46,-4.5 -7.48,-5.22 -14.53,-10.14 -21.35,-14.78 -6.32,5.71 -12.18,11.69 -17.59,17.88 1.93,0.17 3.99,0.33 6.24,0.5 10.8,0.81 24.96,1.25 39.16,0.9 z m -44.29,-58.02 c 1.75,-7.98 2.09,-16.24 1.3,-24.71 -0.2,-2.17 -0.42,-4.33 -0.8,-6.15 l -0.5,-2.88 c -0.11,-0.59 -0.1,-0.72 -0.31,-1.69 l -0.4,-1.59 c -0.98,-4.28 -2.41,-8.45 -4.24,-12.36 -3.5,-7.93 -8.4,-14.94 -13.64,-21.23 -5.23,-6.34 -11.01,-11.85 -16.92,-16.7 -5.85,-4.91 -11.79,-9.23 -17.65,-12.91 -5.82,-3.74 -11.45,-7.01 -16.81,-9.72 -21.32,-11.05 -36.91,-14.77 -36.91,-14.77 0,0 3.29,2.19 9.05,6.02 5.71,3.86 13.79,9.41 23.16,16.3 9.32,6.96 19.95,15.3 30.24,25.07 5.07,4.96 10.07,10.24 14.65,15.87 4.53,5.67 8.41,11.83 11.43,18.2 0.76,1.59 1.46,3.2 2,4.85 0.69,1.61 1.15,3.26 1.62,4.92 l 0.36,1.23 c 0.03,-0.02 0.18,0.82 0.26,1.19 l 0.59,2.86 c 0.45,1.98 0.7,3.67 0.95,5.35 1.07,6.85 1.23,13.98 0.2,20.46 -0.89,6.55 -2.94,12.67 -6,17.96 -3.02,5.29 -6.7,10 -10.81,13.73 -4.09,3.73 -8.25,6.91 -12.23,9.32 -3.97,2.41 -7.61,4.36 -10.72,5.74 -6.19,2.84 -10.02,3.98 -10.02,3.98 0,0 3.99,0.03 10.87,-1.39 3.42,-0.76 7.61,-1.75 12.21,-3.6 4.59,-1.83 9.77,-4.2 14.89,-7.82 5.12,-3.56 10.36,-8.22 14.65,-14.28 4.32,-6.01 7.75,-13.31 9.53,-21.25 z m -84.38,-175.38 c -2.58,-0.8 -5.05,-1.69 -7.51,-2.35 -2.46,-0.62 -4.84,-1.22 -7.13,-1.79 -4.54,-1.22 -8.83,-1.85 -12.56,-2.58 -3.79,-0.56 -7.06,-1.06 -9.8,-1.28 -2.71,-0.31 -4.87,-0.38 -6.34,-0.44 -1.46,-0.05 -2.24,-0.07 -2.24,-0.07 0,0 3.03,0.77 8.19,2.43 2.6,0.73 5.69,1.91 9.27,3.01 3.53,1.33 7.54,2.63 11.82,4.33 4.3,1.65 8.9,3.51 13.71,5.62 4.88,1.94 9.75,4.58 14.94,6.92 5.09,2.56 10.22,5.45 15.43,8.33 5.02,3.19 10.42,6.01 15.2,9.71 l 7.46,5.12 c 2.44,1.76 4.67,3.76 6.99,5.61 2.27,1.91 4.64,3.68 6.85,5.57 2.12,2 4.2,3.98 6.26,5.93 2.03,1.97 4.14,3.81 6.01,5.79 1.82,2.03 3.6,4.02 5.34,5.96 1.75,1.94 3.45,3.82 5.1,5.65 1.55,1.9 2.91,3.85 4.3,5.66 2.67,3.7 5.4,6.95 7.52,10.04 1.98,3.18 3.71,5.95 5.13,8.24 2.92,4.57 4.69,7.18 4.69,7.18 0,0 -0.99,-2.93 -2.92,-8.05 -1,-2.56 -2.22,-5.67 -3.61,-9.24 -1.6,-3.47 -3.79,-7.19 -6.1,-11.33 -1.18,-2.05 -2.33,-4.25 -3.68,-6.42 -1.51,-2.06 -3.08,-4.19 -4.69,-6.37 -1.63,-2.19 -3.29,-4.44 -5,-6.74 -1.72,-2.29 -3.9,-4.27 -5.88,-6.48 -2.05,-2.16 -4.13,-4.37 -6.23,-6.59 -2.19,-2.15 -4.6,-4.1 -6.97,-6.14 -2.41,-1.99 -4.73,-4.14 -7.26,-6.03 l -7.73,-5.52 c -5.12,-3.79 -10.8,-6.64 -16.12,-9.87 -2.67,-1.62 -5.54,-2.8 -8.27,-4.14 -2.78,-1.26 -5.43,-2.69 -8.2,-3.76 -5.48,-2.21 -10.77,-4.37 -15.97,-5.91 z m -75.61,-484.239 c -2.91,-1.102 -6.23,-2.301 -9.99,-3.57 -6.62,-2.301 -14.46,-4.629 -22.94,-6.93 0.49,7.16 1.72,15.109 4.09,23.719 12.56,-6.129 24.91,-9.121 28.84,-13.219 z m -51.13,156.019 c 0.39,12.079 0.65,26.18 1.47,41.258 0.77,15.082 1.75,31.172 2.78,47.242 1.31,16.071 2.68,32.122 4.21,47.161 1.43,15.039 3.44,29.019 5.09,41 1.7,11.98 3.75,21.871 5.16,28.781 1.66,6.867 2.71,10.746 2.71,10.746 0,0 -0.64,-3.969 -1.76,-10.918 -0.45,-3.488 -1,-7.73 -1.62,-12.59 -0.51,-4.871 -1.09,-10.371 -1.73,-16.371 -0.54,-6 -1.27,-12.488 -1.79,-19.391 -0.57,-6.878 -1.17,-14.148 -1.79,-21.66 -1.32,-15.019 -2.45,-31.066 -3.55,-47.109 -4.7,-64.219 -9.39,-128.43 -9.39,-128.43 0,0 -0.39,16.121 0.21,40.281 z m -211.36,963.95 c 0.46,-1.17 0.98,-2.19 1.47,-3.27 -0.09,-0.07 -0.18,-0.12 -0.27,-0.19 -2.18,-1.5 -4.41,-3.34 -6.81,-5.35 -2.33,-2.07 -4.84,-4.31 -7.22,-6.86 -2.51,-2.44 -4.78,-5.29 -7.22,-8.12 -2.3,-2.94 -4.62,-5.98 -6.79,-9.17 -2.04,-3.27 -4.34,-6.41 -6.12,-9.85 -1.85,-3.39 -3.82,-6.67 -5.33,-10.12 -1.55,-3.42 -3.27,-6.65 -4.47,-10 -1.29,-3.3 -2.58,-6.44 -3.67,-9.46 -0.98,-3.06 -1.91,-5.95 -2.77,-8.62 -1.81,-5.25 -2.64,-9.86 -3.53,-12.95 -0.79,-3.12 -1.24,-4.9 -1.24,-4.9 0,0 0.88,1.61 2.43,4.44 1.64,2.78 3.53,6.94 6.57,11.52 1.45,2.3 3.03,4.79 4.69,7.43 1.76,2.57 3.73,5.19 5.69,7.92 1.88,2.79 4.25,5.35 6.44,8.07 2.14,2.76 4.69,5.24 7.07,7.8 2.33,2.62 5.07,4.82 7.51,7.17 2.55,2.23 5.17,4.27 7.67,6.2 2.62,1.79 5.03,3.63 7.51,5.02 2.4,1.53 4.75,2.71 6.89,3.81 2.16,1 4.13,1.93 5.88,2.54 1.75,0.69 3.22,1.12 4.42,1.46 0.07,0.02 0.15,0.04 0.22,0.06 1.52,-1.06 3.03,-2.03 4.52,-2.83 0.28,-0.42 0.6,-0.94 0.96,-1.56 1.47,-2.46 3.51,-6.16 5.47,-10.88 1.05,-2.34 1.97,-4.95 2.9,-7.75 0.97,-2.79 1.67,-5.82 2.47,-8.96 0.51,-3.17 1.38,-6.47 1.55,-9.87 0.17,-1.71 0.33,-3.43 0.5,-5.16 l -0.01,-5.22 c 0.17,-3.53 -0.42,-6.99 -0.73,-10.47 -0.27,-3.49 -1.35,-6.77 -1.95,-10.08 -0.48,-2.3 -1.26,-4.44 -2.01,-6.54 -0.4,-0.52 -0.85,-1.11 -1.43,-1.84 -1.76,-2.22 -4.36,-5.38 -7.63,-9.05 -6.53,-7.34 -15.8,-16.8 -26.33,-24.38 -2.63,-1.88 -5.34,-3.63 -8.09,-5.15 -2.76,-1.52 -5.55,-2.86 -8.33,-3.83 -2.79,-1.01 -5.56,-1.65 -8.22,-1.93 -2.65,-0.2 -5.25,-0.2 -7.53,0.4 -1.19,0.18 -2.26,0.56 -3.28,0.97 -1.06,0.33 -1.99,0.82 -2.84,1.34 -1.82,0.87 -3.11,2.1 -4.31,2.97 -2.14,2.01 -3.32,3.3 -3.32,3.3 0,0 0.83,-1.48 2.54,-4.02 0.99,-1.14 2.05,-2.73 3.75,-4.11 0.8,-0.76 1.69,-1.52 2.76,-2.16 1.03,-0.71 2.15,-1.42 3.43,-1.94 2.49,-1.29 5.47,-2 8.65,-2.48 3.19,-0.4 6.61,-0.4 10.06,0.03 2.71,0.29 5.44,0.88 8.16,1.57 -11.68,-7.49 -21.4,-10.03 -28.46,-7.19 -16.82,6.76 -20.55,42.26 -20.57,55.36 0,3.12 -1.65,5.78 -4.58,6.85 -0.17,0.08 -18.01,8.94 -41.04,67.92 -21.08,53.98 -13.71,109.4 -11.38,123.15 19.03,9.7 44.29,6.46 68.05,-1.1 -2.36,0.05 -4.7,0.09 -6.94,0.09 -5.26,0.03 -10.16,-0.18 -14.33,-0.24 -8.33,-0.43 -13.88,-0.72 -13.88,-0.72 0,0 5.39,-1.25 13.49,-3.12 4.01,-1.09 8.69,-2.22 13.63,-3.66 4.95,-1.43 10.16,-3.04 15.26,-4.85 10.17,-3.56 19.95,-7.98 25.63,-12.04 0.74,-0.48 1.38,-0.96 1.95,-1.43 1.12,-17.48 4.18,-43.07 12.44,-63.97 z m -95.33,-445.01 c -0.33,-0.13 -0.63,-0.24 -0.95,-0.37 -16.18,47.25 -0.3,111.93 4.92,130.54 16.96,-2.4 54.33,-7.77 94.62,-13.99 10.13,-3.24 19.81,-6.58 28.91,-9.89 -4.77,0.08 -9.61,0.14 -14.46,0.16 -18.4,0.13 -36.78,-0.26 -50.53,-0.9 -13.75,-0.59 -22.88,-1.35 -22.88,-1.35 0,0 9.15,-0.48 22.81,-1.74 13.66,-1.21 31.81,-3.29 49.88,-5.87 18.07,-2.55 36.05,-5.56 49.51,-7.96 6.76,-1.22 12.38,-2.24 16.32,-2.95 0.31,-0.05 0.54,-0.09 0.83,-0.14 7.78,-3.45 13.93,-6.34 18.14,-8.36 -0.13,-10.17 0.14,-19.78 0.72,-28.94 l 57.74,-10.59 -61.92,-0.33 c -23.19,-1.51 -52.19,-4.59 -81.06,-9.28 -31.38,-4.96 -62.39,-12.09 -85.24,-18.94 -5.71,-1.73 -10.93,-3.35 -15.51,-4.93 -4.61,-1.47 -8.57,-3.02 -11.85,-4.17 z m -44.21,-165.6 c -2.97,3.95 -5.63,7.57 -7.52,11.11 -2.09,3.37 -3.47,6.58 -4.63,9.16 -2.18,5.28 -2.77,8.46 -2.77,8.46 0,0 0.47,-0.65 1.34,-1.89 0.81,-1.23 2.27,-2.9 3.94,-5.05 1.8,-2.1 3.98,-4.59 6.64,-7.29 1.27,-1.4 2.69,-2.8 4.3,-4.19 1.6,-1.39 3.08,-3.02 4.86,-4.49 3.59,-2.92 7.36,-6.11 11.67,-9.11 4.09,-3.26 9.02,-5.86 13.72,-9 5.02,-2.71 10.08,-5.68 15.49,-8.22 5.52,-2.34 10.83,-5.27 16.67,-7.15 5.68,-2.21 11.34,-4.46 17.18,-6.06 5.78,-1.73 11.38,-3.77 17.06,-4.95 5.64,-1.27 11,-3.04 16.24,-4.09 5.25,-0.95 10.21,-2.03 14.81,-3.05 4.59,-1.08 8.85,-1.79 12.65,-2.41 3.79,-0.6 7.1,-1.28 9.84,-1.81 5.48,-1.08 8.64,-1.87 8.64,-1.87 0,0 -3.16,-0.5 -8.74,-1.08 -2.79,-0.28 -6.19,-0.65 -10.09,-0.9 -1.96,-0.15 -4.05,-0.3 -6.24,-0.46 -2.2,-0.15 -4.5,0.05 -6.91,0.06 -4.82,0.1 -10.07,0.23 -15.61,0.57 -5.54,0.35 -11.34,1.31 -17.36,2.18 -6.05,0.71 -12.15,2.38 -18.36,4.01 -6.28,1.38 -12.39,3.76 -18.53,6.05 -6.2,2.12 -12.01,5.32 -17.8,8.18 -2.95,1.32 -5.6,3.22 -8.3,4.88 -2.67,1.74 -5.39,3.3 -7.86,5.17 -4.88,3.82 -9.64,7.41 -13.6,11.5 -4.23,3.76 -7.61,7.96 -10.73,11.74 z M 3164.35,877.031 c -3.23,-14.019 -6.9,-26.691 -10.99,-37.621 -4.05,-10.941 -8.08,-20.269 -11.76,-27.769 -7.39,-15.012 -13.12,-22.68 -13.12,-22.68 0,0 1.23,2.027 3.28,5.988 2.03,3.961 4.77,9.891 8,17.52 3.19,7.652 6.6,17.133 9.92,28.152 3.28,11.051 6.26,23.699 8.87,37.59 2.55,13.91 4.21,29.148 5.24,45.269 0.73,16.079 0.77,33.43 1.02,51.18 0.28,35.6 0.19,73.68 2.37,111.88 1.22,19.07 3.09,38.14 5.65,56.79 2.46,18.72 6.21,36.84 8.84,54.33 5.44,35.02 8.74,68.13 12.03,96.46 3.14,28.36 6.54,51.99 9.97,68.34 1.63,8.18 3.45,14.5 4.76,18.77 1.38,4.24 2.12,6.5 2.12,6.5 0,0 -0.55,-2.31 -1.59,-6.65 -1,-4.33 -2.17,-10.76 -3.37,-18.96 -1.23,-8.21 -2.31,-18.23 -3.29,-29.75 -0.98,-11.52 -1.81,-24.56 -2.87,-38.77 -0.98,-14.23 -2.06,-29.66 -3.51,-45.96 -1.38,-16.33 -3.11,-33.5 -5.58,-51.29 -2.37,-17.8 -5.63,-35.88 -8.04,-54.28 -2.42,-18.45 -4.16,-37.26 -5.25,-56.14 -2.4,-37.74 -2.33,-75.75 -3.41,-111.43 -0.53,-17.879 -0.84,-35.012 -2.23,-51.551 -1.55,-16.429 -3.76,-31.898 -7.06,-45.918 z m -734.57,763.549 c -0.34,-10.34 -0.64,-25.13 -1.46,-42.86 -0.44,-8.87 -0.91,-18.47 -1.41,-28.63 -0.58,-10.16 -1.1,-20.86 -2.3,-31.98 -0.6,-5.49 0.02,-10.37 2.18,-15.43 2.11,-4.97 5.3,-9.74 8.34,-14.74 6.25,-9.92 11.51,-21.09 14.48,-32.8 2.96,-11.71 4,-23.82 4.25,-35.48 0.32,-11.71 -0.05,-23.3 -0.78,-34.39 -0.69,-11.11 -1.87,-21.77 -2.69,-31.87 -0.81,-10.1 -1.4,-19.66 -1.43,-28.49 -0.06,-8.83 0.23,-16.92 0.69,-24.09 0.31,-3.58 0.59,-6.94 0.85,-10.04 0.39,-3.08 0.74,-5.92 1.06,-8.48 0.59,-5.14 1.37,-9.13 1.75,-11.88 0.42,-2.74 0.65,-4.2 0.65,-4.2 0,0 -0.32,1.44 -0.92,4.15 -0.53,2.72 -1.63,6.66 -2.43,11.78 -0.44,2.55 -0.93,5.38 -1.46,8.46 -0.41,3.1 -0.85,6.46 -1.33,10.04 -0.43,3.59 -0.71,7.43 -1.11,11.47 -0.22,4.05 -0.47,8.32 -0.53,12.78 -0.44,17.83 1.23,38.61 2.62,60.64 0.62,11.04 0.87,22.38 0.45,33.94 -0.35,11.59 -1.5,23.2 -4.43,34.43 -2.75,11.28 -7.58,21.81 -13.63,31.64 -2.94,4.97 -6.19,9.86 -8.5,15.43 -2.4,5.45 -3.08,12.09 -2.34,17.63 2.35,21.9 3.88,42.61 5.2,60.27 2.75,35.38 4.58,58.97 4.58,58.97 0,0 -0.13,-5.92 -0.35,-16.27 z m -69.87,342.45 c 1.42,2.95 2.66,5.98 3.7,8.9 2.59,-0.48 5.97,-1.16 10.02,-1.63 4.69,-0.71 10.2,-1.22 16.18,-1.67 1.39,-0.08 2.87,-0.11 4.3,-0.16 l -16.86,-42.48 c -0.09,0.12 -0.18,0.25 -0.27,0.38 -2.01,2.9 -3.82,5.87 -5.68,8.73 -1.76,2.9 -3.28,5.82 -4.83,8.56 -1.62,2.73 -2.69,5.49 -3.92,7.97 -1.14,2.51 -2.36,4.78 -3.1,6.9 -0.29,0.74 -0.54,1.39 -0.8,2.06 0.42,0.81 0.86,1.61 1.26,2.44 z m -247.65,-94.36 c -6.16,-5.11 -11.95,-10.54 -16.96,-16.14 -3.13,-3.54 -5.97,-7.12 -8.47,-10.64 -1.19,-1.8 -2.34,-3.55 -3.46,-5.24 -1.01,-1.76 -1.98,-3.45 -2.92,-5.08 -1.67,-3.37 -3.16,-6.45 -4.19,-9.31 -1.21,-2.77 -1.75,-5.39 -2.45,-7.42 -1.01,-4.21 -1.47,-6.62 -1.47,-6.62 0,0 0.77,2.35 2.27,6.35 0.95,1.92 1.78,4.38 3.31,6.93 1.34,2.64 3.17,5.44 5.17,8.45 1.09,1.45 2.23,2.95 3.4,4.5 1.27,1.48 2.58,3.01 3.92,4.58 2.81,3.04 5.92,6.08 9.29,9.05 6.8,5.9 14.67,11.42 22.92,16.28 16.5,9.78 34.47,16.82 48.07,21.29 6.82,2.23 12.55,3.84 16.55,4.87 1.99,0.49 3.55,0.87 4.61,1.14 0.22,0.04 0.32,0.06 0.49,0.1 4.36,-1.86 9.35,-4.28 14.74,-7.55 8.35,-5.04 17.41,-12 25.64,-20.81 4.12,-4.4 8.04,-9.24 11.62,-14.42 1.8,-2.58 3.48,-5.29 5.12,-8 l 2.25,-4.02 2.34,-4.51 c 2.7,-5.48 5.08,-11.34 6.68,-17.08 1.05,-3.72 1.72,-7.41 2.22,-11.06 -0.28,0.14 -0.53,0.28 -0.81,0.43 -3.4,1.57 -6.98,3.42 -10.92,4.89 -1.95,0.76 -3.95,1.55 -6,2.35 -2.08,0.68 -4.2,1.37 -6.35,2.07 -4.25,1.51 -8.82,2.43 -13.31,3.64 -4.57,0.97 -9.21,1.83 -13.81,2.59 -4.66,0.51 -9.25,1.23 -13.79,1.51 -4.56,0.2 -8.98,0.55 -13.27,0.57 -4.26,-0.08 -8.39,-0.15 -12.29,-0.22 -3.89,-0.21 -7.55,-0.61 -10.91,-0.88 -3.35,-0.27 -6.41,-0.53 -9.11,-1.03 -2.69,-0.42 -5.03,-0.78 -6.96,-1.08 -3.84,-0.6 -6.03,-0.94 -6.03,-0.94 0,0 2.21,-0.28 6.07,-0.76 1.91,-0.24 4.24,-0.53 6.9,-0.87 2.66,-0.26 5.64,-0.84 8.87,-1.49 3.22,-0.66 6.71,-1.25 10.35,-2.09 3.59,-0.96 7.38,-1.97 11.3,-3.02 3.87,-1.13 7.77,-2.61 11.73,-3.92 3.95,-1.4 7.8,-3.22 11.67,-4.79 3.8,-1.8 7.53,-3.67 11.11,-5.58 3.49,-2.13 7.02,-3.93 10.12,-6.18 1.57,-1.06 3.11,-2.1 4.62,-3.12 0.55,-0.42 1.06,-0.82 1.6,-1.23 -24.42,11.86 -57.13,24.02 -86.55,22.68 -1.77,-0.06 -3.6,-0.18 -5.56,-0.25 -2.68,-0.07 -5.45,-0.48 -8.36,-0.76 -2.92,-0.25 -5.86,-0.83 -8.91,-1.28 -3.04,-0.45 -6.06,-1.16 -9.14,-1.75 -12.22,-2.62 -24.18,-6.44 -33.06,-9.68 -3.64,-1.34 -6.72,-2.56 -9.15,-3.57 l -11.89,-3.9 c -2.99,39.69 22.48,65.56 51.15,82.02 z m 45.89,-379.57 c 6.77,-1 17.55,-2.58 30.92,-4.55 11.59,-1.88 25.14,-3.85 39.58,-6.34 1.26,-0.21 2.57,-0.43 3.84,-0.64 12.1,-4.24 23.59,-9.15 34.26,-14.33 -9.81,0.28 -20.49,0.5 -31.2,0.55 -18.39,0.13 -36.77,-0.26 -50.52,-0.9 -13.76,-0.59 -22.89,-1.35 -22.89,-1.35 0,0 9.16,-0.48 22.82,-1.74 13.66,-1.21 31.81,-3.29 49.87,-5.87 18.07,-2.55 36.06,-5.56 49.52,-7.96 6.75,-1.22 12.38,-2.24 16.32,-2.95 1.33,-0.22 2.4,-0.41 3.34,-0.57 16.6,-10.47 28.43,-19.62 33.56,-23.76 1.17,-8.81 2.13,-18.05 2.81,-27.74 l 55.26,-14.88 -78.35,6 c -16.4,1.02 -34.13,2.01 -51.9,2.88 -31.67,1.56 -63.32,2.79 -87.05,3.68 -12.82,0.45 -23.3,0.81 -30.26,1.05 -18.33,47.47 1.54,86.09 10.07,99.42 z M 1417.56,343.988 c 48.14,53.391 51.05,69.551 68.76,125.453 17.7,55.899 44.72,65.219 96.89,101.559 13.05,9.078 24.23,20.961 33.95,34.672 17.02,23.996 29.58,53.617 39.87,83.699 2.93,8.598 5.69,17.231 8.31,25.777 1.31,4.282 2.58,8.532 3.83,12.75 2.5,8.442 4.88,16.743 7.21,24.782 18.64,64.289 11.18,214.289 53.11,278.58 25.91,39.73 64.68,78.39 125.72,121.62 37.74,26.72 85.16,63.2 139.82,78.7 38.77,10.99 63.51,12.59 76.96,7.74 l 0.01,0.02 c 0,0 0.16,-0.07 0.24,-0.11 0.71,-0.26 1.37,-0.55 2.01,-0.84 1.15,-0.49 5.54,-2.5 8.06,-4.47 3.22,-2.21 6.29,-5.27 9.26,-8.76 2.82,-3.49 5.51,-7.43 7.93,-11.58 4.87,-8.32 9.28,-17.55 14.5,-26.83 5.22,-9.26 11.37,-18.51 18.91,-26.65 3.79,-4.03 7.87,-7.83 12.22,-11.22 4.35,-3.37 8.91,-6.4 13.58,-8.97 4.65,-2.59 9.37,-4.81 13.98,-6.62 4.58,-1.9 9.1,-3.26 13.28,-4.58 4.24,-1.03 8.11,-2.23 11.64,-2.83 3.51,-0.65 6.57,-1.39 9.13,-1.68 5.12,-0.74 8.05,-1.16 8.05,-1.16 0,0 -2.96,-0.04 -8.15,-0.11 -2.6,-0.11 -5.75,0.14 -9.38,0.24 -3.65,0.05 -7.72,0.62 -12.21,1 -4.46,0.67 -9.32,1.33 -14.4,2.54 -5.09,1.13 -10.42,2.67 -15.84,4.66 -5.42,1.96 -10.91,4.46 -16.29,7.42 -5.39,2.98 -10.62,6.48 -15.6,10.34 -9.93,7.79 -18.53,17.17 -25.7,26.24 -7.16,9.06 -13.13,17.71 -18.31,23.99 -0.51,0.62 -0.96,1.08 -1.45,1.64 -19.92,-34.94 -79.08,-84.96 -149.43,-119.91 -139.66,-69.4 -158.56,-105.789 -176.68,-187.07 -16.79,-75.282 -14.72,-268.411 -128.87,-337.629 -114.16,-69.223 -62.58,-93.762 -147.58,-200.661 -31.28,-39.339 -72.86,-57.582 -105.26,-66.062 0.59,-1.77 1.18,-3.699 1.89,-5.906 0.77,-3.012 1.83,-6.34 2.61,-10.051 0.88,-3.68 1.72,-7.691 2.4,-11.961 0.84,-4.219 1.21,-8.781 1.81,-13.41 0.35,-4.68 0.74,-9.488 0.79,-14.391 -0.07,-4.918 0.1,-9.859 -0.46,-14.82 l -0.6,-7.367 c -0.39,-2.434 -0.78,-4.852 -1.17,-7.25 -0.43,-2.391 -0.69,-4.762 -1.27,-7.063 -0.6,-2.289 -1.18,-4.551 -1.76,-6.777 -0.99,-4.461 -2.58,-8.613 -4.04,-12.512 -0.72,-1.949 -1.42,-3.84 -2.1,-5.672 -0.86,-1.75 -1.69,-3.449 -2.48,-5.078 -1.64,-3.219 -2.96,-6.219 -4.43,-8.73 -1.56,-2.461 -2.93,-4.598 -4.05,-6.36 -2.22,-3.48 -3.49,-5.468 -3.49,-5.468 0,0 0.86,2.199 2.36,6.058 0.74,1.91 1.65,4.231 2.68,6.891 0.93,2.679 1.63,5.847 2.57,9.199 0.45,1.672 0.91,3.422 1.39,5.219 0.29,1.851 0.59,3.761 0.9,5.73 0.64,3.91 1.36,7.981 1.44,12.301 0.12,2.129 0.25,4.301 0.38,6.488 0.12,2.18 -0.1,4.422 -0.13,6.653 -0.08,2.218 -0.16,4.461 -0.24,6.699 l -0.79,6.73 c -0.36,4.469 -1.42,8.891 -2.2,13.2 -0.9,4.308 -2.11,8.5 -3.21,12.511 -1.36,3.969 -2.43,7.828 -3.92,11.36 -1.32,3.578 -2.73,6.879 -4.12,9.879 -1.28,3.039 -2.77,5.679 -3.91,8.082 -1.29,2.289 -2.34,4.367 -3.32,5.929 -0.96,1.649 -1.68,2.778 -2.13,3.43 -0.22,0.328 -0.37,0.559 -0.51,0.758 -13.37,-1.739 -21.82,-1.637 -21.82,-1.637 0,0 64.86,23.957 98.85,61.656 z m 797.88,-131.187 c -1.02,0.781 -2.01,1.539 -2.98,2.269 -3.87,2.93 -7.31,5.461 -10.12,7.489 -4.93,3.55 -7.93,5.57 -7.93,5.57 0,0 0.21,0.359 0.54,1.082 0.33,0.711 0.79,1.777 1.3,3.18 1.02,2.808 2.24,6.98 3.05,12.39 0.41,2.707 0.72,5.731 0.84,9.047 0.13,3.32 0.08,6.942 -0.22,10.852 -0.31,3.91 -0.87,8.109 -1.76,12.582 -0.89,4.468 -2.12,9.218 -3.75,14.218 -7.33,22.54 -39.43,47.43 -72.33,69.211 -3.66,2.418 -7.32,4.809 -10.96,7.137 -3.64,2.344 -7.26,4.633 -10.83,6.863 -8.9,5.59 -17.46,10.848 -25.15,15.649 -1.54,0.969 -3.05,1.91 -4.51,2.832 -5.87,3.699 -11.11,7.09 -15.48,10.117 -34.9,24.223 -143.05,41.93 -146.77,90.371 -3.73,48.449 121.12,140.692 136.96,167.711 7.91,13.5 13.15,29.969 11.3,43.078 0,0 32.35,-50.219 -3.77,-84.211 -41.43,-38.988 -124.67,-95.078 -81.95,-136.269 53.52,-51.598 178.77,-98.778 224.09,-144.918 11,-11.199 17.55,-22.071 21.47,-32.481 1.08,-0.261 2.18,-0.511 3.33,-0.8 10.81,-2.668 24.55,-7.188 37.74,-12.629 3.29,-1.371 6.59,-2.692 9.77,-4.153 3.18,-1.449 6.34,-2.769 9.31,-4.238 6,-2.809 11.5,-5.578 16.17,-8.031 4.7,-2.348 8.49,-4.59 11.19,-6.02 2.68,-1.469 4.21,-2.308 4.21,-2.308 0,0 -1.7,0.41 -4.68,1.121 -2.98,0.679 -7.18,1.828 -12.3,2.847 -5.1,1.129 -11.05,2.332 -17.44,3.442 -3.17,0.629 -6.5,1.07 -9.84,1.609 -3.34,0.551 -6.76,0.942 -10.15,1.379 -11.4,1.43 -22.74,2.129 -31.91,2.172 1.62,-21.68 -2.52,-40.5 8.36,-55.012 19.78,-26.371 49.27,-77.328 49.27,-77.328 -13.98,23.289 -43.72,48.527 -64.07,64.18 z m 270.6,-45.231 c 16.04,5.532 69.86,35.371 119.51,64.352 2.62,1.527 5.22,3.047 7.8,4.566 31.02,18.211 59.49,35.543 74.87,45.68 5.12,3.371 9.93,7.352 14.45,11.871 9.04,9.031 16.96,20.211 24.07,33.02 3.55,6.402 6.9,13.211 10.08,20.363 12.73,28.617 22.83,62.699 32.77,98.109 19.87,70.809 48.38,180.071 40.66,201.36 0,0 42.64,-44.621 14.62,-165.75 -28.02,-121.129 -44.81,-167.02 -114.44,-207.813 -54.91,-32.168 -201.88,-117.418 -243.08,-148.726 -6.31,-4.801 -11.56,-10.122 -15.93,-15.68 0.45,-1.852 0.91,-3.801 1.68,-5.813 0.78,-2.718 2.07,-5.4371 3.32,-8.3473 1.39,-2.832 2.98,-5.75 4.73,-8.6719 1.97,-2.7695 3.67,-5.8906 6.01,-8.539 2.24,-2.7422 4.38,-5.6406 6.94,-8.1016 2.48,-2.5273 4.81,-5.2187 7.47,-7.3789 2.6,-2.2305 5.04,-4.539 7.53,-6.5117 2.57,-1.8984 4.99,-3.707 7.22,-5.3672 4.44,-3.4531 8.6,-5.6211 11.33,-7.4922 2.8,-1.7695 4.4,-2.7773 4.4,-2.7773 0,0 -1.79,0.5898 -4.93,1.6172 -3.09,1.1406 -7.77,2.2812 -13.01,4.582 -2.66,1.0977 -5.55,2.3008 -8.59,3.5703 -3.02,1.3594 -6.09,3.0586 -9.36,4.707 -3.32,1.5625 -6.43,3.7227 -9.75,5.75 -3.38,1.961 -6.48,4.461 -9.69,6.8633 -3.31,2.3086 -6.11,5.2578 -9.16,7.8985 -2.86,2.8281 -5.6,5.7812 -8.12,8.7695 -0.47,0.6094 -0.92,1.1992 -1.39,1.8008 -9.52,-23.8516 -7.92,-45.5586 -7.92,-45.5586 -33.54,23.2969 -8.38,96.8981 -8.38,96.8981 0,0 37.27,21.43 64.29,30.75 z m 1027.62,69.2 c -1.46,-0.29 -3.24,-0.649 -5.28,-1.051 -2.08,-0.219 -4.43,-0.481 -6.98,-0.75 -1.94,-0.258 -4.01,-0.328 -6.16,-0.367 -3.62,0.296 -7.6,0.707 -11.76,1.359 -2.86,0.379 -5.78,0.91 -8.73,1.527 -3.01,0.524 -5.92,1.371 -8.94,2.102 -2.98,0.769 -5.85,1.801 -8.79,2.691 -2.78,1.11 -5.62,2.141 -8.27,3.321 -2.55,1.32 -5.18,2.449 -7.46,3.82 -2.23,1.418 -4.46,2.707 -6.39,4.058 -1.85,1.481 -3.54,2.84 -5.05,4.04 -1.56,1.179 -2.55,2.539 -3.57,3.519 -1.96,2.051 -3.08,3.231 -3.08,3.231 0,0 0.74,-1.45 2.04,-3.969 0.71,-1.231 1.34,-2.942 2.53,-4.551 1.16,-1.672 2.47,-3.551 3.9,-5.59 1.56,-1.961 3.42,-3.93 5.34,-6.129 1.98,-2.14 4.3,-4.09 6.64,-6.301 2.41,-2.07 5.04,-4.019 7.7,-6.109 2.46,-1.621 4.96,-3.383 7.52,-4.992 -5.99,-28.758 -17.19,-43.699 -17.19,-43.699 -11.18,6.261 -22.52,15.8 -33.25,29.359 -7.75,9.781 -11.88,18.359 -13.66,26.07 -0.26,1.102 -0.46,2.18 -0.62,3.25 -1.62,10.661 1.19,19.641 4.78,27.911 0.35,0.82 0.72,1.64 1.09,2.449 4.81,10.57 10.3,20.101 8.41,30.691 -1.75,9.789 -9.13,35.82 -18.17,66.102 -0.75,2.527 -1.51,5.078 -2.29,7.66 -8.51,28.34 -18.13,59.406 -25.79,83.988 -0.7,2.238 -1.38,4.422 -2.04,6.539 -4.64,14.84 -8.37,26.711 -10.41,33.242 -9.32,29.809 -87.58,82.918 -178.89,104.348 -91.31,21.43 -163.25,42.512 -163.25,42.512 -36.97,12.738 -118.55,60.328 -132.77,141.91 0,0 47.59,-85.91 145.85,-116.813 98.27,-30.898 111.08,-28.128 148.02,-35.429 113.61,-22.449 131.99,-37.481 167.17,-69.219 31.52,-28.43 59.33,-116.801 74.16,-180.461 13.95,-59.84 48.64,-73.078 52.23,-117.078 1.23,-1.25 2.42,-2.492 3.74,-3.731 2.22,-1.941 4.45,-4.152 6.87,-5.98 2.39,-1.93 4.83,-3.879 7.36,-5.551 1.27,-0.871 2.53,-1.738 3.77,-2.597 1.29,-0.774 2.57,-1.532 3.83,-2.27 2.52,-1.594 5.06,-2.91 7.54,-4.051 2.46,-1.23 4.83,-2.383 7.1,-3.16 2.3,-0.859 4.4,-1.652 6.27,-2.351 1.92,-0.532 3.61,-0.989 4.99,-1.379 2.83,-0.762 4.45,-1.2 4.45,-1.2 0,0 -1.64,-0.332 -4.51,-0.921 z m 46.2,1162.52 c 5.39,-41.58 7.89,-118.33 -29.38,-140.69 0,0 37.13,87.18 -0.43,142.87 -23.29,34.54 -9.07,61.52 -9.07,61.52 22.94,-26.26 36,-41.48 38.88,-63.7 z m -1088.55,348.14 c -1.39,0.99 -2.77,1.82 -3.86,2.72 -1.04,0.97 -1.94,1.82 -2.68,2.52 -1.5,1.42 -2.36,2.23 -2.36,2.23 0,0 0.62,-1 1.7,-2.77 0.56,-0.89 1.23,-1.98 2,-3.23 0.86,-1.19 2,-2.39 3.18,-3.81 1.14,-1.48 2.63,-2.8 4.3,-4.15 0.82,-0.7 1.68,-1.41 2.55,-2.14 0.96,-0.6 1.95,-1.21 2.95,-1.84 1.99,-1.36 4.23,-2.36 6.57,-3.34 2.3,-1.16 4.8,-1.64 7.29,-2.46 0.6,-0.14 1.21,-0.21 1.81,-0.34 -10.31,-4.5 -23.02,-8.77 -37.95,-11.58 -4.2,2.97 -9.46,6.88 -14.57,11.11 -5.5,4.52 -10.72,9.4 -14.34,13.4 -1.76,2.01 -3.28,3.73 -4.2,5.02 -0.97,1.28 -1.53,2.01 -1.53,2.01 0,0 0.13,-0.91 0.35,-2.5 0.19,-1.64 0.67,-3.89 1.27,-6.67 1.26,-5.51 3.57,-12.75 6.34,-19.83 0.83,-2.13 1.69,-4.22 2.55,-6.27 -23.78,-4.92 -45.13,-18.42 -66.53,-33.33 -0.65,3.52 -1.5,6.95 -2.41,10.09 -1.1,3.36 -2.15,6.42 -3.27,8.96 -0.99,2.56 -2.07,4.59 -2.75,6.02 -0.7,1.42 -1.1,2.23 -1.1,2.23 0,0 0.03,-0.9 0.07,-2.49 0.02,-1.57 0.15,-3.79 -0.02,-6.46 -0.03,-2.65 -0.36,-5.73 -0.72,-8.95 -0.49,-3.22 -1.13,-6.58 -1.98,-9.83 -1.07,-3.97 -2.47,-7.67 -3.93,-10.91 -7.79,-5.46 -15.69,-10.83 -23.77,-15.84 0.13,4.33 0.13,8.73 -0.25,13.09 -0.15,2.9 -0.49,5.76 -0.86,8.56 -0.3,2.81 -0.72,5.54 -1.22,8.16 -0.5,2.62 -0.83,5.15 -1.43,7.51 -0.53,2.36 -1.04,4.59 -1.51,6.65 -0.93,4.1 -1.99,7.45 -2.6,9.81 -0.65,2.35 -1.02,3.69 -1.02,3.69 0,0 -0.01,-1.4 -0.03,-3.84 -0.06,-2.44 0.04,-5.89 -0.19,-10.04 -0.11,-2.06 -0.24,-4.3 -0.36,-6.67 -0.08,-2.35 -0.45,-4.83 -0.68,-7.37 -0.22,-2.55 -0.56,-5.16 -1.01,-7.79 -0.4,-2.63 -0.82,-5.29 -1.43,-7.89 -1.01,-5.24 -2.53,-10.3 -4.11,-14.83 -1.55,-4.23 -3.22,-7.99 -4.93,-10.98 -4.2,-2 -8.44,-3.89 -12.8,-5.52 -2.23,-0.83 -4.39,-2.52 -6.47,-4.77 0.39,1.57 0.75,3.16 0.95,4.77 l 0.97,5.78 c 0.15,1.94 0.29,3.88 0.43,5.8 0.43,3.87 0.12,7.66 0.13,11.38 -0.29,3.67 -0.52,7.27 -1.07,10.63 -0.52,3.37 -1.08,6.56 -1.82,9.46 -1.34,5.84 -2.99,10.61 -4.29,13.97 -0.01,0.01 -0.01,0.02 -0.02,0.03 -1.17,6.15 -1.65,14.37 0.88,23.48 1.44,3.61 3.49,6.07 6.25,7.38 7.36,3.51 18.94,-0.86 22.75,-2.83 3.18,-1.67 7.1,-0.81 9.3,2.03 3.37,4.38 19.01,-0.28 29.4,-5.73 4.65,-4.11 14.01,-2.27 41.14,13.78 13.81,8.17 26.84,20.86 39.45,33.14 15.58,15.18 31.7,30.88 47.62,35.97 14.6,4.67 28.41,4.23 36.18,2.71 -1.17,-0.53 -2.35,-1.05 -3.51,-1.57 -18.3,-8.18 -34.09,-15.23 -37.87,-28.47 -1.89,-6.61 -0.33,-13.69 4.63,-21.02 4.88,-7.21 14.29,-10.55 25.42,-11.64 -2.63,-0.44 -5.31,-0.76 -8.07,-0.85 -2.1,0.14 -4.34,-0.06 -6.4,0.39 -2.11,0.29 -4.22,0.61 -6.15,1.3 -0.99,0.3 -1.97,0.59 -2.93,0.88 -0.91,0.42 -1.79,0.84 -2.66,1.24 -1.76,0.78 -3.43,1.6 -4.77,2.65 z m 1561.64,374.19 -1508.47,-328.38 c 10.77,5.72 9.53,12.79 8.41,15.68 -4.99,12.92 -36.89,14.4 -59.97,7.02 -17.55,-5.61 -33.54,-20.19 -48.98,-35.13 -11.8,38.86 -25.29,69.32 -30.71,80.95 10.1,2.43 29.64,8.41 49.67,21.62 27.02,17.8 44.3,30.35 44.47,30.47 2.67,1.95 3.73,5.43 2.6,8.54 -0.15,0.41 -15.04,41.86 -16.23,89.73 -1.53,61.28 -28.17,136.11 -98.23,145.29 -76.77,10.05 -130.9,-26.23 -138.95,-67.11 -1.28,-6.51 -2.51,-13.85 -3.82,-21.7 -6,-35.87 -14.21,-84.97 -38.71,-110.21 -0.5,0.05 -1,0.08 -1.49,0.08 -4.1,0 -8.04,-1.7 -10.86,-4.74 -3.17,-3.41 -4.55,-8.1 -3.74,-12.68 0.74,-4.4 0.45,-9.87 -0.5,-12.92 -11.43,-2.32 -37.4,-8.57 -63.14,-21.5 -47.66,-23.94 -71.16,-58.9 -67.98,-101.1 0.35,-4.54 2.76,-8.68 6.55,-11.21 2.47,-1.65 5.34,-2.5 8.24,-2.5 1.56,0 3.12,0.24 4.63,0.74 l 5.41,1.77 c -1.08,-18.87 0.22,-45.23 11.97,-66.7 4.67,-8.53 6.93,-17.95 8.32,-28.66 l -64.04,-13.94 c -6.47,-1.41 -10.57,-7.79 -9.16,-14.26 l 2.76,-12.69 c 1.41,-6.47 7.79,-10.57 14.26,-9.16 l 59.27,12.9 c 1.46,-17.73 3.99,-38.46 10.84,-62.2 12.63,-43.76 29.15,-72.31 38.23,-85.85 -10.57,-17.79 -28.44,-58.38 -10,-107.86 -4.77,-16.77 -18.12,-70.12 -10.25,-117.91 -12.78,3.26 -35.97,6.38 -62.48,-3.4 -17.74,-6.55 -23.76,-15.72 -24.96,-23.93 -15.64,-2.56 -30.96,-5.89 -46.09,-10.01 -31.39,-8.57 -61.17,-20.23 -89.38,-34.73 -29.51,17.66 -65.39,25.93 -108.82,24.76 -6.1,0.88 -13.03,1.7 -20.65,2.34 -13.86,1.17 -29.94,1.83 -47.17,1.47 -17.24,-0.39 -35.62,-1.63 -54.13,-5.2 -4.63,-0.95 -9.26,-1.97 -13.9,-3.34 -2.32,-0.71 -4.62,-1.38 -6.94,-2.26 l -1.73,-0.64 -0.99,-0.37 -0.76,-0.34 -3,-1.35 c -3.89,-1.7 -8.32,-3.84 -12.22,-5.84 -3.98,-2.02 -7.81,-4.19 -11.55,-6.36 -0.47,-0.28 -0.89,-0.58 -1.36,-0.86 -2.36,-0.71 -4.73,-1.42 -7.03,-2.22 -2.97,-1.03 -6.21,-2.25 -9.06,-3.38 -2.87,-1.09 -5.93,-2.33 -9.04,-3.62 -6.19,-2.53 -12.2,-5.26 -18.24,-8.11 -24.1,-11.37 -46.47,-25.49 -62.27,-37.1 -7.95,-5.75 -14.25,-10.93 -18.66,-14.52 -4.34,-3.68 -6.81,-5.78 -6.81,-5.78 0,0 2.58,1.46 7.03,3.97 -4.46,-3.73 -8.83,-7.61 -13.25,-11.38 -7.14,-7.16 -14.53,-13.97 -20.83,-21.6 -2.46,-2.64 -4.74,-5.38 -6.96,-8.15 -1.09,-0.78 -2.18,-1.56 -3.27,-2.37 -3,-2.23 -6.12,-4.41 -9.15,-6.8 -5.92,-4.99 -12.14,-9.92 -17.84,-15.64 -5.97,-5.39 -11.33,-11.59 -16.85,-17.51 -2.94,-3.67 -5.93,-7.26 -8.81,-10.9 -3.59,-1.9 -7.19,-3.86 -10.75,-5.99 -7.36,-4.05 -14.49,-8.79 -21.68,-13.31 -6.97,-4.89 -14.04,-9.57 -20.59,-14.75 -6.72,-4.92 -12.92,-10.29 -19.01,-15.32 -5.86,-5.312 -11.65,-10.249 -16.73,-15.39 -5.16,-5.05 -9.97,-9.851 -14.16,-14.539 -4.33,-4.531 -8.08,-8.883 -11.32,-12.801 -3.31,-3.851 -6.13,-7.242 -8.31,-10.171 -4.43,-5.75 -6.97,-9.039 -6.97,-9.039 0,0 2.99,2.871 8.23,7.89 2.56,2.551 5.85,5.481 9.66,8.77 3.74,3.351 8.04,7.039 12.92,10.832 4.75,3.937 10.13,7.898 15.84,12.019 5.63,4.219 11.96,8.149 18.31,12.387 6.57,3.941 13.22,8.162 20.32,11.882 6.59,3.78 13.59,7.06 20.47,10.48 -0.05,-0.09 -0.1,-0.19 -0.15,-0.28 -1.73,-3.15 -3.35,-6.27 -4.68,-9.43 -1.41,-3.11 -2.77,-6.14 -4.09,-9.07 -1.28,-2.93 -2.25,-5.898 -3.32,-8.66 -1.02,-2.789 -2.06,-5.418 -2.92,-7.969 -0.09,-0.312 -0.17,-0.562 -0.25,-0.859 -2.4,-2.742 -4.76,-5.532 -7.16,-8.274 -4.62,-6.129 -9.43,-12.039 -13.43,-18.386 -4.31,-6.114 -7.82,-12.602 -11.38,-18.704 -1.69,-3.109 -3.17,-6.269 -4.7,-9.289 -0.2,-0.41 -0.39,-0.8 -0.59,-1.199 -7.97,-6.058 -16.43,-12.488 -24.89,-18.93 -4.4,-3.339 -8.79,-6.679 -13.12,-9.968 -4.31,-3.301 -8.6,-6.461 -12.85,-9.891 -4.2,-3.422 -8.23,-7.09 -11.5,-11.16 -3.3,-4.121 -5.74,-8.301 -7.13,-12.891 -2.33,-7.82 -1.27,-14.769 0.75,-19.261 -2.25,-1.84 -4.51,-3.68 -6.72,-5.528 -6.43,-5.332 -12.91,-10.859 -18.78,-16.621 -11.83,-11.398 -21.23,-24.672 -25.08,-37.551 -4.06,-12.769 -3.13,-24.179 -0.97,-31.359 1.03,-3.648 2.37,-6.301 3.29,-8.059 1.02,-1.711 1.57,-2.621 1.57,-2.621 0,0 -0.41,0.969 -1.16,2.809 -0.66,1.859 -1.58,4.609 -2.04,8.23 -1.05,7.141 -0.28,17.832 5.07,28.762 5.16,10.988 15.03,21.348 27.43,30.258 6.21,4.519 12.92,8.75 20.05,13.082 2.45,1.5 5,2.949 7.49,4.437 -1.81,-2.679 -3.54,-5.507 -5.34,-8.378 -2.12,-3.969 -4.39,-7.95 -6.18,-12.25 -2.01,-4.168 -3.49,-8.661 -5.09,-12.989 -1.29,-4.492 -2.71,-8.859 -3.54,-13.32 -1.07,-4.379 -1.58,-8.801 -2.18,-12.992 -0.02,-0.188 -0.04,-0.379 -0.05,-0.571 -0.6,-0.769 -1.17,-1.527 -1.78,-2.289 -6.97,-8.609 -14.34,-16.98 -21.61,-24.558 -3.7,-3.711 -7.23,-7.403 -10.77,-10.68 -3.51,-3.332 -6.86,-6.461 -10.06,-9.23 -6.33,-5.641 -11.85,-10.09 -15.76,-13.153 -3.94,-3.047 -6.18,-4.797 -6.18,-4.797 0,0 2.57,1.219 7.07,3.36 4.51,2.148 10.92,5.34 18.43,9.539 3.8,2.051 7.81,4.43 12.06,6.98 4.28,2.508 8.62,5.418 13.2,8.352 5.04,3.367 10.2,7.008 15.36,10.816 0.02,-0.179 0.03,-0.367 0.05,-0.547 -0.75,-2.742 -1.45,-5.429 -2.14,-8.07 -1.56,-1.652 -3.12,-3.293 -4.59,-4.851 -14.72,-15.622 -24.19,-26.301 -24.19,-26.301 0,0 10.22,8.109 25.97,19.929 -0.73,-3.027 -1.41,-5.898 -2,-8.546 -2.37,-10.391 -3.73,-17.332 -3.73,-17.332 0,0 3.67,6.058 9.42,14.929 3.39,5.25 7.59,11.492 12.11,18.02 -0.29,-4.867 -0.39,-9.547 -0.27,-13.84 0.01,-0.219 0.03,-0.399 0.03,-0.609 -7.43,-9.379 -12.64,-15.321 -12.64,-15.321 0,0 1.89,1.281 5.19,3.512 1.88,1.277 4.25,2.93 6.93,4.828 -0.32,-2.148 -0.64,-4.277 -0.88,-6.34 -0.08,-0.648 -0.15,-1.258 -0.23,-1.898 l -11.9,-15.512 c -1.84,-1.699 -3.51,-3.219 -4.89,-4.449 -3.12,-2.77 -4.9,-4.36 -4.9,-4.36 0,0 1.83,0.918 4.93,2.489 l -10.17,-13.258 25.34,20.359 c -0.41,-4.48 -0.71,-8.511 -0.91,-11.949 -6.49,-4.601 -10.63,-7.383 -10.63,-7.383 0,0 3.97,1.192 10.4,3.274 -0.02,-0.461 -0.05,-1 -0.07,-1.434 -0.21,-4.93 -0.33,-7.738 -0.33,-7.738 0,0 0.73,2.711 2.01,7.469 0.2,0.742 0.45,1.613 0.68,2.453 2.14,0.699 4.45,1.457 7,2.328 0.55,0.18 1.16,0.39 1.73,0.59 -4.67,-12.68 -10.22,-24.168 -16.2,-33.641 -7.52,-12.148 -15.81,-20.949 -22.07,-26.57 -3.19,-2.731 -5.76,-4.848 -7.63,-6.141 -1.84,-1.34 -2.82,-2.047 -2.82,-2.047 0,0 1.06,0.578 3.05,1.68 2.04,1.039 4.87,2.82 8.45,5.168 7.02,4.851 16.65,12.742 26.03,24.293 2.85,3.457 5.67,7.25 8.44,11.277 3.76,1.832 8.4,4.11 13.69,6.781 0.32,-1.011 0.63,-1.871 0.92,-2.511 0.54,-1.11 0.83,-1.707 0.83,-1.707 0,0 -0.14,0.636 -0.4,1.847 -0.15,0.731 -0.25,1.75 -0.32,2.891 11.27,5.672 25.22,13.051 39.59,21.148 -3.51,-4.378 -7.16,-8.769 -11,-13.097 -6.4,-7.051 -13.12,-13.891 -19.73,-20.063 -3.35,-3.008 -6.56,-6.019 -9.76,-8.668 -3.17,-2.699 -6.2,-5.23 -9.09,-7.461 -5.71,-4.55 -10.67,-8.121 -14.19,-10.57 -3.53,-2.449 -5.55,-3.84 -5.55,-3.84 0,0 2.31,0.852 6.34,2.332 4.04,1.508 9.8,3.75 16.59,6.789 3.42,1.461 7.06,3.2 10.92,5.071 2.89,1.359 5.85,2.918 8.89,4.519 -2,-1.23 -3.95,-2.422 -5.79,-3.512 -5.88,-3.527 -10.89,-6.328 -14.42,-8.257 -3.53,-1.922 -5.55,-3.02 -5.55,-3.02 0,0 2.24,0.52 6.16,1.438 3.93,0.921 9.54,2.3 16.23,4.16 13.41,3.633 31.16,9.351 48.64,16.281 2.46,0.98 4.9,1.98 7.33,2.988 -0.98,-1.539 -2,-3.058 -3,-4.59 -3.56,-3.41 -7.15,-6.707 -10.7,-9.828 -3.66,-3.07 -7.16,-6.16 -10.64,-8.851 -3.46,-2.739 -6.76,-5.321 -9.9,-7.571 -6.22,-4.609 -11.62,-8.199 -15.45,-10.648 -3.84,-2.449 -6.03,-3.84 -6.03,-3.84 0,0 2.46,0.84 6.78,2.309 4.32,1.492 10.47,3.73 17.73,6.801 2.52,1.011 5.18,2.191 7.91,3.429 -0.11,-0.129 -0.22,-0.277 -0.33,-0.41 -2.7,-3.348 -5.28,-6.519 -7.77,-9.34 -4.91,-5.738 -9.23,-10.347 -12.3,-13.539 -3.08,-3.18 -4.84,-5.012 -4.84,-5.012 0,0 2.15,1.352 5.92,3.704 3.77,2.359 9.12,5.82 15.37,10.269 3.16,2.18 6.49,4.668 10.01,7.328 3.56,2.629 7.14,5.602 10.93,8.621 6.84,5.649 13.9,11.969 20.82,18.551 1.97,1.207 3.95,2.348 5.9,3.609 8.97,5.872 17.75,12.18 25.74,18.469 0.85,0.711 1.68,1.379 2.52,2.063 -1.45,-2.442 -2.92,-4.852 -4.49,-7.102 -2.07,-3.101 -4.08,-6.129 -6.03,-9.051 -1.97,-2.91 -4.1,-5.558 -6.03,-8.187 -1.97,-2.621 -3.86,-5.121 -5.65,-7.5 -1.92,-2.293 -3.74,-4.461 -5.45,-6.5 -3.39,-4.113 -6.42,-7.66 -9.11,-10.383 -5.27,-5.609 -8.28,-8.809 -8.28,-8.809 0,0 3.44,2.75 9.45,7.571 3.08,2.347 6.59,5.437 10.56,9.078 2.01,1.812 4.15,3.73 6.4,5.762 2.15,2.14 4.4,4.39 6.76,6.73 2.32,2.391 4.86,4.777 7.27,7.438 2.4,2.691 4.88,5.461 7.43,8.32 2.61,2.82 5.09,5.871 7.58,9.051 2.49,3.16 5.14,6.34 7.67,9.699 4.85,6.832 10.1,13.812 14.7,21.391 4.95,7.378 9.17,15.351 13.67,23.23 3.04,6.172 6.25,12.32 9.1,18.559 10.91,13.359 20.82,29 30.24,46.39 4.32,4.731 8.75,9.692 13.2,15.18 5.99,7.199 11.9,15.109 17.86,23.43 1.14,1.613 2.25,3.32 3.37,4.961 -0.01,-0.391 -0.03,-0.782 -0.04,-1.18 -0.61,-6.149 -1.01,-12.399 -2.03,-18.449 -0.75,-6.129 -2.08,-12.039 -3.21,-17.852 -1.45,-5.699 -2.66,-11.328 -4.35,-16.5 -1.57,-5.211 -3.13,-10.141 -4.89,-14.578 -1.58,-4.52 -3.28,-8.57 -4.89,-12.133 -1.52,-3.598 -2.91,-6.719 -4.23,-9.199 -2.53,-5.039 -3.98,-7.93 -3.98,-7.93 0,0 1.98,2.563 5.43,7.039 1.79,2.223 3.76,5.032 5.97,8.321 2.29,3.242 4.79,6.972 7.26,11.203 2.64,4.136 5.19,8.808 7.82,13.808 2.76,4.961 5.1,10.442 7.75,16.071 2.32,5.73 4.9,11.648 6.93,17.879 2.31,6.16 4.01,12.601 5.92,19.05 1.52,6.52 3.25,13.051 4.3,19.61 1.34,6.531 2.03,13.05 2.87,19.39 0.28,3.559 0.59,7.051 0.84,10.489 0.87,1.601 1.78,3.191 2.63,4.773 11.85,22.328 22.07,45.309 30.82,66.656 0.49,0.571 0.97,1.153 1.46,1.711 2.63,3.223 5.18,6.531 7.75,9.821 -0.25,-1.469 -0.5,-2.95 -0.79,-4.372 -0.87,-4.609 -1.73,-8.98 -2.66,-12.976 -1.75,-8.031 -3.48,-14.692 -4.75,-19.344 -1.29,-4.656 -2.02,-7.308 -2.02,-7.308 0,0 1.31,2.429 3.6,6.679 2.28,4.27 5.48,10.422 9.01,17.973 1.83,3.75 3.67,7.879 5.59,12.269 1.97,4.379 3.81,9.09 5.81,13.95 2.95,7.5 5.84,15.488 8.56,23.668 1.88,2.703 3.81,5.41 5.64,8.121 7.27,10.859 14.42,21.55 21.35,31.89 6.87,10.3 13.47,20.17 19.94,29.27 6.39,9.18 12.65,17.57 18.55,25.13 0.34,0.42 0.63,0.79 0.96,1.2 -5.3,-13.44 -11.38,-26.58 -16.43,-36.36 -5.23,-10.2 -9.12,-16.86 -9.12,-16.86 0,0 5.78,5.06 14.09,13.19 8.34,8.09 19.04,19.45 29.11,31.55 10.06,12.1 19.47,24.93 26.12,34.91 3.32,4.86 6.18,9.51 7.93,12.24 0.3,0.48 0.55,0.87 0.8,1.28 19.48,5.71 36.83,6.7 50.81,5.79 -18.45,-20.67 -35.77,-43.23 -51.82,-67.85 -28.99,-44.439 -36.1,-121.181 -42.37,-188.888 -3.47,-37.461 -6.75,-72.844 -13.17,-94.992 l -1.45,-4.989 c -17.35,-59.953 -38.94,-134.562 -84.03,-165.972 -8.35,-5.809 -15.94,-10.848 -23.28,-15.731 -38.69,-25.687 -64.25,-42.668 -81.17,-96.078 -17.18,-54.269 -38.92,-83.808 -84.29,-133.539 -42.76,-46.883 -113.97,-53.723 -114.69,-53.781 -7.05,-0.629 -13.22,-4.981 -16.19,-11.41 -0.63,-1.34 -15.29,-33.52 -18.44,-79.032 -2.83,-41.007 4.54,-60.589 6.04,-64.097 2.63,-6.121 8.17,-10.512 14.73,-11.672 1.1,-0.188 27.18,-4.75 54.03,-4.75 5.21,0 10.19,0.172 14.79,0.519 31.69,2.364 56.72,4.231 76.67,36.524 7.22,11.68 17.16,19.707 27.69,28.207 12.96,10.461 27.65,22.332 38,41.851 3.53,6.649 7.09,14.461 11.23,23.508 15.51,33.973 38.96,85.293 89.32,134.942 66.19,65.261 187.29,168.89 249.2,213.23 13.43,9.629 27.6,19.371 41.29,28.789 46.45,31.93 90.63,62.313 119.31,95.442 11.71,-5.27 28.8,-11.27 47.85,-12.532 2.42,-0.16 10.46,-0.949 12.25,-4.32 2.47,-4.668 0.52,-17.437 -7.97,-31.918 -3.72,-6.34 -22.18,-23.691 -38.46,-39 -59.15,-55.59 -104.16,-101.223 -101.16,-140.223 3.48,-45.168 59,-66.007 107.99,-84.386 19.46,-7.301 37.83,-14.203 47.23,-20.723 8.15,-5.648 18.67,-12.18 30.86,-19.738 34.77,-21.551 92.95,-57.621 100.87,-81.942 9.38,-28.82 2.43,-45.578 1.44,-47.75 -5.49,-9.007 -2.46,-19.98 6.32,-25.89 16.44,-11.09 62.74,-45.867 79.18,-73.27 3.61,-6.019 10.09,-9.597 16.95,-9.597 1.11,0 2.23,0.089 3.35,0.277 13.79,2.359 37.86,17.762 40.62,60.461 0.63,9.762 1.74,19.262 2.82,28.441 3.24,27.617 6.31,53.707 -4.12,80.598 -2.25,5.812 -1.83,14.531 -1.38,23.762 1.16,23.75 3.1,63.488 -54.21,74.828 -25.83,5.113 -65,20.84 -99.79,40.051 -43.74,24.171 -57.91,41.082 -59.96,45.98 0.56,2.219 4.37,12.621 29.77,36.699 19.28,18.27 43.64,37.653 65.12,54.762 11,8.75 21.38,17.019 29.69,24.051 15.92,13.468 28.16,28.008 38.95,40.84 18.26,21.699 29.34,34.039 44.9,35.289 0.49,0.039 1,0.058 1.52,0.058 6.71,0 17.22,-2.66 29.74,-6.34 -1.05,-6.55 -3.17,-9.187 -3.71,-9.757 -4.54,-2.313 -7.63,-6.821 -8.07,-11.973 -0.41,-4.731 -3.7,-46.891 4.93,-73.43 2.13,-7.039 10.94,-20.539 46.43,-25.91 -1.42,-5.269 -3.02,-19.18 19.7,-18.758 28.01,0.52 80.68,0.508 99.73,10.367 6.55,3.391 7.27,8.25 4.35,12.68 15.49,1.582 29.15,3.613 40.54,7.793 26.01,9.559 31.47,28.289 31.47,42.32 0,10.5 -3.29,27.231 -23.39,31.168 13.4,0.403 26.95,1.289 40.46,2.692 74.26,7.719 125.26,12.789 156.21,12.789 24.5,0 32.32,-3.141 35.91,-6.469 0.88,-3.391 2.91,-18.25 -7.99,-67.949 -7.79,-35.524 -19.41,-76.723 -28.75,-109.82 l -3.79,-13.481 C 2730.96,381.09 2711.93,321.48 2677.33,298.68 2634.31,270.32 2503.47,194.5 2479.59,186.262 c -28.47,-9.821 -66.11,-31.383 -67.7,-32.301 -4.16,-2.391 -7.3,-6.211 -8.85,-10.742 -3.07,-8.981 -28.7,-88.6292 15.81,-119.5393 C 2440.85,8.41016 2464.26,0 2484.78,0 c 27.4,0 49.4,14.4492 61.96,40.7109 8.94,18.6875 29.13,27.1797 48.66,35.3985 17.01,7.1523 33.08,13.9101 41.7,28.0706 8.2,13.48 76.65,71.519 113.42,102.691 15.11,12.82 29.39,24.93 40.14,34.309 46.42,40.492 55.47,53 74.43,102.91 16.34,43 58.57,147.609 97.65,190.25 28.54,31.129 39.8,68.269 44.24,92.34 32.49,-9.141 95.75,-26.469 159.34,-41.399 89.67,-21.043 158.47,-71.582 164.53,-90.992 l 3.09,-9.859 c 33.83,-107.899 52.34,-170.219 55.02,-185.239 0.54,-3.043 -2.13,-8.742 -4.96,-14.761 -8.06,-17.18 -21.56,-45.918 8.92,-84.418 9.72,-12.274 20.46,-22.352 31.93,-29.961 16.46,-10.91 34.44,-16.68 52,-16.68 15.63,0 30.58,4.688 42.09,13.199 3.95,2.918 6.68,7.211 7.64,12.032 1.55,7.726 14.67,76.738 -1,116.418 -5.11,12.949 -7.87,32.789 -10.53,51.98 -4.5,32.41 -8.38,60.391 -24.06,75.281 -14.43,14.141 -83.27,149.949 -101.38,196.84 -11.7,30.27 -67,61.84 -156.67,110.231 -31.56,17.027 -61.72,33.308 -83.38,47.109 14.83,28.098 41.69,88.519 43.84,161.039 0.7,23.441 0.99,44.141 1.27,64.17 0.82,59.1 1.48,105.78 12.43,168.75 6.65,38.25 11.17,80.11 15.15,117.04 3.96,36.65 7.73,71.65 12.82,95.76 15.05,-2.98 38.89,-10.67 58.75,-30.53 21.23,-21.23 47.3,-31.45 70.31,-40.47 21.79,-8.54 40.61,-15.91 50.27,-30.22 22.91,-33.95 52.69,-52.65 83.83,-52.65 14.56,0 28.84,4.14 42.42,12.29 42.11,25.26 40.71,89.77 39.69,136.87 -0.14,6.46 -0.27,12.56 -0.27,17.98 0,29.03 -21.05,53.06 -47.69,83.5 -22.78,26.01 -51.12,58.38 -75.83,103.89 -29.14,53.68 -55.4,82.96 -74.57,104.34 -16.37,18.26 -27.19,30.33 -32.95,48.67 -5.88,18.75 -17.82,35.06 -33.69,47.65 14.06,29.54 9.79,88.08 9.22,95.08 -0.3,3.68 -2.63,6.89 -6.05,8.31 -3.41,1.42 -7.33,0.84 -10.17,-1.55 -16.2,-13.61 -32.61,-37.88 -44.76,-57.88 0.5,28.26 -5.21,58.53 -6.17,63.4 -0.72,3.63 -3.4,6.56 -6.95,7.58 -3.56,1.05 -7.38,-0.01 -9.93,-2.69 -21.47,-22.64 -40.8,-68.43 -49.06,-87.97 -0.85,-2.04 -1.54,-3.68 -2.08,-4.92 -1.91,-0.68 -3.81,-1.38 -5.69,-2.09 -0.8,0.17 -1.6,0.34 -2.48,0.53 -2.54,0.54 -5.33,1.07 -8.26,1.47 -2.95,0.49 -6.16,0.86 -9.54,1.21 -3.37,0.4 -6.96,0.54 -10.62,0.78 -7.35,0.3 -15.13,0.17 -22.79,-0.38 -7.68,-0.65 -15.22,-1.72 -22.16,-3.09 -3.47,-0.78 -6.79,-1.44 -9.9,-2.31 -3.11,-0.82 -6.02,-1.63 -8.67,-2.51 -5.32,-1.65 -9.62,-3.3 -12.59,-4.52 -2.96,-1.22 -4.65,-1.92 -4.65,-1.92 0,0 1.82,0.1 5.01,0.26 3.17,0.15 7.7,0.27 13.08,0.06 2.69,-0.05 5.59,-0.26 8.64,-0.51 2.03,-0.13 4.15,-0.39 6.3,-0.66 -4.76,-1 -9.55,-2.1 -14.3,-3.39 -7.5,-2.12 -14.83,-4.57 -21.52,-7.17 -3.34,-1.37 -6.55,-2.61 -9.52,-4 -2.99,-1.34 -5.78,-2.62 -8.31,-3.92 -5.08,-2.51 -9.18,-4.81 -12,-6.47 -2.81,-1.66 -4.42,-2.61 -4.42,-2.61 0,0 1.83,0.37 5.02,1.02 3.18,0.64 7.74,1.47 13.22,2.15 2.72,0.39 5.69,0.68 8.81,0.96 3.12,0.32 6.43,0.44 9.81,0.63 6.8,0.25 14,0.17 21.1,-0.24 0.11,-0.01 0.22,-0.02 0.33,-0.03 -3.32,-0.81 -6.64,-1.63 -9.93,-2.57 -8.34,-2.5 -16.47,-5.4 -23.89,-8.47 -3.68,-1.63 -7.24,-3.11 -10.51,-4.75 -3.29,-1.6 -6.37,-3.12 -9.15,-4.67 -1.75,-0.94 -3.36,-1.84 -4.89,-2.72 -3.47,-1.47 -6.89,-2.98 -10.12,-4.53 -3.59,-1.82 -7.07,-3.48 -10.26,-5.28 -3.21,-1.75 -6.22,-3.43 -8.92,-5.1 -5.45,-3.24 -9.81,-6.18 -12.81,-8.28 -2.99,-2.11 -4.7,-3.32 -4.7,-3.32 0,0 1.64,0.54 4.43,1.46 -0.61,-0.4 -1.25,-0.8 -1.84,-1.18 -2.25,-1.46 -4.28,-2.81 -6.13,-4.07 -7.2,-1.87 -13.84,-3.86 -19.36,-5.73 -10.26,-3.43 -16.85,-6.16 -16.85,-6.16 0,0 7.16,0.32 17.77,0.05 2.19,-0.05 4.56,-0.14 7,-0.27 -9.18,-2.81 -17.7,-5.68 -24.72,-8.25 -12.01,-4.37 -19.81,-7.65 -19.81,-7.65 0,0 8.44,0.89 21.05,1.59 7.79,0.46 17.18,0.75 27.13,0.77 -2.41,-1.05 -4.82,-2.04 -7.22,-3.11 -10.48,-4.82 -20.76,-9.96 -30.18,-15.08 -4.68,-2.63 -9.23,-5.09 -13.42,-7.63 -4.22,-2.5 -8.18,-4.87 -11.77,-7.19 -0.08,-0.04 -0.15,-0.09 -0.23,-0.14 -3.99,-1.35 -7.87,-2.89 -11.59,-4.34 -4.45,-2.04 -8.77,-3.83 -12.67,-5.98 -3.93,-2.05 -7.59,-4.03 -10.83,-6.12 -3.31,-1.94 -6.21,-3.91 -8.73,-5.72 -2.55,-1.75 -4.73,-3.31 -6.44,-4.74 -3.44,-2.74 -5.41,-4.31 -5.41,-4.31 0,0 2.28,1.04 6.28,2.85 1.97,0.95 4.44,1.92 7.29,2.97 2.81,1.12 6.01,2.29 9.58,3.33 3.5,1.18 7.38,2.17 11.47,3.15 4.05,1.07 8.47,1.71 12.92,2.54 0.54,0.07 1.1,0.14 1.65,0.22 -3.03,-1.93 -5.66,-3.66 -7.68,-5.03 -3.33,-2.27 -5.23,-3.56 -5.23,-3.56 0,0 2.18,0.74 5.98,2.03 3.8,1.29 9.25,3.05 15.84,4.87 3.93,1.14 8.32,2.26 12.95,3.35 1.54,0.02 3.08,0.03 4.6,0.06 0.57,-0.03 1.13,-0.05 1.7,-0.08 -2.55,-2.32 -4.71,-4.37 -6.34,-5.96 -2.41,-2.38 -3.79,-3.73 -3.79,-3.73 0,0 1.74,0.85 4.77,2.34 3.02,1.47 7.38,3.51 12.67,5.7 0.81,0.35 1.67,0.7 2.52,1.05 0.85,-0.08 1.71,-0.11 2.55,-0.21 3.19,-0.25 6.29,-0.73 9.34,-1.23 -4.87,-2.78 -9.89,-5.69 -14.87,-8.65 -2.99,-1.76 -5.95,-3.54 -8.87,-5.32 -0.12,-0.03 -0.24,-0.06 -0.36,-0.08 -13.08,-3.32 -26.85,-7.35 -40.41,-11.84 -13.53,-4.61 -26.84,-9.69 -39.09,-14.88 -6.09,-2.7 -11.99,-5.19 -17.47,-7.85 -5.5,-2.6 -10.67,-5.08 -15.37,-7.53 -4.73,-2.36 -9,-4.66 -12.75,-6.73 -3.78,-2.04 -7.04,-3.84 -9.69,-5.42 -5.31,-3.08 -8.34,-4.84 -8.34,-4.84 0,0 3.29,1.2 9.05,3.3 2.87,1.08 6.39,2.28 10.44,3.61 4.03,1.38 8.59,2.87 13.61,4.35 4.98,1.57 10.44,3.09 16.21,4.65 5.74,1.62 11.9,3.01 18.2,4.56 12.67,2.89 26.26,5.47 39.86,7.56 6.84,0.99 13.68,1.85 20.42,2.58 -7.01,-4.45 -13.82,-8.93 -20.14,-13.2 -3.28,-0.5 -6.56,-0.98 -9.83,-1.59 -9.4,-1.85 -18.63,-4.14 -27.11,-6.68 -4.22,-1.37 -8.3,-2.58 -12.08,-4 -3.8,-1.36 -7.36,-2.68 -10.59,-4.05 -6.5,-2.6 -11.76,-5.06 -15.39,-6.85 -3.62,-1.79 -5.69,-2.81 -5.69,-2.81 0,0 2.26,0.43 6.22,1.2 3.95,0.75 9.61,1.72 16.41,2.48 3.38,0.45 7.07,0.76 10.95,1.06 3.87,0.35 7.99,0.43 12.2,0.62 0.54,0.01 1.13,-0.01 1.68,0 -13.66,-4.02 -26.47,-8.19 -36.67,-11.82 -14.27,-5.04 -23.6,-8.77 -23.6,-8.77 0,0 9.98,1.34 24.92,2.73 14.94,1.43 34.87,2.65 54.69,2.94 0.5,0.01 1,0.01 1.5,0.01 -5.46,-1.71 -10.96,-3.55 -16.41,-5.48 -10.92,-4 -21.64,-8.38 -31.48,-12.84 -4.89,-2.32 -9.63,-4.47 -14.01,-6.75 -4.41,-2.23 -8.54,-4.35 -12.29,-6.46 -7.54,-4.09 -13.65,-7.76 -17.88,-10.38 -4.21,-2.64 -6.62,-4.14 -6.62,-4.14 0,0 2.67,0.95 7.35,2.6 4.68,1.64 11.39,3.89 19.52,6.21 4.04,1.22 8.46,2.39 13.14,3.58 3.42,0.92 7.07,1.74 10.77,2.57 -2.79,-2.03 -5.14,-3.83 -7.03,-5.32 -0.25,-0.09 -0.51,-0.18 -0.76,-0.27 -4.67,-1.84 -9.19,-3.52 -13.32,-5.49 -4.16,-1.9 -8.04,-3.73 -11.5,-5.69 -3.52,-1.81 -6.63,-3.68 -9.33,-5.4 -2.73,-1.65 -5.07,-3.14 -6.91,-4.52 -3.71,-2.63 -5.83,-4.14 -5.83,-4.14 0,0 2.41,0.96 6.63,2.64 2.07,0.88 4.66,1.77 7.66,2.71 2.96,1.01 6.31,2.07 10.05,2.96 3.67,1.05 7.73,1.88 12.01,2.7 4.25,0.89 8.84,1.43 13.5,2.08 4.72,0.46 9.54,0.98 14.5,1.15 3.99,0.28 8.07,0.29 12.13,0.32 -7.79,-2.75 -15.8,-5.77 -23.74,-9.06 -8.34,-3.53 -16.46,-7.29 -24.1,-11.07 -18.93,-2.54 -37.41,-6.41 -51.04,-10.02 -6.9,-1.77 -12.58,-3.45 -16.54,-4.66 -3.95,-1.22 -6.2,-1.91 -6.2,-1.91 0,0 2.35,0.08 6.48,0.24 4.12,0.14 9.99,0.28 17.02,0.19 5.86,-0.02 12.55,-0.23 19.64,-0.62 -3.85,-2.33 -7.12,-4.4 -9.6,-6.01 -3.6,-2.34 -5.66,-3.68 -5.66,-3.68 0,0 2.32,0.78 6.4,2.15 4.06,1.36 9.9,3.23 16.94,5.21 1.6,0.46 3.28,0.93 5,1.39 4.25,-0.36 8.57,-0.8 12.9,-1.3 -1.72,-0.37 -3.43,-0.66 -5.14,-1.05 -8.55,-2 -16.97,-4.29 -24.95,-6.73 -2.79,-0.18 -5.46,-0.51 -7.9,-1.05 -4.96,-1.06 -8.86,-3.13 -10.88,-5.18 -0.08,-0.08 -0.13,-0.14 -0.21,-0.21 -0.05,-0.03 -0.12,-0.05 -0.17,-0.07 -4.29,-1.61 -8.32,-3.16 -11.99,-4.73 -7.36,-3.03 -13.35,-5.84 -17.5,-7.87 -4.13,-2.03 -6.5,-3.19 -6.5,-3.19 0,0 2.57,0.58 7.06,1.59 4.48,0.99 10.9,2.32 18.64,3.52 3.85,0.67 8.05,1.22 12.48,1.77 4.41,0.61 9.11,0.96 13.93,1.43 4.09,0.32 8.34,0.53 12.61,0.71 4.43,-1.83 8.97,-3.76 13.51,-5.8 3.19,-1.43 6.33,-2.89 9.42,-4.36 -0.48,-0.06 -0.93,-0.12 -1.41,-0.18 -10.54,-1.23 -21.78,-2.54 -33.03,-3.84 -11.33,-1.37 -22.72,-2.94 -33.32,-4.84 -5.31,-0.91 -10.42,-1.98 -15.23,-3.04 -4.82,-1.07 -9.34,-2.22 -13.48,-3.37 -8.28,-2.3 -15.01,-4.66 -19.66,-6.4 -4.6,-1.84 -7.24,-2.89 -7.24,-2.89 0,0 2.79,0.45 7.67,1.24 4.88,0.69 11.86,1.51 20.24,1.94 4.18,0.22 8.71,0.35 13.5,0.35 4.8,-0.01 9.83,-0.08 15.06,-0.34 10.43,-0.44 21.54,-1.36 32.7,-2.47 1.2,-0.12 2.38,-0.24 3.58,-0.37 -4.89,-1.17 -9.67,-2.57 -14.35,-4.13 -0.91,0.1 -1.8,0.22 -2.71,0.3 -5.31,0.44 -10.44,0.64 -15.95,0.68 -4.84,-0.07 -10.43,-0.24 -15.41,-0.61 -5.07,-0.39 -10.01,-0.9 -14.75,-1.51 -9.49,-1.23 -18.18,-2.78 -25.58,-4.21 -14.78,-2.92 -24.51,-5.11 -24.51,-5.11 0,0 10.02,-0.27 24.93,-1.06 7.45,-0.42 16.12,-1.04 25.24,-2.13 4.56,-0.55 9.23,-1.24 13.92,-2.05 4.78,-0.85 9.09,-1.81 14.11,-2.99 2.46,-0.65 5.02,-1.39 7.56,-2.16 -1.22,0.28 -2.43,0.56 -3.67,0.85 -4.77,0.89 -9.63,1.9 -14.65,2.49 -4.97,0.78 -10.08,1.1 -15.12,1.55 -5.08,0.18 -10.11,0.49 -15.07,0.33 -4.94,0.04 -9.8,-0.36 -14.46,-0.63 -4.66,-0.51 -9.13,-0.85 -13.33,-1.58 -3.9,-0.6 -7.55,-1.23 -10.93,-1.98 -10.19,6.69 -19.07,13.35 -26.45,19.34 25.47,9.37 41.99,36.21 45.69,61.28 2.03,13.73 -0.31,24.49 -6.28,30.02 -0.87,9.19 -4.39,32.63 -18.3,44.97 -6.82,6.04 -15.01,8.68 -24.4,7.91 -29.82,-2.51 -64.46,-23.04 -74.52,-29.38 -11.77,3.03 -53.52,13.82 -70.34,18.84 -9.55,2.85 -17.67,7.84 -25.52,12.68 -7.82,4.82 -15.35,9.39 -23.52,11.37 3.22,27.86 6.19,66.4 4.52,105.72 5.15,8.06 10.97,15 19.28,19.06 10.55,5.15 19.95,6.01 30.83,7.01 14.18,1.31 30.26,2.78 50.61,14.62 37.81,22.01 34.08,54.45 33.9,55.82 -0.28,2.16 -1.49,4.1 -3.33,5.28 -0.41,0.26 -0.85,0.47 -1.29,0.65 l 1465.43,319.01 2.27,-11.39 169.74,65.53 -181.9,-4.42 2.68,-13.47\"\n            />\n        </svg>\n    );\n}\n\n","import React from \"react\";\nimport {UnitProps} from \"./Unit\";\n\nexport function Spearman(props: UnitProps) {\n    return (\n        <svg y={-props.size / 2} x={-props.size / 2} width={props.size}\n             height={props.size}\n             viewBox=\"0 0 12650 12000\" className={\"unit\"} transform={\"scale(1 -1)\"}>\n            <path\n                className={props.empire}\n                d=\"M12550 11153 c-36 -12 -231 -79 -435 -149 -1484 -507 -3095 -1124\n-4270 -1637 -1261 -550 -2211 -1053 -2742 -1454 -134 -101 -178 -148 -194\n-205 -50 -185 142 -530 530 -953 56 -60 98 -112 93 -116 -4 -3 -52 -18 -107\n-33 -152 -41 -293 -113 -370 -191 -97 -97 -167 -262 -191 -452 -5 -43 -10 -53\n-26 -53 -54 0 -183 -36 -257 -71 -150 -71 -275 -225 -327 -405 -15 -52 -15\n-53 16 -121 l32 -68 -76 -70 c-42 -38 -1010 -925 -2150 -1970 -1141 -1045\n-2075 -1905 -2075 -1911 -1 -6 88 -61 197 -123 l198 -112 -43 -226 c-23 -125\n-41 -228 -39 -230 2 -2 100 14 217 37 118 23 233 45 257 49 35 7 42 6 41 -8 0\n-9 -15 -92 -33 -186 -18 -93 -29 -171 -25 -173 5 -2 106 6 225 18 118 12 218\n20 220 18 2 -2 -14 -83 -35 -179 -27 -127 -34 -175 -26 -177 7 -2 1006 880\n2220 1959 l2207 1962 89 -43 89 -44 75 11 c194 28 311 144 366 363 12 47 23\n86 24 88 2 2 25 -8 52 -21 71 -37 127 -49 220 -48 97 0 171 19 263 67 188 98\n326 279 367 481 l17 81 96 -83 c337 -290 703 -519 945 -591 71 -21 112 -27\n195 -28 161 -1 209 26 339 189 657 831 1668 2525 2878 4825 358 680 1030 1999\n1021 2004 -2 1 -32 -8 -68 -21z\"/>\n        </svg>\n    );\n}\n\n","import {Producer} from \"../machines/GameBoardMachine\";\nimport {UnitContext} from \"../machines/UnitMachine\";\nimport {units} from \"./Unit\";\nimport {Archer} from \"./Archer\";\nimport {Horseman} from \"./Horseman\";\nimport {Spearman} from \"./Spearman\";\nimport React from \"react\";\n\nexport interface ProductionContext {\n    production: Producer | undefined\n}\n\nexport function Production(props: ProductionContext) {\n    if (!props.production) {\n        return <div className={'production'}/>\n    }\n\n    let unit = props.production.unit.ref.getSnapshot().context\n    let image = (unit: UnitContext) => {\n        switch (unit.type) {\n            case units.Archer:\n                return <Archer empire={unit.empire} size={67}/>\n            case units.Horseman:\n                return <Horseman empire={unit.empire} size={67}/>\n            case units.Spearman:\n                return <Spearman empire={unit.empire} size={67}/>\n        }\n    }\n\n    return (\n        <div className={'production'}>\n            {image(unit)}\n            <div className={'targetTurn'}>{props.production.targetTurn}</div>\n        </div>\n    )\n}\n","import React from \"react\";\nimport {Producer} from \"../machines/GameBoardMachine\";\nimport {Production} from \"./Production\";\n\ninterface statusProps {\n    turn: number,\n    production: Producer | undefined\n}\n\nexport function Status(props: statusProps) {\n    return (\n        <div className={'status'}>\n            <div className={'statusElementContainer'}>\n                <div className={'turn'}><div>Turn</div><div className={'number'}>{props.turn}</div></div>\n                <Production production={props.production}/>\n            </div>\n        </div>\n    );\n}\n","import {ActorRef} from \"xstate\";\n\nexport enum empires {\n    empire1 = 'empire1',\n    empire2 = 'empire2',\n    empire3 = 'empire3',\n    empire4 = 'empire4'\n}\n\nexport type hexCoord = {\n    q: number,\n    r: number,\n    s: number\n}\n\nexport function isInHexCoordArray(array: hexCoord[], coord: hexCoord) {\n    return array.some(neighbour =>\n        neighbour.q === coord.q &&\n        neighbour.r === coord.r &&\n        neighbour.s === coord.s\n    )\n}\n\n\nexport type location = {\n    x: number,\n    y: number\n}\n\nexport interface MachineRef {\n    id: string,\n    ref: ActorRef<any>\n}\n\nexport const dummyRef: MachineRef = {\n    id: '',\n    ref: {} as ActorRef<any>\n}\n","import {assign, createMachine, send, sendParent} from \"xstate\";\nimport {empires, location, MachineRef} from \"../Util\";\nimport {units} from \"../components/Unit\";\nimport {pure} from \"xstate/es/actions\";\n\nexport interface initialEmpireContext {\n    id: string,\n    empire: empires,\n    gameBoard: MachineRef,\n}\n\nexport type MoveUnitType = {\n    id: string,\n    type: units\n}\n\nexport interface EmpireContext extends initialEmpireContext {\n    moves: {\n        production: boolean,\n        units: MoveUnitType[]\n    }\n}\n\nexport type EmpireTurnEvent =\n    { type: 'RES_TURN', turn: number }\n\nexport type EmpireMoveEvent = { type: 'MOVES', moves: { production: boolean, units: MoveUnitType[] } }\n\nexport enum moveType {\n    attack,\n    move\n}\n\nexport type EmpireUnitMoveEvent =\n    { type: 'POSSIBLE_MOVES', moves: { type: moveType, location: location }[] }\n\nexport type EmpireEvents =\n    | EmpireTurnEvent\n    | EmpireMoveEvent\n    | EmpireUnitMoveEvent\n    | { type: 'TURN' }\n    | { type: 'REGISTERED' }\n    | { type: 'EXISTS_NOT' }\n    | { type: 'OCC_ALLY' }\n    | { type: 'OCC_NOT' }\n    | { type: 'OCC_ENEMY' }\n    | { type: 'OUT_OF_RANGE' }\n    | { type: 'EXECUTED' }\n    | { type: 'PROD_IN_PROGRESS' }\n    | { type: 'YES' }\n    | { type: 'NO' }\n\n// @ts-ignore\nexport const createEmpireMachine = (initialContext: initialEmpireContext) => createMachine<EmpireContext, EmpireEvents>({\n    id: 'empire',\n    context: {\n        ...initialContext,\n        moves: {} as {\n            production: boolean,\n            units: []\n        }\n    },\n    initial: 'settingUp',\n    states: {\n        settingUp: {\n            entry: 'registerAtGameBoard',\n            on: {\n                REGISTERED: {\n                    target: 'waiting',\n                    actions: sendParent('EMPIRE_READY')\n                }\n            },\n        },\n        turn: {\n            initial: 'entry',\n            states: {\n                entry: {\n                    after: {\n                        1000: 'fetchMoves'\n                    }\n                },\n                fetchMoves: {\n                    entry: send(context => ({\n                            type: 'GET_MOVES',\n                            empire: context.empire\n                        }), {\n                            to: context => context.gameBoard.ref\n                        }\n                    ),\n                    on: {\n                        MOVES: {\n                            target: 'verifyMoves',\n                            actions: assign({\n                                moves: (_c, event) => event.moves\n                            })\n                        }\n                    }\n                },\n                verifyMoves: {\n                    always: [\n                        {\n                            cond: 'movesLeft',\n                            target: 'produce'\n                        },\n                        {\n                            target: 'final'\n                        }\n                    ]\n                },\n                produce: {\n                    always: [\n                        {\n                            cond: context => context.moves.production,\n                            actions: 'startProduction',\n                            target: 'unit'\n                        },\n                        {\n                            target: 'unit'\n                        }\n                    ]\n                },\n                unit: {\n                    initial: 'checkIfMovesLeft',\n                    states: {\n                        checkIfMovesLeft: {\n                            always: [\n                                {\n                                    cond: context => context.moves.units.length > 0,\n                                    target: 'executeMove'\n                                },\n                                {\n                                    target: 'final'\n                                }\n                            ]\n                        },\n                        executeMove: {\n                            entry: send(context => ({\n                                type: 'REQ_MOVES_FOR_UNIT',\n                                id: context.moves.units[0].id,\n                            }), {\n                                to: context => context.gameBoard.ref\n                            }),\n                            on: {\n                                POSSIBLE_MOVES: {\n                                    target: 'final',\n                                    actions: send((context: EmpireContext, event: EmpireUnitMoveEvent) => {\n                                            let attackMoves = event.moves.filter((move) => move.type === moveType.attack)\n                                            let randomMove;\n                                            if (attackMoves.length > 0) {\n                                                randomMove = attackMoves[Math.floor(Math.random() * attackMoves.length)]\n                                            } else if (event.moves.length > 0) {\n                                                randomMove = event.moves[Math.floor(Math.random() * event.moves.length)]\n                                            }\n\n\n                                            let type;\n                                            // @ts-ignore\n                                            switch (randomMove.type) {\n                                                case moveType.attack:\n                                                    type = 'ATTACK';\n                                                    break;\n                                                case moveType.move:\n                                                    type = 'MOVE'\n                                            }\n\n                                            return {\n                                                type: type,\n                                                id: context.moves.units[0].id,\n                                                // @ts-ignore\n                                                x: randomMove.location.x,\n                                                // @ts-ignore\n                                                y: randomMove.location.y\n                                            }\n                                        },\n                                        {\n                                            to: context => context.gameBoard.ref\n                                        }),\n                                },\n                            }\n                        },\n                        final: {\n                            type: 'final'\n                        }\n                    },\n                    onDone: 'fetchMoves'\n                },\n                final: {\n                    type: 'final'\n                }\n            },\n            onDone: {\n                target: 'waiting',\n                actions: sendParent('EMPIRE_DONE')\n            }\n        },\n        waiting: {\n            on: {\n                TURN: 'turn'\n            }\n        },\n        defeated: {\n            type: 'final'\n        },\n        victorious: {\n            type: 'final'\n        }\n    }\n}, {\n    actions: {\n        // @ts-ignore\n        controlUnits: pure((context, event) => {\n            let actions = [];\n            for (let unitId of context.moves.units) {\n                actions.push(send(\n                    context => ({\n                        type: 'REQ_MOVES_FOR_UNIT',\n                        id: unitId,\n                    }), {\n                        to: (context: EmpireContext) => context.gameBoard.ref\n                    }))\n            }\n            return actions;\n        }),\n        registerAtGameBoard: send((context) => ({\n                type: 'REGISTER',\n                empire: context.empire\n            }),\n            {\n                to: context => context.gameBoard.ref\n            }\n        ),\n        startProduction: send(\n            () => {\n                let producable = [units.Archer, units.Horseman, units.Spearman]\n                return {\n                    type: 'PRODUCE', unit: producable[Math.floor(Math.random() * producable.length)]\n                }\n            }, {\n                to: context => context.gameBoard.ref\n            })\n\n    },\n    guards: {\n        movesLeft: (context) => context.moves.units.length > 0 || context.moves.production,\n    }\n});\n","import {assign, createMachine, sendParent} from \"xstate\";\nimport {empires} from \"../Util\";\nimport {units} from \"../components/Unit\";\n\nexport interface InitialUnitContext {\n    type: units,\n    maxHealth: number,\n    health: number,\n    attack: number,\n    effective: units[],\n    ineffective: units[],\n    moveRange: number,\n    attackRange: number,\n    movable: boolean,\n    productionTime: number\n}\n\nexport interface UnitContext extends InitialUnitContext {\n    id: string,\n    empire: empires\n}\n\nexport const spearmanContext: InitialUnitContext = {\n    type: units.Spearman,\n    maxHealth: 100,\n    health: 100,\n    attack: 30,\n    effective: [units.Horseman],\n    ineffective: [units.Archer],\n    moveRange: 2,\n    attackRange: 1,\n    productionTime: 2,\n    movable: false\n}\n\nexport const archerContext: InitialUnitContext = {\n    type: units.Archer,\n    maxHealth: 100,\n    health: 100,\n    attack: 30,\n    effective: [units.Spearman],\n    ineffective: [units.Horseman],\n    moveRange: 2,\n    attackRange: 3,\n    productionTime: 3,\n    movable: false\n}\n\nexport const horsemanContext: InitialUnitContext = {\n    type: units.Horseman,\n    maxHealth: 100,\n    health: 100,\n    attack: 30,\n    effective: [units.Archer],\n    ineffective: [units.Spearman],\n    moveRange: 3,\n    attackRange: 1,\n    productionTime: 2,\n    movable: false\n}\n\nexport const baseContext: InitialUnitContext = {\n    type: units.Base,\n    maxHealth: 250,\n    health: 250,\n    attack: 40,\n    effective: [],\n    ineffective: [],\n    moveRange: 0,\n    attackRange: 1,\n    productionTime: 0,\n    movable: false\n}\n\ntype DamageEvent =\n    {\n        type: 'DAMAGE',\n        damage: number\n    };\n\nexport type UnitEvents =\n    DamageEvent |\n    {\n        type: 'MOVABLE'\n    }\n\nexport const createUnitMachine = (initialContext: UnitContext) => createMachine<UnitContext, UnitEvents>({\n        id: 'unit',\n        initial: 'idle',\n        context: {\n            ...initialContext\n        },\n        // @ts-ignore\n        on: {\n            MOVABLE: {\n                actions: assign({\n                    movable: true\n                })\n            },\n            NOT_MOVABLE: {\n                actions: assign({\n                    movable: false\n                })\n            },\n        },\n        states: {\n            idle: {\n                on: {\n                    DAMAGE: 'inAction'\n                }\n            },\n            inAction: {\n                entry: assign({\n                    health: (context, event: DamageEvent) => event.damage < context.health ? context.health -= event.damage : 0\n                }),\n                always: [\n                    {\n                        cond: 'isDead',\n                        target: 'dead'\n                    },\n                    {\n                        target: 'idle'\n                    }\n                ]\n            },\n            dead: {\n                entry: sendParent((context) => ({\n                        type: 'DEAD',\n                        id: context.id,\n                        unitType: context.type,\n                        unitEmpire: context.empire\n                    })\n                ),\n                type: 'final'\n            }\n        }\n    },\n    {\n        guards: {\n            isDead: (context: UnitContext) => context.health <= 0\n        }\n    });\n","import {Action, assign, Event, EventObject, MachineConfig, send, SendExpr, StatesConfig} from \"xstate\";\nimport {UserEmpireContext, UserEmpireEvents} from \"./machines/UserEmpireMachine\";\n\nconst rasaurl = process.env.REACT_APP_RASA_SERVER!;\nexport const nluRequest = (text: string) =>\n    fetch(new Request(rasaurl, {\n        method: 'POST',\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nexport type rasa_response_entity = {\n    entity: string,\n    start: number,\n    end: number,\n    value: string,\n    extractor: string,\n    role: string\n}\n\nconst machineAnswers: { [index: string]: Array<string> } = {\n    \"CR\": [\n        \"Sorry, could you please repeat that?\",\n        \"I didn't catch that?\",\n        \"What did you say?\",\n        \"Come again?\",\n        \"Sorry?\",\n        \"Huh?\"\n    ]\n}\n\nexport function say(text: (context: UserEmpireContext, event: UserEmpireEvents) => string): Action<UserEmpireContext, any> {\n    return send((context: UserEmpireContext, event: UserEmpireEvents) => ({\n            type: \"SPEAK\",\n            value: text(context, event)\n        }), {\n            to: context => context.speechRecognitionMachine.ref\n        }\n    )\n}\n\nexport function sendToSRM(event: Event<EventObject> | SendExpr<UserEmpireContext, UserEmpireEvents, EventObject>) {\n    return send(event, {\n        to: (context: UserEmpireContext) => context.speechRecognitionMachine.ref\n    })\n}\n\nexport function getPrompts(prompt: ((context: UserEmpireContext) => string)[]): StatesConfig<UserEmpireContext, any, UserEmpireEvents> {\n    let state: StatesConfig<UserEmpireContext, any, UserEmpireEvents> = {\n        hist: {\n            type: 'history'\n        },\n        nomatch: {\n            entry: say(() => machineAnswers[\"CR\"][Math.random() * machineAnswers[\"CR\"].length | 0]),\n            on: {ENDSPEECH: 'ask0'}\n        },\n        final: {\n            type: 'final'\n        }\n    };\n\n    for (let number in prompt) {\n        state = {\n            ...state,\n            ['prompt' + number]: {\n                entry: say(prompt[number]),\n                on: {\n                    ENDSPEECH: {\n                        target: 'ask' + number,\n                    }\n\n                }\n            },\n            ['ask' + number]: {\n                entry: sendToSRM('LISTEN'),\n                on: {\n                    REPROMPT: {\n                        target: parseInt(number) + 1 < prompt.length ? 'prompt' + (parseInt(number) + 1) : 'prompt0'\n                    }\n                }\n            }\n        }\n    }\n    return state;\n}\n\nexport function formFillingPromptMachine(prompt: ((context: UserEmpireContext) => string)[],\n                                         condition: (context: UserEmpireContext) => boolean,\n                                         target: string,\n                                         parserId: string): MachineConfig<UserEmpireContext, any, UserEmpireEvents> {\n    return {\n        initial: 'init',\n        states: {\n            ...getPrompts(prompt),\n            init: {\n                always: [\n                    {\n                        target: 'final',\n                        cond: condition\n                    },\n                    {\n                        target: 'prompt0'\n                    }\n                ]\n            }\n        },\n        on: {\n            RECOGNISED: {\n                target: `#${parserId}`,\n                actions: assign({\n                    recResult: (_c, event) => event.value\n                })\n            },\n            TIMEOUT: {\n                target: '.hist',\n                actions: send('REPROMPT')\n            }\n        },\n        onDone: target\n    }\n}\n\nconst binaryGrammar = {\n    \"Yes\": [\"Yes.\", \"Of course.\", \"Sure.\", \"Yeah.\", \"Yes please.\", \"Yep.\", \"OK.\", \"Yes, thank you.\"],\n    \"No\": [\"No.\", \"Nope.\", \"No no.\", \"Don't.\", \"Don't do it.\", \"No way.\", \"Not at all.\"]\n};\n\nexport function binaryPromptMachine(prompt: ((context: UserEmpireContext) => string)[]): MachineConfig<UserEmpireContext, any, UserEmpireEvents> {\n    return {\n        ...abstractPromptMachine(prompt),\n        on: {\n            RECOGNISED: [\n                {\n                    actions: send('YES'),\n                    cond: (_, event) => binaryGrammar[\"Yes\"].includes(event.value.utterance)\n                },\n                {\n                    actions: send('NO'),\n                    cond: (_, event) => binaryGrammar[\"No\"].includes(event.value.utterance)\n                },\n                {\n                    target: '.nomatch'\n                }\n            ],\n            TIMEOUT: {\n                target: '.hist',\n                actions: send('REPROMPT')\n            }\n        }\n    };\n}\n\n\nexport function abstractPromptMachine(prompt: ((context: UserEmpireContext) => string)[]): MachineConfig<UserEmpireContext, any, UserEmpireEvents> {\n    return {\n        initial: 'prompt0',\n        states: {\n            ...getPrompts(prompt)\n        }\n    }\n}\n","import {assign, createMachine, send, sendParent, StatesConfig} from \"xstate\";\nimport {MachineRef} from \"../Util\";\nimport {EmpireContext, EmpireEvents, EmpireUnitMoveEvent, initialEmpireContext, moveType} from \"./EmpireMachine\";\nimport {getUnitByString, units} from \"../components/Unit\";\nimport {archerContext, horsemanContext, spearmanContext} from \"./UnitMachine\";\nimport {\n    abstractPromptMachine,\n    binaryPromptMachine,\n    formFillingPromptMachine,\n    nluRequest,\n    rasa_response_entity,\n    say,\n    sendToSRM\n} from \"../DialogueUtil\";\n\n\ntype commandTranslatorType = {\n    utterance: {\n        sourceUnit: string,\n        target: string\n        unitType: string\n    },\n    translated: {\n        unitType: units | undefined\n        id: string,\n        x: number,\n        y: number\n    }\n}\n\ntype commandProposal = {\n    type: moveType,\n    id: string,\n    x: number,\n    y: number\n}\n\nexport interface UserEmpireContext extends EmpireContext {\n    speechRecognitionMachine: MachineRef\n    recResult: Hypothesis,\n    errorMessage: string,\n    commandTranslator: commandTranslatorType\n    proposedCommand: commandProposal | undefined\n}\n\nexport type UserEmpireEvents =\n    | EmpireEvents\n    | { type: 'TTS_READY' }\n    | { type: 'RECOGNISED', value: Hypothesis }\n    | { type: 'TIMEOUT' }\n    | { type: 'ENDSPEECH' }\n    | { type: 'REPROMPT' }\n\nexport const createUserEmpireMachine = (empireContext: initialEmpireContext, srm: MachineRef) => createMachine<UserEmpireContext, UserEmpireEvents>({\n        id: 'userEmpire',\n        context: {\n            ...empireContext,\n            speechRecognitionMachine: srm,\n            recResult: {} as Hypothesis,\n            errorMessage: '',\n            commandTranslator: {} as commandTranslatorType,\n            moves: {\n                production: false,\n                units: []\n            },\n            proposedCommand: undefined\n        },\n        initial: 'settingUp',\n        states: {\n            settingUp: {\n                initial: 'registerAtGameBoard',\n                states: {\n                    registerAtGameBoard: {\n                        entry: 'registerAtGameBoard',\n                        on: {\n                            REGISTERED: 'registerAtSRM'\n                        }\n                    },\n                    registerAtSRM: {\n                        entry: 'registerAtSRM',\n                        on: {\n                            REGISTERED: 'final'\n                        }\n                    },\n                    final: {\n                        entry: sendParent('EMPIRE_READY'),\n                        type: 'final'\n                    }\n                },\n                onDone: 'waiting'\n            },\n            turn: {\n                initial: 'startUtterance',\n                states: {\n                    startUtterance: {\n                        entry: say(() => 'It is our turn now.'),\n                        on: {\n                            ENDSPEECH: 'fetchMoves'\n                        }\n                    },\n                    fetchMoves: {\n                        entry: send(context => ({\n                                type: 'GET_MOVES',\n                                empire: context.empire\n                            }), {\n                                to: context => context.gameBoard.ref\n                            }\n                        ),\n                        on: {\n                            MOVES: {\n                                target: 'verifyMoves',\n                                actions: assign({\n                                    moves: (_c, event) => event.moves\n                                })\n                            }\n                        }\n                    },\n                    verifyMoves: {\n                        always: [\n                            {\n                                cond: 'movesLeft',\n                                target: 'getCommand'\n                            },\n                            {\n                                target: 'final'\n                            }\n                        ]\n                    },\n                    getCommand: {\n                        ...abstractPromptMachine([\n                            () => 'What shall we do?',\n                            (context) => {\n                                let utterances = [];\n                                for (let unit of context.moves.units) {\n                                    utterances.push(`We could move the ${unit.type}`)\n                                }\n                                context.moves.production && utterances.push('We could train a unit.')\n                                return utterances[Math.floor(Math.random() * utterances.length)]\n                            }\n                        ]),\n                        on: {\n                            RECOGNISED: {\n                                target: 'parseCommand',\n                                actions: assign({\n                                    recResult: (_c, event) => event.value\n                                })\n                            },\n                            TIMEOUT: {\n                                target: '.hist',\n                                actions: send('REPROMPT')\n                            }\n                        }\n                    },\n                    parseCommand: {\n                        invoke: {\n                            src: context => nluRequest(context.recResult.utterance),\n                            onDone: [\n                                {\n                                    cond: (_, event) => event.data['intent']['name'] === 'move',\n                                    target: 'move'\n                                },\n                                {\n                                    cond: (_, event) => event.data['intent']['name'] === 'attack',\n                                    target: 'attack'\n                                },\n                                {\n                                    cond: (_, event) => event.data['intent']['name'] === 'produce',\n                                    target: 'produce'\n                                },\n                                {\n                                    cond: (_, event) => event.data['intent']['name'] === 'skip_round',\n                                    target: 'skip'\n                                },\n                                {\n                                    cond: (_, event) => event.data['intent']['name'] === 'request_turn',\n                                    target: 'request_turn'\n                                },\n                                {\n                                    cond: (_, event) => event.data['intent']['name'] === 'request_unit_move_range',\n                                    target: 'request_unit_move_range'\n                                },\n                                {\n                                    cond: (_, event) => event.data['intent']['name'] === 'request_moves',\n                                    target: 'request_moves'\n                                },\n                                {\n                                    cond: (_, event) => event.data['intent']['name'] === 'approve',\n                                    target: 'approve'\n                                },\n                                {\n                                    target: 'getCommand.nomatch'\n                                }\n                            ],\n                            onError: 'getCommand.hist'\n\n                        }\n                    },\n                    move: {\n                        initial: 'parseUtterance',\n                        entry: 'resetCommandTranslator',\n                        states: {\n                            ...motionStateNode(\n                                'move',\n                                [\n                                    () => 'Which unit should move?',\n                                    () => 'Who should move?'\n                                ],\n                                [\n                                    () => 'Where do you want to move it?',\n                                    () => 'What is the target?'\n                                ],\n                                \"I am not sure, who should move.\",\n                                \"I couldn't find the field. Could you repeat it?\"\n                            ),\n                            execute: {\n                                entry: send(\n                                    context => ({\n                                        type: 'MOVE',\n                                        id: context.commandTranslator.translated.id,\n                                        x: context.commandTranslator.translated.x,\n                                        y: context.commandTranslator.translated.y\n                                    }), {\n                                        to: context => context.gameBoard.ref\n                                    }),\n                                on: {\n                                    OCC_ALLY: {\n                                        target: 'final',\n                                        actions: say(() => \"There is one of ours, sire\")\n                                    },\n                                    OCC_ENEMY: {\n                                        target: 'final',\n                                        actions: say(() => \"The enemy is already there, milord.\")\n                                    },\n                                    OUT_OF_RANGE: {\n                                        target: 'final',\n                                        actions: say(() => \"We can't move so far.\")\n                                    },\n                                    EXECUTED: {\n                                        target: 'final',\n                                        actions: say((context) => `Ok, moving it to ${context.commandTranslator.utterance.target}`)\n                                    }\n                                }\n                            }\n                        },\n                        onDone: 'fetchMoves'\n                    },\n                    attack: {\n                        initial: 'parseUtterance',\n                        entry: 'resetCommandTranslator',\n                        states: {\n                            ...motionStateNode(\n                                'attack',\n                                [() => 'Which unit should attack?'],\n                                [() => 'Who should be attacked?'],\n                                \"I am not sure who should attack?\",\n                                \"I couldn't find the field. Could you repeat it?\"\n                            ),\n                            execute: {\n                                entry: send(\n                                    context => ({\n                                        type: 'ATTACK',\n                                        id: context.commandTranslator.translated.id,\n                                        x: context.commandTranslator.translated.x,\n                                        y: context.commandTranslator.translated.y,\n                                    }), {\n                                        to: context => context.gameBoard.ref\n                                    }),\n                                on: {\n                                    OCC_ALLY: {\n                                        target: 'final',\n                                        actions: say(() => \"My lord, we should not attack ourselves.\")\n                                    },\n                                    OCC_NOT: {\n                                        target: 'final',\n                                        actions: say(() => \"But there is noone!\")\n                                    },\n                                    OUT_OF_RANGE: {\n                                        target: 'final',\n                                        actions: say(() => \"They are too far away, my liege!\")\n                                    },\n                                    EXECUTED: {\n                                        target: 'final',\n                                        actions: say(() => `We will attack the unit`)\n                                    }\n                                }\n                            }\n                        },\n                        onDone: 'fetchMoves'\n                    },\n                    produce: {\n                        initial: 'parseUtterance',\n                        entry: 'resetCommandTranslator',\n                        states: {\n                            fetchInformation: {\n                                initial: 'getUnitType',\n                                states: {\n                                    hist: {\n                                        type: 'history'\n                                    },\n                                    getUnitType: {\n                                        ...formFillingPromptMachine(\n                                            [\n                                                () => 'Which unit do you want to train?',\n                                                () => 'Which unit?'\n                                            ],\n                                            (context) => context.commandTranslator.utterance.unitType !== '',\n                                            'final',\n                                            'produce~parseUtterance')\n                                    },\n                                    final: {\n                                        type: 'final'\n                                    }\n                                },\n                                onDone: 'translateUnitType'\n                            },\n                            parseUtterance: {\n                                id: 'produce~parseUtterance',\n                                invoke: {\n                                    src: context => nluRequest(context.recResult.utterance),\n                                    onDone: [\n                                        {\n                                            cond: (context, event) => event.data['intent']['name'] === 'exit_question',\n                                            target: 'final'\n                                        },\n                                        {\n                                            actions: assign({\n                                                commandTranslator: (context, event) => {\n                                                    let unit: rasa_response_entity = event.data['entities'].find((element: rasa_response_entity) => element.entity === 'unit')\n\n                                                    return {\n                                                        utterance: {\n                                                            ...context.commandTranslator.utterance,\n                                                            unitType: unit && unit.value ? unit.value : context.commandTranslator.utterance.unitType,\n                                                        },\n                                                        translated: {\n                                                            ...context.commandTranslator.translated\n                                                        }\n                                                    }\n                                                }\n                                            }),\n                                            target: 'fetchInformation.hist'\n                                        }\n                                    ],\n                                    onError: 'fetchInformation.hist'\n                                }\n                            },\n                            translateUnitType: {\n                                always: [\n                                    {\n                                        cond: 'validateUnitType',\n                                        actions: 'translateUnitType',\n                                        target: 'executeProduction'\n                                    },\n                                    {\n                                        actions: assign(context => ({\n                                            commandTranslator: {\n                                                ...context.commandTranslator,\n                                                utterance: {\n                                                    ...context.commandTranslator.utterance,\n                                                    unitType: ''\n                                                }\n                                            },\n                                            errorMessage: \"I did not understand, who you want to train?\"\n                                        })),\n                                        target: 'errorMessage',\n                                    }\n                                ]\n                            },\n                            executeProduction: {\n                                entry: [\n                                    send(context => ({\n                                        type: 'PRODUCE',\n                                        unit: context.commandTranslator.translated.unitType\n                                    }), {\n                                        to: context => context.gameBoard.ref\n                                    })],\n                                on: {\n                                    PROD_IN_PROGRESS: {\n                                        target: 'final',\n                                        actions: say(() => \"We already produce a unit\")\n                                    },\n                                    EXECUTED: {\n                                        target: 'final',\n                                        actions: say((context) => `The ${context.commandTranslator.utterance.unitType} will soon be ready!`)\n                                    }\n                                }\n                            },\n                            errorMessage: {\n                                ...abstractPromptMachine([(context) => context.errorMessage]),\n                                on: {\n                                    RECOGNISED: {\n                                        target: 'parseUtterance',\n                                        actions: assign({\n                                            recResult: (_c, event) => event.value\n                                        })\n                                    },\n                                    TIMEOUT: {\n                                        target: '.hist',\n                                        actions: send('REPROMPT')\n                                    }\n                                }\n                            },\n                            final: {\n                                type: 'final'\n                            }\n                        },\n                        onDone: 'fetchMoves',\n                    },\n                    request_turn: {\n                        entry: send('REQ_TURN', {\n                            to: context => context.gameBoard.ref\n                        }),\n                        on: {\n                            RES_TURN: {\n                                target: 'fetchMoves',\n                                // @ts-ignore\n                                actions: say((_, event) => `It is the turn ${event.turn}`)\n                            }\n                        }\n                    },\n                    request_moves: {\n                        initial: 'parseUtterance',\n                        entry: 'resetCommandTranslator',\n                        states: {\n                            fetchInformation: {\n                                initial: 'getSourceUnit',\n                                states: {\n                                    hist: {\n                                        type: 'history'\n                                    },\n                                    getSourceUnit: {\n                                        ...formFillingPromptMachine(\n                                            [\n                                                () => 'Which unit do you mean?',\n                                                () => 'What is the unit?'\n                                            ],\n                                            (context) => context.commandTranslator.utterance.sourceUnit !== '',\n                                            'final',\n                                            `req_move~parseUtterance`)\n                                    },\n                                    final: {\n                                        type: 'final'\n                                    }\n                                },\n                                onDone: 'translateSourceUnit'\n                            },\n                            parseUtterance: {\n                                id: `req_move~parseUtterance`,\n                                invoke: {\n                                    src: context => nluRequest(context.recResult.utterance),\n                                    onDone: [\n                                        {\n                                            cond: (context, event) => event.data['intent']['name'] === 'exit_question',\n                                            target: 'final'\n                                        },\n                                        {\n                                            actions: assign({\n                                                commandTranslator: (context, event) => {\n                                                    let unit: rasa_response_entity = event.data['entities'].find((element: rasa_response_entity) => element.entity === 'unit')\n\n                                                    return {\n                                                        utterance: {\n                                                            ...context.commandTranslator.utterance,\n                                                            sourceUnit: unit && unit.value ? unit.value.toLowerCase() : context.commandTranslator.utterance.sourceUnit,\n                                                        },\n                                                        translated: {\n                                                            ...context.commandTranslator.translated\n                                                        }\n                                                    }\n                                                }\n                                            }),\n                                            target: 'fetchInformation.hist'\n                                        }\n                                    ],\n                                    onError: 'fetchInformation.hist'\n                                }\n                            },\n                            translateSourceUnit: {\n                                always: [\n                                    {\n                                        cond: 'validateSourceUnit',\n                                        actions: 'translateSourceUnit',\n                                        target: 'execute'\n                                    },\n                                    {\n                                        actions: assign(context => ({\n                                            commandTranslator: {\n                                                ...context.commandTranslator,\n                                                utterance: {\n                                                    ...context.commandTranslator.utterance,\n                                                    sourceUnit: ''\n                                                }\n                                            },\n                                            errorMessage: \"I couldn't find this unit. Which do you mean?\"\n                                        })),\n                                        target: 'errorMessage',\n                                    }\n                                ]\n                            },\n                            execute: {\n                                entry: send(\n                                    context => ({\n                                        type: 'REQ_MOVES_FOR_UNIT',\n                                        id: context.commandTranslator.translated.id,\n                                    }), {\n                                        to: context => context.gameBoard.ref\n                                    }),\n                                on: {\n                                    POSSIBLE_MOVES: {\n                                        target: 'final',\n                                        actions: [\n                                            'storeProposedCommand',\n                                            'proposeCommand'\n                                        ]\n                                    },\n                                }\n                            },\n                            errorMessage: {\n                                ...abstractPromptMachine([(context) => context.errorMessage]),\n                                on: {\n                                    RECOGNISED: {\n                                        target: 'parseUtterance',\n                                        actions: assign({\n                                            recResult: (_c, event) => event.value\n                                        })\n                                    },\n                                    TIMEOUT: {\n                                        target: '.hist',\n                                        actions: send('REPROMPT')\n                                    }\n                                }\n                            },\n                            final: {\n                                type: 'final'\n                            }\n                        },\n                        onDone: 'fetchMoves'\n                    },\n                    request_unit_move_range: {\n                        initial: 'parseUtterance',\n                        entry: 'resetCommandTranslator',\n                        states: {\n                            fetchInformation: {\n                                initial: 'getUnitType',\n                                states: {\n                                    hist: {\n                                        type: 'history'\n                                    },\n                                    getUnitType: {\n                                        ...formFillingPromptMachine(\n                                            [() => 'Which unit do you mean?'],\n                                            (context) => context.commandTranslator.utterance.unitType !== '',\n                                            'final',\n                                            'unit-range~parseUtterance')\n                                    },\n                                    final: {\n                                        type: 'final'\n                                    }\n                                },\n                                onDone: 'translateUnitType'\n                            },\n                            parseUtterance: {\n                                id: 'unit-range~parseUtterance',\n                                invoke: {\n                                    src: context => nluRequest(context.recResult.utterance),\n                                    onDone: [\n                                        {\n                                            cond: (context, event) => event.data['intent']['name'] === 'exit_question',\n                                            target: 'final'\n                                        },\n                                        {\n                                            actions: assign({\n                                                commandTranslator: (context, event) => {\n                                                    let unit: rasa_response_entity = event.data['entities'].find((element: rasa_response_entity) => element.entity === 'unit')\n\n                                                    return {\n                                                        utterance: {\n                                                            ...context.commandTranslator.utterance,\n                                                            unitType: unit && unit.value ? unit.value : context.commandTranslator.utterance.unitType,\n                                                        },\n                                                        translated: {\n                                                            ...context.commandTranslator.translated\n                                                        }\n                                                    }\n                                                }\n                                            }),\n                                            target: 'fetchInformation.hist'\n                                        }\n                                    ],\n                                    onError: 'fetchInformation.hist'\n                                }\n                            },\n                            translateUnitType: {\n                                always: [\n                                    {\n                                        cond: 'validateUnitType',\n                                        actions: 'translateUnitType',\n                                        target: 'sayDistance'\n                                    },\n                                    {\n                                        actions: assign(context => ({\n                                            commandTranslator: {\n                                                ...context.commandTranslator,\n                                                utterance: {\n                                                    ...context.commandTranslator.utterance,\n                                                    unitType: ''\n                                                }\n                                            },\n                                            errorMessage: \"Which unit do you mean?\"\n                                        })),\n                                        target: 'errorMessage',\n                                    }\n                                ]\n                            },\n                            sayDistance: {\n                                entry: say((context) => {\n                                    let distance = 0\n                                    switch (context.commandTranslator.translated.unitType) {\n                                        case units.Archer:\n                                            distance = archerContext.moveRange;\n                                            break;\n                                        case units.Horseman:\n                                            distance = horsemanContext.moveRange\n                                            break;\n                                        case units.Spearman:\n                                            distance = spearmanContext.moveRange\n                                    }\n                                    return `The ${context.commandTranslator.utterance.unitType} can move ${distance} fields.`\n                                }),\n                                on: {\n                                    ENDSPEECH: 'final'\n                                }\n                            },\n                            errorMessage: {\n                                ...abstractPromptMachine([(context) => context.errorMessage]),\n                                on: {\n                                    RECOGNISED: {\n                                        target: 'parseUtterance',\n                                        actions: assign({\n                                            recResult: (_c, event) => event.value\n                                        })\n                                    },\n                                    TIMEOUT: {\n                                        target: '.hist',\n                                        actions: send('REPROMPT')\n                                    }\n                                }\n                            },\n                            final: {\n                                type: 'final'\n                            }\n                        },\n                        onDone: 'fetchMoves'\n                    },\n                    skip: {\n                        initial: 'checkIfMovesLeft',\n                        states: {\n                            checkIfMovesLeft: {\n                                always: [\n                                    {\n                                        cond: 'movesLeft',\n                                        target: 'verification'\n                                    },\n                                    {\n                                        actions: send('YES')\n                                    }\n                                ]\n                            },\n                            verification: {\n                                ...binaryPromptMachine([\n                                    (context) => `${context.moves.production ? 'You could produce a unit.' : 'You could move a unit.'} Still want to do nothing?`,\n                                    () => 'Do you want to skip this turn?'\n                                ])\n                            }\n                        },\n                        on: {\n                            YES: 'final',\n                            NO: 'fetchMoves'\n                        }\n                    },\n                    approve: {\n                        initial: 'checkIfCommandProposed',\n                        states: {\n                            checkIfCommandProposed: {\n                                always: [\n                                    {\n                                        cond: 'commandProposed',\n                                        target: 'execute'\n                                    },\n                                    {\n                                        target: 'final'\n                                    }\n                                ]\n                            },\n                            execute: {\n                                entry: [\n                                    say(context => {\n                                        switch (context.proposedCommand!.type) {\n                                            case moveType.attack:\n                                                return \"Ok, we'll attack the unit\"\n                                            case moveType.move:\n                                                return \"Ok, we'll move the unit\"\n                                        }\n                                    }),\n                                    'executeProposedCommand',\n                                ],\n                                always: 'final',\n                                exit: 'resetProposedCommand'\n                            },\n                            final: {\n                                type: 'final'\n                            }\n                        },\n                        onDone: 'fetchMoves'\n                    },\n                    final: {\n                        type: 'final'\n                    }\n                },\n                onDone: {\n                    target: 'waiting',\n                    actions: sendParent('EMPIRE_DONE')\n                },\n                exit: 'resetProposedCommand'\n            },\n            waiting: {\n                on: {\n                    TURN: 'turn'\n                }\n            },\n            defeated: {\n                type: 'final'\n            },\n            victorious: {\n                type: 'final'\n            }\n        }\n    },\n    {\n        actions: {\n            resetProposedCommand: assign<UserEmpireContext, UserEmpireEvents>({\n                proposedCommand: () => undefined\n            }),\n            executeProposedCommand: send((context: UserEmpireContext) => {\n                    let type;\n                    switch (context.proposedCommand!.type) {\n                        case moveType.attack:\n                            type = 'ATTACK';\n                            break;\n                        case moveType.move:\n                            type = 'MOVE'\n                    }\n\n                    return {\n                        type: type,\n                        id: context.proposedCommand!.id,\n                        x: context.proposedCommand!.x,\n                        y: context.proposedCommand!.y\n                    }\n                },\n                {\n                    to: context => context.gameBoard.ref\n                }),\n            // @ts-ignore\n            storeProposedCommand: assign<UserEmpireContext, EmpireUnitMoveEvent>({\n                proposedCommand: (context, event) => {\n                    let attackMoves = event.moves.filter((move) => move.type === moveType.attack)\n                    let randomMove;\n                    if (attackMoves.length > 0) {\n                        randomMove = attackMoves[Math.floor(Math.random() * attackMoves.length)]\n                    } else if (event.moves.length > 0) {\n                        randomMove = event.moves[Math.floor(Math.random() * event.moves.length)]\n                    }\n\n                    if (randomMove) {\n                        return {\n                            type: randomMove.type,\n                            id: context.commandTranslator.translated.id,\n                            x: randomMove.location.x,\n                            y: randomMove.location.y\n                        }\n                    } else {\n                        return undefined\n                    }\n                }\n            }),\n            // @ts-ignore\n            proposeCommand: say((context) => {\n                if (context.proposedCommand) {\n                    switch (context.proposedCommand.type) {\n                        case moveType.attack:\n                            return `We could for example attack the enemy on ${(context.proposedCommand.x + 10).toString(36).toUpperCase()}${context.proposedCommand.y + 1}`\n                        case moveType.move:\n                            return `We could move it for example to ${(context.proposedCommand.x + 10).toString(36).toUpperCase()}${context.proposedCommand.y + 1}`\n                    }\n                } else {\n                    return \"It can't do anything\";\n                }\n            }),\n            resetCommandTranslator: assign<UserEmpireContext, UserEmpireEvents>({\n                commandTranslator: () => ({\n                    utterance: {sourceUnit: '', target: '', unitType: ''},\n                    translated: {id: '', x: 0, y: 0, unitType: undefined}\n                })\n            }),\n            registerAtGameBoard: send((context: UserEmpireContext) => ({\n                    type: 'REGISTER',\n                    empire: context.empire\n                }),\n                {\n                    to: context => context.gameBoard.ref\n                }\n            ),\n            registerAtSRM: sendToSRM('REGISTER'),\n            translateTargetField: assign<UserEmpireContext, UserEmpireEvents>({\n                commandTranslator: (context) => {\n                    let pattern = /([A-Z]+) ?(\\d+)/;\n                    let regexExec = pattern.exec(context.commandTranslator.utterance.target)!;\n\n                    return {\n                        ...context.commandTranslator,\n                        translated: {\n                            ...context.commandTranslator.translated,\n                            x: (parseInt(regexExec[1], 36) - 10),\n                            y: parseInt(regexExec[2]) - 1\n                        }\n                    }\n                }\n            }),\n            translateUnitType: assign<UserEmpireContext, UserEmpireEvents>({\n                commandTranslator: (context) => {\n                    return {\n                        ...context.commandTranslator,\n                        translated: {\n                            ...context.commandTranslator.translated,\n                            unitType: getUnitByString(context.commandTranslator.utterance.unitType)!\n                        }\n                    }\n                }\n            }),\n            translateSourceUnit: assign<UserEmpireContext, UserEmpireEvents>({\n                commandTranslator: context => {\n                    let unit_type: units = getUnitByString(context.commandTranslator.utterance.sourceUnit)!\n\n                    if (unit_type) {\n                        let unit = context.moves.units.find(unit => unit.type === unit_type);\n                        if (unit) {\n                            return {\n                                ...context.commandTranslator,\n                                translated: {\n                                    ...context.commandTranslator.translated,\n                                    id: unit.id\n                                }\n                            }\n                        }\n                    }\n                    return context.commandTranslator;\n                }\n            })\n        },\n        guards: {\n            commandProposed: (context) => context.proposedCommand !== undefined,\n            movesLeft: (context) => context.moves.units.length > 0 || context.moves.production,\n            validateSourceUnit: (context: UserEmpireContext) => {\n                let unit_type: units = getUnitByString(context.commandTranslator.utterance.sourceUnit)!\n\n                if (unit_type) {\n                    let unit = context.moves.units.find((unit) => unit.type === unit_type);\n                    if (unit) {\n                        return true\n                    }\n                }\n                return false;\n            },\n            validateTargetField: (context: UserEmpireContext) => {\n                let pattern = /([A-Z]+) ?(\\d+)/;\n                let regexExec = pattern.exec(context.commandTranslator.utterance.target)!;\n                console.log(regexExec)\n                return regexExec && regexExec[1] !== undefined && regexExec[2] !== undefined\n            },\n            validateUnitType: (context: UserEmpireContext) => {\n                let producable = [units.Archer, units.Spearman, units.Horseman]\n                let unitType = getUnitByString(context.commandTranslator.utterance.unitType)\n\n                return (unitType && producable.includes(unitType)) || false\n            }\n        }\n    }\n);\n\n\nfunction motionStateNode(id: string,\n                         sourceUnitPrompt: ((context: UserEmpireContext) => string)[],\n                         targetPrompt: ((context: UserEmpireContext) => string)[],\n                         sourceError: string,\n                         targetError: string): StatesConfig<UserEmpireContext, any, UserEmpireEvents> {\n    return {\n        fetchInformation: {\n            initial: 'getSourceUnit',\n            states: {\n                hist: {\n                    type: 'history'\n                },\n                getSourceUnit: {\n                    ...formFillingPromptMachine(\n                        sourceUnitPrompt,\n                        (context) => context.commandTranslator.utterance.sourceUnit !== '',\n                        'getTarget',\n                        `${id}~parseUtterance`)\n                },\n                getTarget: {\n                    ...formFillingPromptMachine(\n                        targetPrompt,\n                        (context) => context.commandTranslator.utterance.target !== '',\n                        'final',\n                        `${id}~parseUtterance`)\n                },\n                final: {\n                    type: 'final'\n                }\n            },\n            onDone: 'translateSourceUnit'\n        },\n        parseUtterance: {\n            id: `${id}~parseUtterance`,\n            invoke: {\n                src: context => nluRequest(context.recResult.utterance),\n                onDone: [\n                    {\n                        cond: (context, event) => event.data['intent']['name'] === 'exit_question',\n                        target: 'final'\n                    },\n                    {\n                        actions: assign({\n                            commandTranslator: (context, event) => {\n                                let unit: rasa_response_entity = event.data['entities'].find((element: rasa_response_entity) => element.entity === 'unit' && element.role === 'source')\n                                let target: rasa_response_entity = event.data['entities'].find((element: rasa_response_entity) => element.entity === 'field' && element.role === 'target')\n\n                                return {\n                                    utterance: {\n                                        ...context.commandTranslator.utterance,\n                                        sourceUnit: unit && unit.value ? unit.value.toLowerCase() : context.commandTranslator.utterance.sourceUnit,\n                                        target: target && target.value ? target.value : context.commandTranslator.utterance.target\n                                    },\n                                    translated: {\n                                        ...context.commandTranslator.translated\n                                    }\n                                }\n                            }\n                        }),\n                        target: 'fetchInformation.hist'\n                    }\n                ],\n                onError: 'fetchInformation.hist'\n            }\n        },\n        translateSourceUnit: {\n            always: [\n                {\n                    cond: 'validateSourceUnit',\n                    actions: 'translateSourceUnit',\n                    target: 'checkTargetField'\n                },\n                {\n                    actions: assign(context => ({\n                        commandTranslator: {\n                            ...context.commandTranslator,\n                            utterance: {\n                                ...context.commandTranslator.utterance,\n                                sourceUnit: ''\n                            }\n                        },\n                        errorMessage: sourceError\n                    })),\n                    target: 'errorMessage',\n                }\n            ]\n        },\n        checkTargetField: {\n            always: [\n                {\n                    cond: 'validateTargetField',\n                    actions: 'translateTargetField',\n                    target: 'execute'\n                },\n                {\n                    actions: assign((context) => ({\n                        commandTranslator: {\n                            ...context.commandTranslator,\n                            utterance: {\n                                ...context.commandTranslator.utterance,\n                                target: ''\n                            }\n                        },\n                        errorMessage: targetError\n                    })),\n                    target: 'fetchInformation',\n                }\n            ]\n        },\n        errorMessage: {\n            ...abstractPromptMachine([(context) => context.errorMessage]),\n            on: {\n                RECOGNISED: {\n                    target: 'parseUtterance',\n                    actions: assign({\n                        recResult: (_c, event) => event.value\n                    })\n                },\n                TIMEOUT: {\n                    target: '.hist',\n                    actions: send('REPROMPT')\n                }\n            }\n        },\n        final: {\n            type: 'final'\n        }\n    }\n}\n","import {Action, assign, createMachine, send, spawn} from \"xstate\";\nimport uuid from \"uuid-v4\";\nimport {dummyRef, empires, MachineRef} from \"../Util\";\nimport {createEmpireMachine} from \"./EmpireMachine\";\nimport {createUserEmpireMachine} from \"./UserEmpireMachine\";\n\n\nfunction say(text: (context: GameContext) => string): Action<GameContext, any> {\n    return send((context: GameContext) => ({\n            type: \"SPEAK\",\n            value: text(context)\n        }), {\n            to: context => context.speechRecognitionMachine.ref\n        }\n    )\n}\n\ninterface GameContext {\n    userEmpire: MachineRef,\n    currentEmpire: MachineRef,\n    aiEmpireQueue: MachineRef[],\n    aiEmpirePile: MachineRef[],\n    gameBoard: MachineRef,\n\n    speechRecognitionMachine: MachineRef,\n    machinesReady: number,\n    turn: number\n}\n\ntype LivingEmpireEvent =\n    {\n        type: 'SEND_LIVING_EMPIRES',\n        empires: empires[]\n    };\n\ntype GameEvents =\n    LivingEmpireEvent |\n    {\n        type: 'START'\n    } |\n    {\n        type: 'EMPIRE_DONE',\n    } |\n    {\n        type: 'EMPIRE_READY'\n    } |\n    {\n        type: 'ENDSPEECH'\n    } |\n    {\n        type: 'REGISTERED'\n    };\n\n\nexport const gameMachine = (speechRecognitionMachine: MachineRef) => createMachine<GameContext, GameEvents>({\n        id: 'game',\n        context: {\n            userEmpire: dummyRef,\n            aiEmpireQueue: [],\n            aiEmpirePile: [],\n            currentEmpire: dummyRef,\n            gameBoard: dummyRef,\n            machinesReady: 0,\n            turn: 1,\n            speechRecognitionMachine: speechRecognitionMachine\n        },\n        initial: 'idle',\n        states: {\n            idle: {\n                on: {\n                    START: 'registerAtSRM'\n                }\n            },\n            registerAtSRM: {\n                entry: send('REGISTER', {to: context => context.speechRecognitionMachine.ref}),\n                on: {\n                    REGISTERED: 'settingUp'\n                }\n            },\n            settingUp: {\n                type: 'parallel',\n                states: {\n                    createMachines: {\n                        initial: 'createGameBoard',\n                        states: {\n                            createGameBoard: {\n                                entry: 'createGameBoard',\n                                always: 'createUserEmpire'\n                            },\n                            createUserEmpire: {\n                                entry: 'createUserEmpire',\n                                always: 'createAIEmpires'\n                            },\n                            createAIEmpires: {\n                                entry: 'createAIEmpires',\n                                type: 'final'\n                            }\n                        }\n                    },\n                    handlingResponses: {\n                        initial: 'waitingForResponse',\n                        states: {\n                            waitingForResponse: {\n                                on: {\n                                    EMPIRE_READY: {\n                                        actions: assign({\n                                            machinesReady: (context) => context.machinesReady + 1\n                                        }),\n                                        target: 'checkingIfReady'\n                                    }\n\n                                }\n                            },\n                            checkingIfReady: {\n                                always: [\n                                    {\n                                        cond: context => context.machinesReady === context.aiEmpireQueue.length + 1,\n                                        target: 'ready'\n                                    },\n                                    {\n                                        target: 'waitingForResponse'\n                                    }\n                                ]\n                            },\n                            ready: {\n                                entry: say(() => 'The game is starting! We are playing black.'),\n                                on: {\n                                    ENDSPEECH: 'final'\n                                }\n                            },\n                            final: {\n                                type: 'final'\n                            }\n                        }\n\n                    }\n                },\n                onDone: {\n                    target: 'processingUser',\n                    actions: send('START_GAME', {\n                        to: context => context.gameBoard.ref\n                    })\n                }\n            },\n            processingUser: {\n                entry: [\n                    'moveUserToCurrent',\n                    'notifyGameBoardCurrentEmpire',\n                    'notifyCurrentMachineToStart',\n                ],\n                on: {\n                    EMPIRE_DONE: {\n                        target: 'processingAI',\n                        actions: [\n                            'notifyGameBoardEndTurn',\n                            'resetCurrentEmpire'\n                        ]\n                    }\n                }\n            },\n            processingAI: {\n                initial: 'checkRemainingEmpires',\n                states: {\n                    checkRemainingEmpires: {\n                        always: [\n                            {\n                                cond: 'empiresInQueue',\n                                target: 'empireTurn'\n                            },\n                            {\n                                target: 'final'\n                            }\n                        ]\n                    },\n                    empireTurn: {\n                        entry: [\n                            'moveNextAIToCurrent',\n                            'notifyGameBoardCurrentEmpire',\n                            'notifyCurrentMachineToStart'\n                        ],\n                        on: {\n                            EMPIRE_DONE: {\n                                actions: [\n                                    'notifyGameBoardEndTurn',\n                                    'empireDone',\n                                    'resetCurrentEmpire',\n                                ],\n                                target: 'checkRemainingEmpires'\n                            }\n                        }\n                    },\n                    final: {\n                        entry: [\n                            'resetCurrentEmpire',\n                            'resetAI',\n                        ],\n                        type: 'final'\n                    }\n                },\n                onDone: 'processingTurn'\n            },\n            processingTurn: {\n                entry: send('REQ_LIVING_EMPIRES', {\n                    to: context => context.gameBoard.ref\n                }),\n                on: {\n                    SEND_LIVING_EMPIRES: [\n                        {\n                            target: 'lost',\n                            cond: 'userEmpireDead'\n                        },\n                        {\n                            target: 'won',\n                            cond: 'oneEmpireLiving'\n                        },\n                        {\n                            target: 'processingUser',\n                            actions: assign({\n                                turn: context => context.turn + 1,\n                                aiEmpireQueue: (context, event) =>\n                                    context.aiEmpireQueue.filter((emp) => event.empires.includes(emp.ref.getSnapshot().context.empire))\n                            })\n\n                        }\n                    ]\n                }\n            },\n            won: {\n                entry: say(() => 'We have defeated our enemies and conquered the world!'),\n                type: 'final'\n            },\n            lost: {\n                entry: say(() => 'The enemies were to strong! We need to prepare better next time!'),\n                type: 'final'\n            }\n        }\n    },\n    {\n        guards: {\n            // @ts-ignore\n            userEmpireDead: (context: GameContext, event: LivingEmpireEvent) => !event.empires.includes(context.userEmpire.ref.getSnapshot().context.empire),\n            // @ts-ignore\n            oneEmpireLiving: (context, event: LivingEmpireEvent) => event.empires.length === 1,\n            empiresInQueue: context => {\n                return context.aiEmpireQueue.length > 0\n            }\n        },\n        actions: {\n            notifyGameBoardCurrentEmpire: send((context) => ({\n                type: 'START_TURN',\n                empire: context.currentEmpire.ref.getSnapshot().context.empire,\n                turn: context.turn\n            }), {to: context => context.gameBoard.ref}),\n            notifyGameBoardEndTurn: send('END_TURN', {to: context => context.gameBoard.ref}),\n            createUserEmpire: assign({\n                userEmpire: (context) => {\n                    const empire = {\n                        id: uuid(),\n                        empire: empires.empire4,\n                        gameBoard: context.gameBoard,\n                    };\n                    return {\n                        id: empire.id,\n                        ref: spawn(createUserEmpireMachine(empire, context.speechRecognitionMachine), 'userEmpire')\n                    };\n                }\n            }),\n            createAIEmpires: assign({\n                aiEmpireQueue: (context) => {\n                    let list: MachineRef[] = [];\n                    const empire1 = {\n                        id: uuid(),\n                        empire: empires.empire1,\n                        gameBoard: context.gameBoard\n                    };\n                    list.push({\n                        id: empire1.id,\n                        ref: spawn(createEmpireMachine(empire1), empires.empire1)\n                    });\n\n                    const empire2 = {\n                        id: uuid(),\n                        empire: empires.empire2,\n                        gameBoard: context.gameBoard\n                    };\n                    list.push({\n                        id: empire2.id,\n                        ref: spawn(createEmpireMachine(empire2), empires.empire2)\n                    });\n\n                    const empire3 = {\n                        id: uuid(),\n                        empire: empires.empire3,\n                        gameBoard: context.gameBoard\n                    };\n                    list.push({\n                        id: empire3.id,\n                        ref: spawn(createEmpireMachine(empire3), empires.empire3)\n                    });\n\n                    return list;\n                }\n            }),\n            empireDone: assign({\n                aiEmpirePile: (context) => {\n                    let temp = context.aiEmpirePile;\n                    temp.push(context.currentEmpire);\n                    return temp;\n                }\n            }),\n            moveUserToCurrent: assign({\n                currentEmpire: (context) => context.userEmpire\n            }),\n            moveNextAIToCurrent: assign<GameContext, GameEvents>({\n                currentEmpire: (context) => context.aiEmpireQueue[0],\n                aiEmpireQueue: (context) => {\n                    let temp = context.aiEmpireQueue;\n                    temp.splice(0, 1);\n                    return temp;\n                }\n            }),\n            resetAI: assign<GameContext, GameEvents>({\n                aiEmpireQueue: (context) => context.aiEmpirePile,\n                aiEmpirePile: () => [] as MachineRef[]\n            }),\n            resetCurrentEmpire: assign<GameContext, GameEvents>({\n                currentEmpire: () => dummyRef\n            }),\n            notifyCurrentMachineToStart: send(\n                {type: 'TURN'},\n                {to: (context: GameContext) => context.currentEmpire.ref}\n            )\n        }\n    });\n","import {Actions, assign, createMachine, send, spawn} from \"xstate\";\nimport uuid from \"uuid-v4\";\nimport {\n    archerContext,\n    baseContext,\n    createUnitMachine,\n    horsemanContext,\n    InitialUnitContext,\n    spearmanContext,\n    UnitContext\n} from \"./UnitMachine\";\nimport {dummyRef, empires, hexCoord, isInHexCoordArray, location, MachineRef} from \"../Util\";\nimport {pure, respond} from \"xstate/es/actions\";\nimport {units} from \"../components/Unit\";\nimport {moveType} from \"./EmpireMachine\";\n\nexport type GameBoardField = {\n    hexCoordinate: hexCoord,\n    unit: MachineRef\n}\n\nexport type Producer = {\n    unit: MachineRef,\n    targetTurn: number\n}\n\nexport interface GameBoardContext {\n    gameBoard: GameBoardField[][];\n    livingEmpires: empires[];\n    currentEmpire: empires | undefined;\n    currentTurn: number\n    producer: Producer[]\n\n}\n\n\ntype UnitEvents =\n    {\n        type: 'MOVE',\n        id: string,\n        x: number,\n        y: number\n    } |\n    {\n        type: 'ATTACK',\n        id: string,\n        x: number,\n        y: number\n    };\n\ntype UnitMoveEvents =\n    {\n        type: 'REQ_MOVES_FOR_UNIT',\n        id: string,\n    };\n\ntype ProduceEvent =\n    {\n        type: 'PRODUCE',\n        unit: units\n    };\n\ntype DeadEvent =\n    {\n        type: 'DEAD',\n        id: string,\n        unitType: units,\n        unitEmpire: empires\n    };\n\ntype EmpireEvents =\n    {\n        type: 'REGISTER',\n        empire: empires\n    } |\n    {\n        type: 'GET_MOVES',\n        empire: empires\n    };\n\ntype StartTurnEvent =\n    {\n        type: 'START_TURN',\n        empire: empires,\n        turn: number\n    };\n\nexport type GameBoardEvents =\n    UnitEvents |\n    UnitMoveEvents |\n    EmpireEvents |\n    ProduceEvent |\n    DeadEvent |\n    StartTurnEvent |\n    {\n        type: 'START_GAME',\n    } |\n    {\n        type: 'REQ_LIVING_EMPIRES'\n    } |\n    {\n        type: 'END_TURN'\n    } |\n    {\n        type: 'REQ_TURN'\n    };\n\nfunction getBaseLocation(empire: empires, gameBoard: GameBoardField[][]) {\n    for (let rowIndex in gameBoard) {\n        for (let colIndex in gameBoard[rowIndex]) {\n            let unit = gameBoard[rowIndex][colIndex].unit\n            if (unit.id === '') {\n                continue;\n            }\n\n            let unitContext = unit.ref.getSnapshot().context;\n            if (unitContext.empire === empire && unitContext.type === units.Base) {\n                return [parseInt(rowIndex), parseInt(colIndex)];\n            }\n        }\n    }\n    // if not found\n    return [-1, -1]\n}\n\nfunction getAllNeighbours(x: number, y: number, max_dist: number, gameBoard: GameBoardField[][]) {\n    let hexCoord = gameBoard[y][x].hexCoordinate\n    let neighbourCoords: hexCoord[] = []\n    for (let q = -max_dist; q < max_dist + 1; q++) {\n        for (let r = Math.max(-max_dist, -q - max_dist); r < Math.min(max_dist, -q + max_dist) + 1; r++) {\n            let s = -q - r\n            if (q === 0 && r === 0 && s === 0)\n                continue;\n\n            neighbourCoords.push({\n                q: hexCoord.q + q,\n                r: hexCoord.r + r,\n                s: hexCoord.s + s\n            })\n        }\n    }\n\n    return neighbourCoords;\n}\n\nfunction getFreeNeighbour(x: number, y: number, gameBoard: GameBoardField[][]) {\n    let neighbourCoords = getAllNeighbours(x, y, 1, gameBoard)\n\n    const isNeighbour = (coord: hexCoord) => {\n        return isInHexCoordArray(neighbourCoords, coord)\n    }\n\n    let freeFields = []\n    for (let rowIndex in gameBoard) {\n        for (let colIndex in gameBoard[rowIndex]) {\n            let neighbour = gameBoard[rowIndex][colIndex]\n            if (isNeighbour(neighbour.hexCoordinate) && neighbour.unit.id === '') {\n                freeFields.push([parseInt(rowIndex), parseInt(colIndex)])\n            }\n        }\n    }\n\n    if (freeFields.length > 0) {\n        return freeFields[Math.floor(Math.random() * freeFields.length)]\n    } else {\n        return [-1, -1]\n    }\n}\n\nexport function getUnitLocation(id: string, gameBoard: GameBoardField[][]): [number, number] {\n    for (let rowIndex in gameBoard) {\n        for (let colIndex in gameBoard[rowIndex]) {\n            if (gameBoard[rowIndex][colIndex].unit.id === id) {\n                return [parseInt(rowIndex), parseInt(colIndex)];\n            }\n        }\n    }\n    // if not found\n    return [-1, -1]\n}\n\nexport function getUnit(id: string, gameBoard: GameBoardField[][]): MachineRef {\n    for (let rowIndex in gameBoard) {\n        for (let colIndex in gameBoard[rowIndex]) {\n            if (gameBoard[rowIndex][colIndex].unit.id === id) {\n                return gameBoard[rowIndex][colIndex].unit;\n            }\n        }\n    }\n    // unit id does not exist\n    return dummyRef;\n}\n\nfunction targetNotOccupied(x: number, y: number, gameBoard: GameBoardField[][]): boolean {\n    const targetUnit = gameBoard[y][x].unit;\n    return targetUnit.id === '';\n}\n\nfunction getDistance(location1: location, location2: location, gameBoard: GameBoardField[][]) {\n    const hexCoord1 = gameBoard[location1.y][location1.x].hexCoordinate\n    const hexCoord2 = gameBoard[location2.y][location2.x].hexCoordinate\n\n    return (\n        Math.abs(hexCoord1.q - hexCoord2.q) +\n        Math.abs(hexCoord1.r - hexCoord2.r) +\n        Math.abs(hexCoord1.s - hexCoord2.s)\n    ) / 2\n}\n\n// @ts-ignore\nexport const createGameBoardMachine = (gameBoard: GameBoardField[][]) => createMachine<GameBoardContext, GameBoardEvents>({\n        id: 'gameBoard',\n        context: {\n            gameBoard: gameBoard,\n            currentEmpire: undefined,\n            livingEmpires: [],\n            currentTurn: 0,\n            producer: [] as Producer[]\n        },\n        initial: 'settingUp',\n        states: {\n            settingUp: {\n                entry: [\n                    assign({\n                            gameBoard: (context) => {\n                                const temp = context.gameBoard;\n                                const newUnit1 = {\n                                    ...spearmanContext,\n                                    id: uuid(),\n                                    empire: empires.empire1\n                                }\n                                temp[0][5].unit = {\n                                    id: newUnit1.id,\n                                    ref: spawn(createUnitMachine(newUnit1))\n                                };\n                                const newUnit2 = {\n                                    ...archerContext,\n                                    id: uuid(),\n                                    empire: empires.empire4\n                                }\n                                temp[4][5].unit = {\n                                    id: newUnit2.id,\n                                    ref: spawn(createUnitMachine(newUnit2))\n                                };\n                                const newUnit5 = {\n                                    ...horsemanContext,\n                                    id: uuid(),\n                                    empire: empires.empire4\n                                }\n                                temp[6][7].unit = {\n                                    id: newUnit5.id,\n                                    ref: spawn(createUnitMachine(newUnit5))\n                                };\n                                const newUnit6 = {\n                                    ...spearmanContext,\n                                    id: uuid(),\n                                    empire: empires.empire4\n                                }\n                                temp[2][6].unit = {\n                                    id: newUnit6.id,\n                                    ref: spawn(createUnitMachine(newUnit6))\n                                };\n                                const newUnit3 = {\n                                    ...spearmanContext,\n                                    id: uuid(),\n                                    empire: empires.empire2\n                                }\n                                temp[1][5].unit = {\n                                    id: newUnit3.id,\n                                    ref: spawn(createUnitMachine(newUnit3))\n                                };\n\n\n                                const newUnit7 = {\n                                    ...horsemanContext,\n                                    id: uuid(),\n                                    empire: empires.empire1\n                                }\n                                temp[3][11].unit = {\n                                    id: newUnit7.id,\n                                    ref: spawn(createUnitMachine(newUnit7))\n                                };\n\n                                const newUnit8 = {\n                                    ...horsemanContext,\n                                    id: uuid(),\n                                    empire: empires.empire3\n                                }\n                                temp[6][8].unit = {\n                                    id: newUnit8.id,\n                                    ref: spawn(createUnitMachine(newUnit8))\n                                };\n                                return temp;\n                            }\n                        },\n                    ),\n                ],\n                // @ts-ignore\n                on: {\n                    REGISTER: [\n                        {\n                            actions: [\n                                'spawnEmpire',\n                                respond({type: 'REGISTERED'})\n                            ]\n                        }\n                    ],\n                    START_GAME: 'waitingForTurn'\n                }\n\n            },\n            waitingForTurn: {\n                // @ts-ignore\n                on: {\n                    START_TURN: {\n                        target: 'turn',\n                        actions: assign({\n                            currentEmpire: (_, event) => event.empire,\n                            currentTurn: (_, event) => event.turn\n                        })\n                    },\n                    REQ_LIVING_EMPIRES: {\n                        actions: respond((context: GameBoardContext) => ({\n                            type: 'SEND_LIVING_EMPIRES',\n                            empires: context.livingEmpires\n                        }))\n                    }\n                }\n            },\n            turn: {\n                type: 'parallel',\n                entry: [\n                    'checkProducer',\n                    'makeUnitsMovable'\n                ],\n                // @ts-ignore\n                on: {\n                    END_TURN: {\n                        target: 'waitingForTurn',\n                        actions: [\n                            assign({\n                                currentEmpire: undefined\n                            })\n                        ]\n                    }\n                },\n                states: {\n                    handlingEvents: {\n                        // @ts-ignore\n                        on: {\n                            MOVE: [\n                                {\n                                    cond: 'unitExistsNot',\n                                    actions: respond('EXISTS_NOT')\n                                },\n                                {\n                                    cond: 'outOfRange',\n                                    actions: respond('OUT_OF_RANGE')\n                                },\n                                {\n                                    cond: 'targetOccupiedByEnemy',\n                                    actions: respond('OCC_ENEMY')\n                                },\n                                {\n                                    cond: 'targetOccupiedByAlly',\n                                    actions: respond('OCC_ALLY')\n                                },\n                                {\n                                    actions: [\n                                        send('NOT_MOVABLE', {\n                                            to: (context: GameBoardContext, event: UnitEvents) => {\n                                                let unit = getUnit(event.id, context.gameBoard)\n                                                return unit.ref\n                                            }\n                                        }),\n                                        'applyMove',\n                                        respond('EXECUTED')\n                                    ]\n                                }\n                            ],\n                            ATTACK: [\n                                {\n                                    cond: 'unitExistsNot',\n                                    actions: respond('EXISTS_NOT')\n                                },\n                                {\n                                    cond: 'targetNotOnMap',\n                                    actions: respond('OUT_OF_RANGE')\n                                },\n                                {\n                                    cond: 'targetNotOccupied',\n                                    actions: respond('OCC_NOT')\n                                },\n                                {\n                                    cond: 'targetOccupiedByAlly',\n                                    actions: respond('OCC_ALLY')\n                                },\n                                {\n                                    cond: 'outOfRange',\n                                    actions: respond('OUT_OF_RANGE')\n                                },\n                                {\n                                    actions: [\n                                        send('NOT_MOVABLE', {\n                                            to: (context: GameBoardContext, event: UnitEvents) => {\n                                                let unit = getUnit(event.id, context.gameBoard)\n                                                return unit.ref\n                                            }\n                                        }),\n                                        'applyAttackDamage',\n                                        'applyReceivedDamage',\n                                        respond('EXECUTED')\n                                    ]\n                                }\n                            ],\n                            PRODUCE: [\n                                {\n                                    cond: 'alreadyProducing',\n                                    actions: respond('PROD_IN_PROGRESS')\n                                },\n                                {\n                                    actions: [\n                                        'produceUnit',\n                                        respond('EXECUTED')\n                                    ]\n                                }\n                            ],\n                            GET_MOVES: {\n                                actions: 'getMoves'\n                            },\n                            REQ_TURN: {\n                                actions: respond(context => ({\n                                        type: 'RES_TURN',\n                                        turn: context.currentTurn\n                                    })\n                                )\n                            },\n                            REQ_MOVES_FOR_UNIT: {\n                                actions: respond((context, event: UnitMoveEvents) => {\n                                    let unit = getUnit(event.id, context.gameBoard).ref.getSnapshot().context\n                                    let [unitY, unitX] = getUnitLocation(event.id, context.gameBoard)\n\n                                    let attackableFields = getAllNeighbours(unitX, unitY, unit.attackRange, context.gameBoard)\n                                    let movableFields = getAllNeighbours(unitX, unitY, unit.moveRange, context.gameBoard)\n\n                                    let moves = [] as { type: moveType, location: location }[]\n                                    for (let rowIndex in context.gameBoard) {\n                                        for (let colIndex in context.gameBoard[rowIndex]) {\n                                            if (isInHexCoordArray(attackableFields, gameBoard[rowIndex][colIndex].hexCoordinate)) {\n                                                let unit = gameBoard[rowIndex][colIndex].unit;\n                                                if (unit.id !== '' && unit.ref.getSnapshot().context.empire !== context.currentEmpire) {\n                                                    moves.push({\n                                                        type: moveType.attack,\n                                                        location: {x: parseInt(colIndex), y: parseInt(rowIndex)}\n                                                    })\n                                                }\n                                            }\n                                            if (isInHexCoordArray(movableFields, gameBoard[rowIndex][colIndex].hexCoordinate)) {\n                                                if (gameBoard[rowIndex][colIndex].unit.id === '') {\n                                                    moves.push({\n                                                        type: moveType.move,\n                                                        location: {x: parseInt(colIndex), y: parseInt(rowIndex)}\n                                                    })\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    return {\n                                        type: 'POSSIBLE_MOVES',\n                                        moves: moves\n                                    }\n                                })\n                            }\n                        }\n                    },\n                    cleanUpGameBoard: {\n                        on: {\n                            DEAD: [\n                                {\n                                    cond: 'unitIsBase',\n                                    actions: 'removeEmpire'\n                                },\n                                {\n                                    actions: 'removeDeadUnit'\n                                }\n                            ]\n                        }\n                    }\n                }\n            },\n        }\n    },\n    {\n        actions: {\n            checkProducer: assign<GameBoardContext>({\n                gameBoard: (context) => {\n                    let temp = context.gameBoard;\n                    for (let prod of context.producer) {\n                        if (prod.targetTurn === context.currentTurn) {\n                            let [baseY, baseX] = getBaseLocation(prod.unit.ref.getSnapshot().context.empire, context.gameBoard)\n\n                            if (baseX < 0 || baseY < 0) {\n                                // producing a unit for a defeated empire\n                                // TODO Validate before\n                                continue;\n                            }\n\n                            let [spawnY, spawnX] = getFreeNeighbour(baseX, baseY, context.gameBoard)\n                            temp[spawnY][spawnX].unit = prod.unit\n                        }\n                    }\n                    return temp;\n                },\n                producer: (context: GameBoardContext) => {\n                    return context.producer.filter((prod: Producer) => prod.targetTurn > context.currentTurn)\n                }\n            }),\n            produceUnit: assign<GameBoardContext, ProduceEvent>({\n                producer: (context, event) => {\n                    let productionTime = 0;\n                    let initialContext: InitialUnitContext;\n                    switch (event.unit) {\n                        case units.Archer:\n                            initialContext = archerContext\n                            productionTime = archerContext.productionTime\n                            break;\n                        case  units.Spearman:\n                            initialContext = spearmanContext\n                            productionTime = spearmanContext.productionTime\n                            break;\n                        case units.Horseman:\n                            initialContext = horsemanContext\n                            productionTime = horsemanContext.productionTime\n                            break;\n                        case units.Base:\n                            initialContext = baseContext\n                            productionTime = baseContext.productionTime\n                            break;\n                        default:\n                        //cannot happen, since event.unit is of type units\n                    }\n\n                    const newUnit = {\n                        ...initialContext!,\n                        id: uuid(),\n                        empire: context.currentEmpire!\n                    }\n\n                    return [\n                        ...context.producer,\n                        {\n                            unit: {\n                                id: newUnit.id,\n                                ref: spawn(createUnitMachine(newUnit))\n                            },\n                            targetTurn: context.currentTurn + productionTime\n                        }\n                    ]\n                }\n            }),\n            // @ts-ignore\n            makeUnitsMovable: pure((context: GameBoardContext) => {\n                let actions: Actions<GameBoardContext, GameBoardEvents> = [];\n                for (let rowIndex in context.gameBoard) {\n                    for (let colIndex in context.gameBoard[rowIndex]) {\n                        let unit = context.gameBoard[rowIndex][colIndex].unit\n                        if (unit.id !== '') {\n                            let unitSnap = unit.ref.getSnapshot();\n                            if (unitSnap.context.empire === context.currentEmpire && unitSnap.context.type !== units.Base) {\n                                // @ts-ignore\n                                actions.push(send('MOVABLE', {to: unit.ref}))\n                            } else {\n                                // @ts-ignore\n                                actions.push(send('NOT_MOVABLE', {to: unit.ref}))\n                            }\n                        }\n                    }\n                }\n                return actions;\n            }),\n            getMoves: respond((context: GameBoardContext) => {\n                let units = [];\n                for (let rowIndex in context.gameBoard) {\n                    for (let colIndex in context.gameBoard[rowIndex]) {\n                        let unit = context.gameBoard[rowIndex][colIndex].unit\n                        if (unit.id !== '') {\n                            let unitSnap = unit.ref.getSnapshot();\n                            if (unitSnap.context.movable) {\n                                units.push({\n                                    id: unit.id,\n                                    type: unitSnap.context.type\n                                })\n                            }\n                        }\n                    }\n                }\n                return {\n                    type: 'MOVES',\n                    moves: {\n                        production: context.producer.every((prod) => prod.unit.ref.getSnapshot().context.empire !== context.currentEmpire),\n                        units: units\n                    }\n                }\n            }),\n            spawnEmpire: assign<GameBoardContext, EmpireEvents>({\n                gameBoard: (context, event) => {\n                    let temp = context.gameBoard;\n                    const spawnPoints = [\n                        {x: 1, y: 1},\n                        {x: 1, y: context.gameBoard.length - 2},\n                        {x: context.gameBoard[0].length - 2, y: 1},\n                        {x: context.gameBoard[0].length - 2, y: context.gameBoard.length - 2}\n                    ]\n                    for (let point of spawnPoints) {\n                        if (targetNotOccupied(point.x, point.y, context.gameBoard)) {\n                            const base = {\n                                ...baseContext,\n                                id: uuid(),\n                                empire: event.empire\n                            }\n                            temp[point.y][point.x].unit = {\n                                id: base.id,\n                                ref: spawn(createUnitMachine(base))\n                            };\n\n                            const initialUnit = {\n                                ...archerContext,\n                                id: uuid(),\n                                empire: event.empire\n                            }\n                            let [spawnY, spawnX] = getFreeNeighbour(point.x, point.y, context.gameBoard)\n                            temp[spawnY][spawnX].unit = {\n                                id: initialUnit.id,\n                                ref: spawn(createUnitMachine(initialUnit))\n                            };\n                            return temp;\n                        }\n                    }\n                    // all spawn points occupied\n                    return temp;\n                },\n                livingEmpires: (context, event) => ([\n                    ...context.livingEmpires,\n                    event.empire\n                ])\n\n            }),\n            removeEmpire: assign<GameBoardContext, DeadEvent>({\n                livingEmpires: (context, event) => {\n                    return context.livingEmpires.filter((el: empires) => el !== event.unitEmpire)\n                },\n                gameBoard: (context, event) => {\n                    const temp = context.gameBoard;\n                    for (let rowIndex in gameBoard) {\n                        for (let colIndex in gameBoard[rowIndex]) {\n                            let fieldUnit = context.gameBoard[rowIndex][colIndex].unit\n                            if (fieldUnit.id !== '') {\n                                if (fieldUnit.ref.getSnapshot().context.empire === event.unitEmpire) {\n                                    // @ts-ignore\n                                    fieldUnit.ref.stop()\n                                    temp[rowIndex][colIndex].unit = dummyRef;\n                                }\n                            }\n                        }\n                    }\n                    return temp;\n                },\n                producer: (context, event) => {\n                    return context.producer.filter(\n                        (prod: Producer) => prod.unit.ref.getSnapshot().context.empire !== event.unitEmpire\n                    )\n                }\n            }),\n            removeDeadUnit: assign<GameBoardContext, DeadEvent>({\n                gameBoard: (context, event) => {\n                    const temp = context.gameBoard;\n\n                    const [row, col] = getUnitLocation(event.id, context.gameBoard);\n                    temp[row][col].unit = dummyRef;\n\n                    return temp;\n                }\n            }),\n            applyMove: assign<GameBoardContext, UnitEvents>({\n                gameBoard: (context, event) => {\n                    const temp = context.gameBoard;\n                    const [row, col] = getUnitLocation(event.id, context.gameBoard);\n                    temp[event.y][event.x].unit = temp[row][col].unit;\n                    temp[row][col].unit = dummyRef;\n\n                    return temp;\n                }\n            }),\n            applyAttackDamage: send(\n                (context, event: UnitEvents) => {\n                    const sourceUnitRef = getUnit(event.id, context.gameBoard).ref\n                    const sourceUnit: UnitContext = sourceUnitRef.getSnapshot().context\n                    const targetUnitRef = context.gameBoard[event.y][event.x].unit.ref\n                    const targetUnit: UnitContext = targetUnitRef.getSnapshot().context\n\n                    let damage = sourceUnit.attack\n                    if (sourceUnit.effective.includes(targetUnit.type)) {\n                        damage *= 2;\n                    } else if (sourceUnit.ineffective.includes(targetUnit.type)) {\n                        damage /= 2;\n                    }\n                    return {\n                        type: 'DAMAGE',\n                        damage: damage\n                    }\n                },\n                {\n                    to: (context: GameBoardContext, event: UnitEvents) => context.gameBoard[event.y][event.x].unit.ref\n                }\n            ),\n            applyReceivedDamage: send(\n                (context, event) => {\n                    const [row, col] = getUnitLocation(event.id, context.gameBoard);\n                    const sourceUnitRef = getUnit(event.id, context.gameBoard).ref\n                    const sourceUnit: UnitContext = sourceUnitRef.getSnapshot().context\n                    const targetUnitRef = context.gameBoard[event.y][event.x].unit.ref\n                    const targetUnit: UnitContext = targetUnitRef.getSnapshot().context\n\n                    const distance = getDistance(\n                        {x: col, y: row},\n                        {x: event.x, y: event.y},\n                        context.gameBoard\n                    );\n\n                    let damage = 0\n                    if (distance <= targetUnit.attackRange) {\n                        damage = targetUnit.attack\n                        if (targetUnit.effective.includes(sourceUnit.type)) {\n                            damage *= 2;\n                        } else if (targetUnit.ineffective.includes(sourceUnit.type)) {\n                            damage /= 2;\n                        }\n                    }\n\n                    return {\n                        type: 'DAMAGE',\n                        damage: damage\n                    }\n                },\n                {\n                    to: (context: GameBoardContext, event: UnitEvents) => getUnit(event.id, context.gameBoard).ref\n                }\n            )\n        },\n        guards: {\n            alreadyProducing: (context: GameBoardContext) => {\n                return context.producer.some((prod: Producer) => prod.unit.ref.getSnapshot().context.empire === context.currentEmpire)\n            },\n            unitIsBase: (_: GameBoardContext, event: DeadEvent) => {\n                return event.unitType === units.Base\n            },\n            unitExistsNot: (context: GameBoardContext, event: UnitEvents) => {\n                const [x, y] = getUnitLocation(event.id, context.gameBoard);\n                return (x === -1 || y === -1);\n            },\n            targetNotOnMap: (context: GameBoardContext, event: UnitEvents) => {\n                if (event.x >= context.gameBoard[0].length || event.x < 0 ||\n                    event.y >= context.gameBoard.length || event.y < 0) {\n                    return true;\n                }\n            },\n            targetNotOccupied: (context: GameBoardContext, event: UnitEvents) => {\n                return targetNotOccupied(event.x, event.y, context.gameBoard);\n            },\n            targetOccupiedByEnemy: (context: GameBoardContext, event: UnitEvents) => {\n                if (targetNotOccupied(event.x, event.y, context.gameBoard)) {\n                    return false;\n                } else {\n                    const targetUnitEmpire = context.gameBoard[event.y][event.x].unit.ref.getSnapshot().context.empire;\n                    const sourceUnitEmpire = getUnit(event.id, context.gameBoard).ref.getSnapshot().context.empire;\n                    return targetUnitEmpire !== sourceUnitEmpire;\n                }\n            },\n            targetOccupiedByAlly: (context: GameBoardContext, event: UnitEvents) => {\n                if (targetNotOccupied(event.x, event.y, context.gameBoard)) {\n                    return false;\n                } else {\n                    const targetUnitEmpire = context.gameBoard[event.y][event.x].unit.ref.getSnapshot().context.empire;\n                    const sourceUnitEmpire = getUnit(event.id, context.gameBoard).ref.getSnapshot().context.empire;\n                    return targetUnitEmpire === sourceUnitEmpire;\n                }\n            },\n            outOfRange: (context: GameBoardContext, event: UnitEvents) => {\n                if (event.x >= context.gameBoard[0].length || event.x < 0 ||\n                    event.y >= context.gameBoard.length || event.y < 0) {\n                    return true;\n                }\n                const [row, col] = getUnitLocation(event.id, context.gameBoard);\n                const sourceUnit = getUnit(event.id, context.gameBoard).ref.getSnapshot();\n                const distance = getDistance(\n                    {x: col, y: row},\n                    {x: event.x, y: event.y},\n                    context.gameBoard\n                );\n\n                let unitRange;\n                switch (event.type) {\n                    case \"MOVE\":\n                        unitRange = sourceUnit.context.moveRange;\n                        break;\n                    case \"ATTACK\":\n                        unitRange = sourceUnit.context.attackRange;\n                        break;\n                    default:\n                        // should not happen\n                        unitRange = 1\n                }\n\n                return distance > unitRange\n            }\n        }\n    }\n);\n","import React from \"react\";\n\nexport const GameBoardReactContext = React.createContext({\n    number_tiles_x: 15,\n    number_tiles_y: 10,\n    tile_size: 6\n});\n","import React from \"react\";\nimport {GameBoardReactContext} from \"./GameBoardReactContext\";\n\ninterface HealthBarProps {\n    health: number,\n    maxHealth: number\n}\n\nexport function HealthBar(props: HealthBarProps) {\n    const {tile_size} = React.useContext(GameBoardReactContext)\n    const start_x = -tile_size / 2\n    const end_x = start_x + (props.health * tile_size / props.maxHealth)\n    const y = -tile_size / 2 - 1\n\n    let css_classes = \"healthbar\"\n    css_classes += props.health < props.maxHealth / 2 ? \" lowhealth\" : \"\"\n\n    return (\n        <line x1={start_x} y1={y} x2={end_x} y2={y} className={css_classes}/>\n    );\n\n}\n","import React from \"react\";\nimport {UnitProps} from \"./Unit\";\n\nexport function Base(props: UnitProps) {\n    return (\n        <svg y={-props.size / 2} x={-props.size / 2} width={props.size}\n             height={props.size}\n             viewBox=\"0 0 510 450\" className={\"unit\"}>\n            <path\n                className={props.empire}\n                d=\"M357.738,118.549V98.766V82.925c0-4.783-3.878-8.661-8.661-8.661h-13.524c-4.783,0-8.661,3.878-8.661,8.661v10.77\n\t\tc0,2.801-2.271,5.071-5.071,5.071h-8.202c-2.801,0-5.071-2.271-5.071-5.071v-10.77c0-4.783-3.878-8.661-8.661-8.661h-13.559\n\t\tc-4.783,0-8.661,3.878-8.661,8.661v10.77c0,2.801-2.271,5.071-5.071,5.071h-8.27c-2.773,0-5.032-2.229-5.07-5.002l-0.15-10.958\n\t\tc-0.065-4.736-3.922-8.542-8.659-8.542h-13.644c-4.783,0-8.661,3.878-8.661,8.661v10.77c0,2.801-2.27,5.071-5.071,5.071h-8.202\n\t\tc-2.801,0-5.071-2.271-5.071-5.071v-10.77c0-4.783-3.878-8.661-8.661-8.661h-13.557c-4.783,0-8.661,3.878-8.661,8.661v10.77\n\t\tc0,2.801-2.271,5.071-5.071,5.071h-8.203c-2.801,0-5.071-2.271-5.071-5.071v-10.77c0-4.783-3.878-8.661-8.661-8.661h-13.541\n\t\tc-4.783,0-8.661,3.878-8.661,8.661v15.841v19.783l18.188,24.295h0.109v270.338H339.44V142.844h0.111L357.738,118.549z\n\t\tM267.596,243.81h-47.779v-40.138c0-13.186,10.691-23.883,23.891-23.883c13.201,0,23.889,10.697,23.889,23.889V243.81z\n\t\tM487.033,198.133c-0.004-2.309-0.931-4.521-2.574-6.145c-1.643-1.623-3.866-2.522-6.176-2.499l-13.541,0.14\n\t\tc-4.748,0.049-8.571,3.911-8.571,8.66v10.541c0,2.8-2.271,5.07-5.071,5.07h-8.221c-2.8,0-5.07-2.271-5.07-5.07v-10.77\n\t\tc0-4.782-3.877-8.66-8.66-8.66h-13.541c-4.783,0-8.66,3.878-8.66,8.66v10.77c0,2.8-2.271,5.07-5.07,5.07h-8.19\n\t\tc-2.8,0-5.07-2.271-5.07-5.07v-10.77c0-4.782-3.877-8.66-8.66-8.66H366.4c-4.783,0-8.66,3.878-8.66,8.66v215.116h129.705\n\t\tL487.033,198.133z\n\t\tM129.296,198.043c-0.009-4.777-3.884-8.645-8.661-8.645h-13.341c-4.737,0-8.596,3.807-8.66,8.543l-0.149,10.956\n\t\tc-0.037,2.773-2.296,5.002-5.07,5.002h-8.257c-2.801,0-5.071-2.27-5.071-5.071V198.06c0-4.783-3.877-8.661-8.66-8.661H57.885\n\t\tc-4.783,0-8.661,3.878-8.661,8.661v10.769c0,2.801-2.271,5.071-5.071,5.071h-8.219c-2.801,0-5.071-2.27-5.071-5.071V198.06\n\t\tc0-4.783-3.878-8.661-8.661-8.661H8.66c-4.783,0-8.66,3.878-8.66,8.661v215.121h129.709L129.296,198.043z\"/>\n        </svg>\n\n    );\n}\n\n","import React from \"react\";\nimport {Archer} from \"./Archer\"\nimport {HealthBar} from \"./HealthBar\";\nimport {useActor} from \"@xstate/react\";\nimport {Horseman} from \"./Horseman\";\nimport {Spearman} from \"./Spearman\";\nimport {units} from \"./Unit\";\nimport {Base} from \"./Base\";\nimport {ActorRef} from \"xstate\";\nimport {GameBoardReactContext} from \"./GameBoardReactContext\";\n\ninterface GamePieceProps {\n    unitRef: ActorRef<any>,\n    unitId: string\n}\n\nexport function GamePiece(props: GamePieceProps) {\n    const [state] = useActor(props.unitRef)\n\n    const {tile_size} = React.useContext(GameBoardReactContext)\n\n    return (\n        <g>\n            <HealthBar health={state.context.health} maxHealth={state.context.maxHealth}/>\n            {\n                (() => {\n                    switch (state.context.type) {\n                        case units.Archer:\n                            return <Archer empire={state.context.empire} size={tile_size}/>\n                        case units.Horseman:\n                            return <Horseman empire={state.context.empire} size={tile_size}/>\n                        case units.Spearman:\n                            return <Spearman empire={state.context.empire} size={tile_size}/>\n                        case units.Base:\n                            return <Base empire={state.context.empire} size={tile_size}/>\n                    }\n                })()\n            }\n        </g>\n    );\n}\n","import React from 'react';\nimport {Hexagon, Text} from 'react-hexgrid';\nimport {GamePiece} from \"./GamePiece\";\nimport {ActorRef} from \"xstate\";\n\n\ninterface GameTileProps {\n    q: number,\n    r: number,\n    s: number,\n    unitRef: ActorRef<any>,\n    unitId: string\n}\n\nfunction hexToChess(q: number, r: number, s: number){\n    return `${(q + 10).toString(36).toUpperCase()}${Math.floor((r-s)/2)+1}`\n}\n\nexport function GameTile(props: GameTileProps) {\n    const unitMovable = () => props.unitId !== '' && props.unitRef.getSnapshot().context.movable ? 'movable' : ''\n    return (\n        <Hexagon q={props.q} r={props.r} s={props.s} className={unitMovable()}>\n            {Object.entries(props.unitRef).length !== 0 && <GamePiece unitRef={props.unitRef} unitId={props.unitId}/>}\n            <Text y={4.5}>{hexToChess(props.q, props.r, props.s)}</Text>\n        </Hexagon>\n    );\n}\n\n","import React from \"react\";\nimport {GridGenerator, HexGrid, Layout} from \"react-hexgrid\";\nimport {GameTile} from \"./GameTile\";\nimport {useActor} from \"@xstate/react\";\nimport {ActorRef} from \"xstate\";\n\n\nfunction getGameBoardDimensions(numberTilesX: number, numberTilesY: number, tileSize: number) {\n    const width = numberTilesX * (tileSize * 1.5 + 1) + tileSize / 2\n\n    const hexagon_height = Math.sqrt(tileSize ** 2 - (tileSize / 2) ** 2)\n    const height = numberTilesY * (hexagon_height * 2 + 1) + hexagon_height\n\n    return [width, height]\n}\n\ninterface GameBoardProps {\n    numberTilesX: number,\n    numberTileY: number,\n    tileSize: number,\n    gameBoardRef: ActorRef<any>\n}\n\nexport function GameBoard(props: GameBoardProps) {\n    const [gameBoardWidth, gameBoardHeight] = getGameBoardDimensions(props.numberTilesX, props.numberTileY, props.tileSize)\n    const hexagons: HexGridType = GridGenerator.orientedRectangle(props.numberTilesX, props.numberTileY);\n\n    const [gameBoardState] = useActor(props.gameBoardRef);\n\n    return (\n        <div className={'gameBoard'}>\n            <HexGrid width=\"auto\" height=\"96vh\"\n                     viewBox={-props.tileSize + \" \" + -props.tileSize + \" \" + gameBoardWidth + \" \" + gameBoardHeight}>\n                <Layout size={{x: props.tileSize, y: props.tileSize}} spacing={1.05}>\n                    {hexagons.map((hex: any, i: number) => {\n                        const unit = gameBoardState.context.gameBoard[i % props.numberTileY][hex.q].unit\n                        return <GameTile key={i} q={hex.q} r={hex.r} s={hex.s}\n                                         unitRef={unit.ref} unitId={unit.id}/>\n                    })}\n                </Layout>\n            </HexGrid>\n        </div>\n    );\n}\n","import {Actions, actions, assign, createMachine, forwardTo} from \"xstate\";\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\nimport {MachineRef} from \"../Util\";\nimport uuid from \"uuid-v4\";\nimport {pure, respond} from \"xstate/es/actions\";\n\n\nconst {send, cancel} = actions;\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\nconst defaultPassivity = 4;\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()));\n\n\nexport interface SRMContext {\n    asr: SpeechRecognition;\n    tts: SpeechSynthesis;\n    voice: SpeechSynthesisVoice;\n    ttsUtterance: MySpeechSynthesisUtterance;\n    recResult: Hypothesis[];\n    hapticInput: string;\n    nluData: any;\n    ttsAgenda: string;\n    sessionId: string;\n    tdmAll: any;\n    tdmUtterance: string;\n    tdmPassivity: number;\n    tdmActions: any;\n    tdmVisualOutputInfo: any;\n    tdmExpectedAlternatives: any;\n    azureAuthorizationToken: string;\n    audioCtx: any;\n\n    listeners: MachineRef[];\n}\n\nexport type SRMEvents =\n    | { type: 'TTS_READY' }\n    | { type: 'TTS_ERROR' }\n    | { type: 'CLICK' }\n    | { type: 'SELECT', value: any }\n    | { type: 'SHOW_ALTERNATIVES' }\n    | { type: 'STARTSPEECH' }\n    | { type: 'RECOGNISED' }\n    | { type: 'ASRRESULT', value: Hypothesis[] }\n    | { type: 'ENDSPEECH' }\n    | { type: 'LISTEN' }\n    | { type: 'TIMEOUT' }\n    | { type: 'RECSTOP' }\n    | { type: 'REPROMPT' }\n    | { type: 'SPEAK', value: string }\n    | { type: 'REGISTER' };\n\n\nexport const createSpeechRecognitionMachine = createMachine<SRMContext, SRMEvents>({\n    id: 'speechRecMachine',\n    type: 'parallel',\n    entry: assign({\n        listeners: [] as MachineRef[]\n    }),\n    states: {\n        registration: {\n            // @ts-ignore\n            on: {\n                REGISTER: {\n                    actions: [\n                        'registerListeners',\n                        respond('REGISTERED')\n                    ]\n                }\n            }\n        },\n        speechRecognition: {\n            id: 'speechRec',\n            initial: 'setUp',\n            states: {\n                setUp: {\n                    entry: [\n                        assign({\n                            audioCtx: (_ctx) =>\n                                new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                        }),\n                        (context) =>\n                            navigator.mediaDevices.getUserMedia({audio: true})\n                                .then(function (stream) {\n                                    context.audioCtx.createMediaStreamSource(stream)\n                                })\n                    ],\n                    always: 'getToken'\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => {\n                                    return {azureAuthorizationToken: event.data}\n                                }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const {speechSynthesis, SpeechSynthesisUtterance} = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find(v => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: {\n                            target: 'idle',\n                            actions: 'forwardToListeners'\n                        },\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => {\n                                return {ttsAgenda: event.value}\n                            })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: {\n                            target: 'idle',\n                            actions: 'sendUtteranceToListeners'\n                        },\n                        SELECT: 'idle',\n                        CLICK: '.pause',\n                        RECSTOP: 'idle'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    {type: 'TIMEOUT'},\n                                    {\n                                        delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)),\n                                        id: 'timeout'\n                                    }\n                                )],\n                            on: {\n                                TIMEOUT: {\n                                    target: '#speechRec.idle',\n                                    actions: 'forwardToListeners'\n                                },\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {},\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: {CLICK: 'noinput'}\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: {\n                            target: 'idle',\n                            actions: 'forwardToListeners'\n                        },\n                        SELECT: 'idle',\n                        CLICK: {target: 'idle', actions: send('ENDSPEECH')}\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    }\n}, {\n    actions: {\n        // @ts-ignore\n        forwardToListeners: pure((context: SRMContext) => {\n            let actions: Actions<any, any> = [];\n            for (let listener of context.listeners) {\n                actions.push(forwardTo(() => listener.ref))\n            }\n            return actions;\n        }),\n        // @ts-ignore\n        sendUtteranceToListeners: pure((context: SRMContext) => {\n            let actions: Actions<any, any> = [];\n            for (let listener of context.listeners) {\n                actions.push(send(context => ({\n                    type: 'RECOGNISED',\n                    value: context.recResult[0]\n                }), {\n                    to: () => listener.ref\n                }))\n            }\n            return actions;\n        }),\n        registerListeners: assign({\n            // @ts-ignore\n            listeners: (context: SRMContext, _e, {_event}) => [\n                ...context.listeners,\n                {\n                    id: uuid(),\n                    ref: _event.origin\n                }\n            ]\n        })\n    }\n});\n","import {Status} from \"./Status\";\nimport {asEffect, useMachine} from \"@xstate/react\";\nimport {gameMachine} from \"../machines/GameMachine\";\nimport {assign, spawn} from \"xstate\";\nimport uuid from \"uuid-v4\";\nimport {createGameBoardMachine, Producer} from \"../machines/GameBoardMachine\";\nimport {dummyRef} from \"../Util\";\nimport {GameBoard} from \"./GameBoard\";\nimport createSpeechRecognitionPonyfill from \"web-speech-cognitive-services/lib/SpeechServices/SpeechToText\";\nimport {createSpeechRecognitionMachine, SRMContext} from \"../machines/SpeechRecognitionMachine\";\n\n\nconst createDefaultGameBoard = (x: number, y: number) => {\n    const defaultGameBoard = [];\n    for (let row = 0; row < y; row++) {\n        let gameBoardRow = [];\n        for (let col = 0; col < x; col++) {\n            let r = row - Math.floor(col / 2);\n            gameBoardRow.push({\n                hexCoordinate: {\n                    q: col,\n                    r: r,\n                    s: -col - r\n                },\n                unit: dummyRef\n            });\n        }\n        defaultGameBoard.push(gameBoardRow);\n    }\n    return defaultGameBoard;\n}\n\nexport function Game() {\n    const number_tiles_x = 15;\n    const number_tiles_y = 10;\n    const tile_size = 6;\n\n    const REGION = 'northeurope';\n    // @ts-ignore\n    const [_, speechSend, speechInterpret] = useMachine(createSpeechRecognitionMachine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect((context: SRMContext) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context: SRMContext) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context: SRMContext) => {\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\n                content = content + `${context.ttsAgenda}</voice></speak>`\n                console.debug(content)\n                const utterance = new context.ttsUtterance(content);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => speechSend('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context: SRMContext) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context: SRMContext) => {\n                const\n                    {SpeechRecognition}\n                        = createSpeechRecognitionPonyfill({\n                        audioContext: context.audioCtx,\n                        credentials: {\n                            region: REGION,\n                            authorizationToken: context.azureAuthorizationToken,\n                        }\n                    });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function (event: any) {\n                    let result = event.results[0]\n                    if (result.isFinal) {\n                        speechSend({\n                            type: \"ASRRESULT\",\n                            // @ts-ignore event has property\n                            value: [{\n                                \"utterance\": result[0].transcript,\n                                \"confidence\": result[0].confidence\n                            }]\n                        })\n                    } else {\n                        speechSend({type: \"STARTSPEECH\"});\n                    }\n                }\n            }),\n\n            recLogResult: (context: SRMContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent:\n                (context: SRMContext) => {\n                    /* context.nluData = event.data */\n                    console.log('<< NLU intent: ' + context.nluData.intent.name)\n                }\n        }\n    })\n    const speechMachineRef = {\n        id: uuid(),\n        ref: speechInterpret\n    }\n    // @ts-ignore\n    const [gameState, gameSend] = useMachine(gameMachine(speechMachineRef), {\n            devTools: true,\n            actions: {\n                createGameBoard: assign({\n                    gameBoard: () => ({\n                        id: uuid(),\n                        ref: spawn(createGameBoardMachine(createDefaultGameBoard(number_tiles_x, number_tiles_y)), 'gameBoard')\n                    })\n                })\n            }\n        }\n    );\n\n    const currentEmpire = gameState.context.currentEmpire.id !== '' ?\n        gameState.context.currentEmpire.ref.getSnapshot().context.empire :\n        undefined;\n    const userEmpire = gameState.context.userEmpire.id !== '' ?\n        gameState.context.userEmpire.ref.getSnapshot().context.empire :\n        undefined;\n    const production = () => {\n        if (gameState.context.gameBoard.id !== '' && currentEmpire !== undefined) {\n            let productions = gameState.context.gameBoard.ref.getSnapshot().context.producer\n            if (productions) {\n                let userProductions = productions.filter(\n                    (prod: Producer) => prod.unit.ref.getSnapshot().context.empire === userEmpire\n                )\n                return userProductions.length === 0 ? undefined : userProductions[0]\n            }\n        }\n        return undefined\n    }\n    const output = () => {\n        switch (gameState.value) {\n            case 'idle':\n            //fallthrough\n            case 'settingUp:':\n                return <div className={'start-button'} onClick={() => gameSend({type: 'START'})}>Start Game</div>\n            default:\n                return (\n                    <div className={'game'}>\n                        <Status turn={gameState.context.turn}\n                                production={production()}\n                        />\n                        <GameBoard numberTilesX={number_tiles_x}\n                                   numberTileY={number_tiles_y}\n                                   tileSize={tile_size}\n                                   gameBoardRef={gameState.context.gameBoard.ref}/>\n                    </div>\n                )\n        }\n    };\n    return (\n        <div className={\"app\"}>\n            {output()}\n        </div>\n    )\n}\n","import ReactDOM from \"react-dom\";\nimport \"./styles.scss\";\nimport {inspect} from \"@xstate/inspect\";\nimport {Game} from \"./components/Game\";\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nfunction App() {\n    return (\n        <Game/>\n    );\n}\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n    <App/>,\n    rootElement);\n\n"],"sourceRoot":""}